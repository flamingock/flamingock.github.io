"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[3690],{3681:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"target-systems/sql-target-system","title":"SQL","description":"The SQL target system (SqlTargetSystem) enables Flamingock to apply changes to relational databases including PostgreSQL, MySQL, Oracle, and SQL Server using standard JDBC connections. As a transactional target system, it supports automatic rollback through the database\'s native transaction capabilities.","source":"@site/docs/target-systems/sql-target-system.md","sourceDirName":"target-systems","slug":"/target-systems/sql-target-system","permalink":"/docs/target-systems/sql-target-system","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/target-systems/sql-target-system.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"SQL","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"MongoDB Spring Data","permalink":"/docs/target-systems/mongodb-springdata-target-system"},"next":{"title":"DynamoDB","permalink":"/docs/target-systems/dynamodb-target-system"}}');var a=t(4848),i=t(8453);const r={title:"SQL",sidebar_position:3},c="SQL Target System",o={},d=[{value:"Minimum recommended setup",id:"minimum-recommended-setup",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Required dependencies",id:"required-dependencies",level:3},{value:"Optional configurations",id:"optional-configurations",level:3},{value:"Configuration example",id:"configuration-example",level:2},{value:"Transactional support",id:"transactional-support",level:2},{value:"Available dependencies in ChangeUnits",id:"available-dependencies-in-changeunits",level:2},{value:"Next steps",id:"next-steps",level:2}];function l(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"sql-target-system",children:"SQL Target System"})}),"\n",(0,a.jsxs)(n.p,{children:["The SQL target system (",(0,a.jsx)(n.code,{children:"SqlTargetSystem"}),") enables Flamingock to apply changes to relational databases including PostgreSQL, MySQL, Oracle, and SQL Server using standard JDBC connections. As a transactional target system, it supports automatic rollback through the database's native transaction capabilities."]}),"\n",(0,a.jsx)(n.h2,{id:"minimum-recommended-setup",children:"Minimum recommended setup"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'SqlTargetSystem sqlTarget = new SqlTargetSystem("inventory-database")\n    .withDatasource(dataSource);\n'})}),"\n",(0,a.jsx)(n.p,{children:"While dependencies can be provided through the global context, we highly recommend injecting them directly at the target system level. This provides clearer scoping, better isolation between systems, and makes dependencies explicit and easier to track."}),"\n",(0,a.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,a.jsxs)(n.p,{children:["Following Flamingock's ",(0,a.jsx)(n.a,{href:"../flamingock-library-config/target-system-configuration.md#dependency-resolution-hierarchy",children:"dependency resolution hierarchy"}),", you can provide dependencies via direct injection or global context."]}),"\n",(0,a.jsx)(n.h3,{id:"required-dependencies",children:"Required dependencies"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Dependency"}),(0,a.jsx)(n.th,{children:"Method"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DataSource"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:".withDatasource(dataSource)"})}),(0,a.jsxs)(n.td,{children:["JDBC DataSource connection pool - ",(0,a.jsx)(n.strong,{children:"required"})," for both ChangeUnit execution and transaction management"]})]})})]}),"\n",(0,a.jsx)(n.h3,{id:"optional-configurations",children:"Optional configurations"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Configuration"}),(0,a.jsx)(n.th,{children:"Method"}),(0,a.jsx)(n.th,{children:"Default"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"Connection"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:".withConnection(connection)"})}),(0,a.jsx)(n.td,{children:"None"}),(0,a.jsx)(n.td,{children:"Direct JDBC connection (alternative to DataSource)"})]})})]}),"\n",(0,a.jsxs)(n.p,{children:["Remember: If not provided directly via ",(0,a.jsx)(n.code,{children:".withXXX()"}),", Flamingock searches the global context. If still not found:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Required dependencies"})," will throw an exception"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"configuration-example",children:"Configuration example"}),"\n",(0,a.jsx)(n.p,{children:"Here's a comprehensive example showing dependency resolution:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'// Target system with specific dependencies\nSqlTargetSystem sqlTarget = new SqlTargetSystem("inventory-database")\n    .withDatasource(inventoryDataSource)       // Target-specific datasource\n    .addDependency(inventoryService);          // Custom service for this target\n\n// Global context with different dependencies\nFlamingock.builder()\n    .addDependency(defaultDataSource)          // Different datasource in global\n    .addDependency(emailService)               // Available to all targets\n    .addTargetSystems(sqlTarget)\n    .build();\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:'What gets resolved for ChangeUnits in "inventory-database":'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"DataSource"}),": Uses ",(0,a.jsx)(n.code,{children:"inventoryDataSource"})," (from target system, not ",(0,a.jsx)(n.code,{children:"defaultDataSource"})," from global)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"InventoryService"}),": Available from target system context"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"EmailService"}),": Available from global context"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"The target system context always takes precedence, ensuring proper isolation between different systems."}),"\n",(0,a.jsx)(n.h2,{id:"transactional-support",children:"Transactional support"}),"\n",(0,a.jsxs)(n.p,{children:["For a ChangeUnit to leverage SQL's transactional capabilities, it must use either the ",(0,a.jsx)(n.code,{children:"DataSource"})," or ",(0,a.jsx)(n.code,{children:"Connection"})," parameter. Flamingock uses the injected ",(0,a.jsx)(n.code,{children:"DataSource"})," dependency to create connections and manage the transaction lifecycle - starting the transaction before execution, committing on success, and rolling back on failure."]}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:["For detailed information on transaction handling, see ",(0,a.jsx)(n.a,{href:"/docs/flamingock-library-config/transactions",children:"Transactions"}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@TargetSystem("inventory-database")\n@ChangeUnit(id = "update-products", order = "001")\npublic class UpdateProducts {\n    \n    @Execution\n    public void execution(DataSource dataSource) throws SQLException {\n        // DataSource automatically participates in transactions\n        // Flamingock uses the target system\'s DataSource for transaction management\n        // and handles transaction start, commit, and rollback automatically\n        try (Connection conn = dataSource.getConnection()) {\n            try (PreparedStatement stmt = conn.prepareStatement(\n                "INSERT INTO products (id, name, price) VALUES (?, ?, ?)")) {\n                stmt.setString(1, "P001");\n                stmt.setString(2, "Updated Product");\n                stmt.setBigDecimal(3, new BigDecimal("19.99"));\n                stmt.executeUpdate();\n            }\n        }\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["You can also inject a ",(0,a.jsx)(n.code,{children:"Connection"})," directly if you prefer to work with connections instead of DataSource:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@TargetSystem("inventory-database")\n@ChangeUnit(id = "create-indexes", order = "002")\npublic class CreateIndexes {\n    \n    @Execution\n    public void execution(Connection connection) throws SQLException {\n        // Connection automatically participates in transactions\n        // Flamingock uses the target system\'s connection for transaction operations\n        // and handles transaction lifecycle automatically\n        try (Statement stmt = connection.createStatement()) {\n            stmt.execute("CREATE INDEX idx_product_name ON products(name)");\n        }\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"How transactions work:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Connection management"}),": Flamingock uses the target system's ",(0,a.jsx)(n.code,{children:"DataSource"})," to obtain database connections"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Transaction management"}),": The same ",(0,a.jsx)(n.code,{children:"DataSource"})," or ",(0,a.jsx)(n.code,{children:"Connection"})," handles transaction operations (begin, commit, rollback)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Lifecycle"}),": Flamingock automatically manages transaction boundaries, committing on success or rolling back on failure"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Without the ",(0,a.jsx)(n.code,{children:"DataSource"})," or ",(0,a.jsx)(n.code,{children:"Connection"})," parameter, operations will execute but won't participate in transactions."]}),"\n",(0,a.jsx)(n.h2,{id:"available-dependencies-in-changeunits",children:"Available dependencies in ChangeUnits"}),"\n",(0,a.jsxs)(n.p,{children:["Your ChangeUnits can inject SQL-specific dependencies like ",(0,a.jsx)(n.code,{children:"DataSource"})," and ",(0,a.jsx)(n.code,{children:"Connection"}),", but are not limited to these. Any dependency can be added to the target system context via ",(0,a.jsx)(n.code,{children:".addDependency()"}),", taking precedence over global dependencies."]}),"\n",(0,a.jsxs)(n.p,{children:["For more details on dependency resolution, see ",(0,a.jsx)(n.a,{href:"/docs/flamingock-library-config/context-and-dependencies",children:"Context and dependencies"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Learn about ",(0,a.jsx)(n.a,{href:"../flamingock-library-config/target-system-configuration.md",children:"Target system configuration"})]}),"\n",(0,a.jsxs)(n.li,{children:["Explore ",(0,a.jsx)(n.a,{href:"/docs/change-units/introduction",children:"ChangeUnits"})]}),"\n",(0,a.jsxs)(n.li,{children:["See ",(0,a.jsx)(n.a,{href:"https://github.com/flamingock/flamingock-examples/tree/master/sql",children:"SQL examples"})]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var s=t(6540);const a={},i=s.createContext(a);function r(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);