"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[137],{5190:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>g,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"testing/springboot-integration-testing","title":"Spring Boot  Testing","description":"Introduction","source":"@site/docs/testing/springboot-integration-testing.md","sourceDirName":"testing","slug":"/testing/springboot-integration-testing","permalink":"/docs/testing/springboot-integration-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/flamingock/flamingock-java/docs/testing/springboot-integration-testing.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Spring Boot  Testing","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Integration Testing","permalink":"/docs/testing/integration-testing"},"next":{"title":"Flamingock CLI","permalink":"/docs/cli/"}}');var o=i(4848),a=i(8453);const s={title:"Spring Boot  Testing",sidebar_position:4},r=void 0,c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Example: Modifying a Kafka topic and auditing to DynamoDB",id:"example-modifying-a-kafka-topic-and-auditing-to-dynamodb",level:2},{value:"Writing the test",id:"writing-the-test",level:2},{value:"Advanced configuration",id:"advanced-configuration",level:2},{value:"Best practices",id:"best-practices",level:2}];function l(n){const e={admonition:"admonition",blockquote:"blockquote",code:"code",h2:"h2",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(e.p,{children:["This guide explains how to write integration tests for Flamingock when using ",(0,o.jsx)(e.strong,{children:"Spring Boot"})," with the ",(0,o.jsx)(e.code,{children:"@EnableFlamingock"})," annotation."]}),"\n",(0,o.jsx)(e.p,{children:"With this setup:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Flamingock is auto-configured using Spring Boot properties"}),"\n",(0,o.jsxs)(e.li,{children:["Dependencies like ",(0,o.jsx)(e.code,{children:"Kafka AdminClient"})," or ",(0,o.jsx)(e.code,{children:"DynamoDbClient"}),"  must be declared as Spring beans"]}),"\n",(0,o.jsx)(e.li,{children:"The change units are executed end-to-end using real systems (e.g., DynamoDB Local, Kafka, S3)"}),"\n"]}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsx)(e.p,{children:"This test style is ideal for verifying that Flamingock interacts correctly with both its audit backend and any external systems."}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"example-modifying-a-kafka-topic-and-auditing-to-dynamodb",children:"Example: Modifying a Kafka topic and auditing to DynamoDB"}),"\n",(0,o.jsx)(e.p,{children:"Suppose you have a change unit that modifies a Kafka topic configuration:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Change(id = "modify-topic-config", author = "dev-team")  // order extracted from filename\npublic class _20250923_02_ModifyKafkaTopicConfig {\n\n  @Apply\n  public void apply(AdminClient adminClient) {\n    Map<ConfigResource, Config> configs = Map.of(\n      new ConfigResource(ConfigResource.Type.TOPIC, "orders"),\n      new Config(List.of(new ConfigEntry("retention.ms", "86400000")))\n    );\n\n    adminClient.alterConfigs(configs).all().join();\n  }\n\n  @Rollback\n  public void rollback(AdminClient adminClient) {\n    Map<ConfigResource, Config> configs = Map.of(\n      new ConfigResource(ConfigResource.Type.TOPIC, "orders"),\n      new Config(List.of(new ConfigEntry("retention.ms", "604800000")))\n    );\n\n    adminClient.alterConfigs(configs).all().join();\n  }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"writing-the-test",children:"Writing the test"}),"\n",(0,o.jsx)(e.p,{children:"In this test, we\u2019ll:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Spin up ",(0,o.jsx)(e.strong,{children:"Kafka"})," and ",(0,o.jsx)(e.strong,{children:"DynamoDB Local"})," using Testcontainers"]}),"\n",(0,o.jsxs)(e.li,{children:["Provide the required beans (",(0,o.jsx)(e.code,{children:"AdminClient"}),", ",(0,o.jsx)(e.code,{children:"DynamoDbClient"}),") to Spring Boot"]}),"\n",(0,o.jsxs)(e.li,{children:["Assert that the Flamingock change unit executed and was ",(0,o.jsx)(e.strong,{children:"audited to DynamoDB"})]}),"\n"]}),"\n",(0,o.jsxs)(e.admonition,{type:"info",children:[(0,o.jsx)(e.mdxAdmonitionTitle,{}),(0,o.jsxs)(e.p,{children:["Flamingock requires ",(0,o.jsx)(e.code,{children:"DynamoDbClient"})," and other injected services (like ",(0,o.jsx)(e.code,{children:"AdminClient"}),") to be present in the Spring ApplicationContext. Spring Boot will auto-detect them if they are declared as ",(0,o.jsx)(e.code,{children:"@Bean"}),"s."]})]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@SpringBootTest\n@Testcontainers\n@EnableFlamingock(\n    stages = {\n        @Stage(location = "com.yourapp.changes")\n    }\n)\npublic class FlamingockSpringbootTest {\n\n  static final KafkaContainer kafka = new KafkaContainer(DockerImageName.parse("confluentinc/cp-kafka:7.2.1"));\n  \n  static final GenericContainer<?> dynamoDb = new GenericContainer<>("amazon/dynamodb-local")\n      .withExposedPorts(8000);\n\n  @BeforeAll\n  static void startContainers() {\n    kafka.start();\n    dynamoDb.start();\n  }\n\n  @AfterAll\n  static void stopContainers() {\n    kafka.stop();\n    dynamoDb.stop();\n  }\n\n  @Bean\n  public DynamoDbClient dynamoDbClient() {\n    return DynamoDbClient.builder()\n        .region(Region.US_EAST_1)\n        .endpointOverride(URI.create("http://" + dynamoDb.getHost() + ":" + dynamoDb.getFirstMappedPort()))\n        .build();\n  }\n\n  @Bean\n  public AdminClient kafkaAdminClient() {\n    var config = new Properties();\n    config.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());\n    return AdminClient.create(config);\n  }\n\n  @Test\n  void shouldExecuteChangeAndWriteAuditToDynamoDB() {\n    DynamoDbClient client = dynamoDbClient();\n    ScanResponse scan = client.scan(ScanRequest.builder()\n        .tableName("flamingockAuditLogs")\n        .build());\n\n    boolean changeExecuted = scan.items().stream()\n        .anyMatch(item -> "modify-topic-config".equals(item.get("changeId").s())\n                       && "EXECUTED".equals(item.get("state").s()));\n\n    assertTrue(changeExecuted, "Audit log entry for executed change not found in DynamoDB");\n  }\n}\n'})}),"\n",(0,o.jsx)(e.h2,{id:"advanced-configuration",children:"Advanced configuration"}),"\n",(0,o.jsxs)(e.p,{children:["Flamingock can be configured using Spring Boot properties, either in your ",(0,o.jsx)(e.code,{children:"application.yaml"})," or dynamically via ",(0,o.jsx)(e.code,{children:"@DynamicPropertySource"}),"."]}),"\n",(0,o.jsx)(e.p,{children:"This is especially useful for setting values like:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@DynamicPropertySource\nstatic void overrideProperties(DynamicPropertyRegistry registry) {\n  String endpoint = "http://" + dynamoDb.getHost() + ":" + dynamoDb.getFirstMappedPort();\n  registry.add("flamingock.dynamodb.readCapacityUnits", () -> 5L);\n  registry.add("flamingock.dynamodb.writeCapacityUnits", () -> 5L);\n  registry.add("flamingock.dynamodb.autoCreate", () -> true);\n  registry.add("flamingock.dynamodb.auditRepositoryName", () -> "flamingockAuditLogs");\n  registry.add("flamingock.dynamodb.lockRepositoryName", () -> "flamingockLocks");\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"These properties allow Flamingock to connect to the appropriate DynamoDB instance and create its internal metadata tables automatically."}),"\n",(0,o.jsx)(e.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Declare all required dependencies (like ",(0,o.jsx)(e.code,{children:"DynamoDbClient"}),", ",(0,o.jsx)(e.code,{children:"AdminClient"}),", etc.) as Spring beans"]}),"\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"@DynamicPropertySource"})," to inject dynamic config for local/test environments"]}),"\n",(0,o.jsxs)(e.li,{children:["Validate both the ",(0,o.jsx)(e.strong,{children:"external effect"})," (Kafka, S3, etc.) and the ",(0,o.jsx)(e.strong,{children:"audit record"})," in the backend"]}),"\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"Testcontainers"})," for isolation and reproducibility across environments"]}),"\n",(0,o.jsx)(e.li,{children:"Keep tests focused: use Spring Boot only when testing real integration scenarios (not just logic)"}),"\n"]})]})}function g(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(l,{...n})}):l(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>r});var t=i(6540);const o={},a=t.createContext(o);function s(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);