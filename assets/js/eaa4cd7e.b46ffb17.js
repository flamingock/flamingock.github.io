"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[4431],{8453:(e,i,n)=>{n.d(i,{R:()=>l,x:()=>a});var s=n(6540);const r={},o=s.createContext(r);function l(e){const i=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(o.Provider,{value:i},e.children)}},8555:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>t,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"frameworks/springboot-integration/profiles","title":"Profiles","description":"Flamingock supports Spring Boot profiles out of the box. This allows you to conditionally run specific change units depending on which profile(s) are active in your application.","source":"@site/docs/frameworks/springboot-integration/profiles.md","sourceDirName":"frameworks/springboot-integration","slug":"/frameworks/springboot-integration/profiles","permalink":"/docs/frameworks/springboot-integration/profiles","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/frameworks/springboot-integration/profiles.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Profiles","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Builder-based (manual)","permalink":"/docs/frameworks/springboot-integration/builder-based-setup"},"next":{"title":"GraalVM","permalink":"/docs/frameworks/graalvm"}}');var r=n(4848),o=n(8453);const l={title:"Profiles",sidebar_position:4},a="Spring Boot profiles",t={},c=[{value:"What is a Spring profile?",id:"what-is-a-spring-profile",level:2},{value:"How Flamingock uses profiles",id:"how-flamingock-uses-profiles",level:2},{value:"Multiple profiles",id:"multiple-profiles",level:2},{value:"Excluding profiles",id:"excluding-profiles",level:2},{value:"\u2705 Best practices",id:"-best-practices",level:2}];function d(e){const i={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"spring-boot-profiles",children:"Spring Boot profiles"})}),"\n",(0,r.jsxs)(i.p,{children:["Flamingock supports ",(0,r.jsx)(i.strong,{children:"Spring Boot profiles"})," out of the box. This allows you to conditionally run specific change units depending on which profile(s) are active in your application."]}),"\n",(0,r.jsxs)(i.p,{children:["This is useful for managing environment-specific changes, such as different initialization data for ",(0,r.jsx)(i.code,{children:"dev"}),", ",(0,r.jsx)(i.code,{children:"staging"}),", or ",(0,r.jsx)(i.code,{children:"prod"})," environments."]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"what-is-a-spring-profile",children:"What is a Spring profile?"}),"\n",(0,r.jsx)(i.p,{children:"Spring profiles provide a way to segregate parts of your application configuration and behavior based on the active environment."}),"\n",(0,r.jsxs)(i.p,{children:["You can define profiles like ",(0,r.jsx)(i.code,{children:"dev"}),", ",(0,r.jsx)(i.code,{children:"test"}),", ",(0,r.jsx)(i.code,{children:"staging"}),", or ",(0,r.jsx)(i.code,{children:"prod"}),", and activate ",(0,r.jsx)(i.strong,{children:"one or more"})," of them using any of the following methods:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:["Inside ",(0,r.jsx)(i.code,{children:"application.yml"})," or ",(0,r.jsx)(i.code,{children:"application.properties"}),":"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-yaml",children:"spring:\n  profiles:\n    active: dev,staging\n"})}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:["Using profile-specific configuration files like ",(0,r.jsx)(i.code,{children:"application-dev.yml"})," or ",(0,r.jsx)(i.code,{children:"application-prod.yml"})]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"As command-line arguments:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-bash",children:"--spring.profiles.active=dev,staging\n"})}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsx)(i.p,{children:"Through environment variables:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-bash",children:"SPRING_PROFILES_ACTIVE=dev,staging\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.p,{children:["When multiple profiles are active, Flamingock evaluates each change unit against ",(0,r.jsx)(i.strong,{children:"all active profiles"}),", and includes it if any match."]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"how-flamingock-uses-profiles",children:"How Flamingock uses profiles"}),"\n",(0,r.jsxs)(i.p,{children:["Flamingock automatically retrieves the active profiles from Spring\u2019s ",(0,r.jsx)(i.code,{children:"ApplicationContext"}),". You don\u2019t need to manually provide them."]}),"\n",(0,r.jsxs)(i.p,{children:["You can then annotate any change unit with Spring\u2019s native ",(0,r.jsx)(i.code,{children:"@Profile"})," annotation to control whether it runs:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'@ChangeUnit(id = "add-test-data", order = "001")\n@Profile("dev")\npublic class AddTestDataChangeUnit {\n  // will only run if "dev" profile is active\n}\n'})}),"\n",(0,r.jsx)(i.p,{children:"Flamingock applies the same logic as Spring Boot when evaluating whether a change unit should run."}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"multiple-profiles",children:"Multiple profiles"}),"\n",(0,r.jsxs)(i.p,{children:["You can declare multiple profiles in a single ",(0,r.jsx)(i.code,{children:"@Profile"})," expression:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'@Profile({"dev", "staging"})\n'})}),"\n",(0,r.jsxs)(i.p,{children:["This change unit will run if ",(0,r.jsx)(i.strong,{children:"any"})," of the listed profiles is active."]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"excluding-profiles",children:"Excluding profiles"}),"\n",(0,r.jsx)(i.p,{children:"To exclude a change unit from a specific profile, you can use Spring Expression Language (SpEL):"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-java",children:'@Profile("!prod")\n'})}),"\n",(0,r.jsxs)(i.p,{children:["This will run the change unit in ",(0,r.jsxs)(i.strong,{children:["all environments except ",(0,r.jsx)(i.code,{children:"prod"})]}),"."]}),"\n",(0,r.jsx)(i.hr,{}),"\n",(0,r.jsx)(i.h2,{id:"-best-practices",children:"\u2705 Best practices"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:"Use profiles to isolate test data, preview features, or tenant-specific migrations"}),"\n",(0,r.jsx)(i.li,{children:"Avoid mixing profile-specific logic inside a single change unit \u2014 split them into separate classes"}),"\n",(0,r.jsxs)(i.li,{children:["Keep profile names consistent across your team and environments (e.g., use ",(0,r.jsx)(i.code,{children:"dev"})," everywhere, not ",(0,r.jsx)(i.code,{children:"development"}),", ",(0,r.jsx)(i.code,{children:"dev-env"}),", etc.)"]}),"\n",(0,r.jsx)(i.li,{children:"Consider grouping related change units under a shared profile for easier activation"}),"\n"]})]})}function p(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);