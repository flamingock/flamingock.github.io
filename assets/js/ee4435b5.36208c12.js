"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[4278],{6033:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"target-systems/mongodb-springdata-target-system","title":"MongoDB Spring Data","description":"The MongoDB Spring Data target system (MongoSpringDataTargetSystem) enables Flamingock to apply changes to MongoDB databases using Spring Data MongoDB. As a transactional target system, it integrates seamlessly with Spring\'s transaction management and supports automatic rollback through MongoDB\'s native transaction capabilities.","source":"@site/docs/target-systems/mongodb-springdata-target-system.md","sourceDirName":"target-systems","slug":"/target-systems/mongodb-springdata-target-system","permalink":"/docs/target-systems/mongodb-springdata-target-system","draft":false,"unlisted":false,"editUrl":"https://github.com/flamingock/flamingock-java/docs/target-systems/mongodb-springdata-target-system.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"MongoDB Spring Data","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"MongoDB Sync","permalink":"/docs/target-systems/mongodb-target-system"},"next":{"title":"SQL","permalink":"/docs/target-systems/sql-target-system"}}');var i=t(4848),a=t(8453);const r={title:"MongoDB Spring Data",sidebar_position:2},o="MongoDB Spring Data Target System",d={},l=[{value:"Minimum recommended setup",id:"minimum-recommended-setup",level:2},{value:"Dependencies",id:"dependencies",level:2},{value:"Required dependencies",id:"required-dependencies",level:3},{value:"Optional configurations",id:"optional-configurations",level:3},{value:"Configuration example",id:"configuration-example",level:2},{value:"Transactional support",id:"transactional-support",level:2},{value:"Available dependencies in Changes",id:"available-dependencies-in-changes",level:2},{value:"Spring integration",id:"spring-integration",level:2},{value:"Next steps",id:"next-steps",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"mongodb-spring-data-target-system",children:"MongoDB Spring Data Target System"})}),"\n",(0,i.jsxs)(n.p,{children:["The MongoDB Spring Data target system (",(0,i.jsx)(n.code,{children:"MongoSpringDataTargetSystem"}),") enables Flamingock to apply changes to MongoDB databases using Spring Data MongoDB. As a transactional target system, it integrates seamlessly with Spring's transaction management and supports automatic rollback through MongoDB's native transaction capabilities."]}),"\n",(0,i.jsx)(n.h2,{id:"minimum-recommended-setup",children:"Minimum recommended setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'MongoSpringDataTargetSystem mongoTarget = new MongoSpringDataTargetSystem("user-database")\n    .withMongoTemplate(mongoTemplate);\n'})}),"\n",(0,i.jsx)(n.p,{children:"While dependencies can be provided through the global context, we highly recommend injecting them directly at the target system level. This provides clearer scoping, better isolation between systems, and makes dependencies explicit and easier to track."}),"\n",(0,i.jsx)(n.h2,{id:"dependencies",children:"Dependencies"}),"\n",(0,i.jsxs)(n.p,{children:["Following Flamingock's ",(0,i.jsx)(n.a,{href:"/docs/flamingock-library-config/context-and-dependencies",children:"dependency resolution hierarchy"}),", you can provide dependencies via direct injection or global context."]}),"\n",(0,i.jsx)(n.h3,{id:"required-dependencies",children:"Required dependencies"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Dependency"}),(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsx)(n.tbody,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"MongoTemplate"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".withMongoTemplate(template)"})}),(0,i.jsxs)(n.td,{children:["Spring Data MongoDB template - ",(0,i.jsx)(n.strong,{children:"required"})," for both Change execution and transaction management"]})]})})]}),"\n",(0,i.jsx)(n.h3,{id:"optional-configurations",children:"Optional configurations"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Configuration"}),(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Default"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"WriteConcern"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".withWriteConcern(concern)"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"MAJORITY"})," with journal"]}),(0,i.jsx)(n.td,{children:"Write acknowledgment level"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ReadConcern"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".withReadConcern(concern)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"MAJORITY"})}),(0,i.jsx)(n.td,{children:"Read isolation level"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ReadPreference"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:".withReadPreference(pref)"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"PRIMARY"})}),(0,i.jsx)(n.td,{children:"Server selection for reads"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Important"}),": These default values are optimized for maximum consistency and should ideally be left unchanged. Override them only for testing purposes or exceptional cases where the defaults cannot be used (e.g., specific infrastructure limitations)."]}),"\n",(0,i.jsxs)(n.p,{children:["Remember: If not provided directly via ",(0,i.jsx)(n.code,{children:".withXXX()"}),", Flamingock searches the global context. If still not found:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Required dependencies"})," will throw an exception"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optional configurations"})," will use the defaults shown above"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"configuration-example",children:"Configuration example"}),"\n",(0,i.jsx)(n.p,{children:"Here's a comprehensive example showing dependency resolution:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'// Target system with specific dependencies\nMongoSpringDataTargetSystem mongoTarget = new MongoSpringDataTargetSystem("user-database")\n    .withMongoTemplate(userMongoTemplate)      // Target-specific template\n    .addDependency(userAuditService);          // Custom service for this target\n\n// Global context with different dependencies\nFlamingock.builder()\n    .addDependency(defaultMongoTemplate)       // Different template in global\n    .addDependency(emailService)               // Available to all targets\n    .addTargetSystems(mongoTarget)\n    .build();\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'What gets resolved for Changes in "user-database":'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MongoTemplate"}),": Uses ",(0,i.jsx)(n.code,{children:"userMongoTemplate"})," (from target system, not ",(0,i.jsx)(n.code,{children:"defaultMongoTemplate"})," from global)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UserAuditService"}),": Available from target system context"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"EmailService"}),": Available from global context"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WriteConcern/ReadConcern"}),": Use defaults (MAJORITY with journal)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The target system context always takes precedence, ensuring proper isolation between different systems."}),"\n",(0,i.jsx)(n.h2,{id:"transactional-support",children:"Transactional support"}),"\n",(0,i.jsxs)(n.p,{children:["Spring Data MongoDB target system integrates with Spring's transaction management. When a Change is marked as transactional (the default), Flamingock uses the injected ",(0,i.jsx)(n.code,{children:"MongoTemplate"})," dependency to handle transaction operations through Spring's infrastructure."]}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["For detailed information on transaction handling, see ",(0,i.jsx)(n.a,{href:"/docs/flamingock-library-config/transactions",children:"Transactions"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")\n@Change(id = "create-users", order = "001")\npublic class CreateUsers {\n    \n    @Apply\n    public void apply(MongoTemplate mongoTemplate) {\n        // MongoTemplate automatically participates in Spring transactions\n        // Flamingock uses the target system\'s MongoTemplate for transaction management\n        // through Spring\'s @Transactional infrastructure\n        mongoTemplate.save(new User("john@example.com", "John Doe"));\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How transactions work:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Spring integration"}),": Flamingock leverages the target system's ",(0,i.jsx)(n.code,{children:"MongoTemplate"})," within Spring's transaction context"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transaction management"}),": The same ",(0,i.jsx)(n.code,{children:"MongoTemplate"})," handles both Change operations and transaction coordination"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lifecycle"}),": Spring's transaction infrastructure manages start, commit, and rollback automatically"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The transaction lifecycle is managed through Spring's transaction infrastructure, ensuring consistency with your existing Spring Data operations."}),"\n",(0,i.jsx)(n.h2,{id:"available-dependencies-in-changes",children:"Available dependencies in Changes"}),"\n",(0,i.jsxs)(n.p,{children:["Your Changes can inject Spring Data dependencies like ",(0,i.jsx)(n.code,{children:"MongoTemplate"}),", but are not limited to these. Any dependency can be added to the target system context via ",(0,i.jsx)(n.code,{children:".addDependency()"}),", taking precedence over global dependencies."]}),"\n",(0,i.jsxs)(n.p,{children:["For more details on dependency resolution, see ",(0,i.jsx)(n.a,{href:"/docs/flamingock-library-config/context-and-dependencies",children:"Context and dependencies"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"spring-integration",children:"Spring integration"}),"\n",(0,i.jsxs)(n.p,{children:["This target system is designed to work seamlessly with Spring Boot applications. When using Spring Boot auto-configuration, your existing ",(0,i.jsx)(n.code,{children:"MongoTemplate"})," beans are automatically available for injection into target systems."]}),"\n",(0,i.jsxs)(n.p,{children:["For more information on Spring Boot integration, see ",(0,i.jsx)(n.a,{href:"/docs/frameworks/springboot-integration/introduction",children:"Spring Boot integration"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Learn about ",(0,i.jsx)(n.a,{href:"/docs/target-systems/introduction",children:"Target systems"})]}),"\n",(0,i.jsxs)(n.li,{children:["Explore ",(0,i.jsx)(n.a,{href:"/docs/changes/introduction",children:"Changes"})]}),"\n",(0,i.jsxs)(n.li,{children:["See ",(0,i.jsx)(n.a,{href:"https://github.com/flamingock/flamingock-examples/tree/master/mongodb-springdata",children:"MongoDB Spring Data examples"})]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);