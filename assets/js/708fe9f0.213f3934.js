"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[276],{889:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"flamingock-library-config/transactions","title":"Transactions","description":"Flamingock supports transactional execution for change units when the underlying system and configuration allow it.","source":"@site/docs/flamingock-library-config/transactions.md","sourceDirName":"flamingock-library-config","slug":"/flamingock-library-config/transactions","permalink":"/docs/flamingock-library-config/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/flamingock-library-config/transactions.md","tags":[],"version":"current","sidebarPosition":90,"frontMatter":{"title":"Transactions","sidebar_position":90},"sidebar":"tutorialSidebar","previous":{"title":"Events","permalink":"/docs/flamingock-library-config/events"},"next":{"title":"Additional configurations","permalink":"/docs/flamingock-library-config/extra-configuration"}}');var t=i(4848),s=i(8453);const o={title:"Transactions",sidebar_position:90},r="Transactions",l={},c=[{value:"What Flamingock considers transactional",id:"what-flamingock-considers-transactional",level:2},{value:"When transactions don\u2019t apply",id:"when-transactions-dont-apply",level:2},{value:"Disabling transactions",id:"disabling-transactions",level:2},{value:"Per change unit (recommended)",id:"per-change-unit-recommended",level:3},{value:"Globally (less common)",id:"globally-less-common",level:3},{value:"Manual rollback",id:"manual-rollback",level:2},{value:"When to use <code>transactional = false</code>",id:"when-to-use-transactional--false",level:2},{value:"Flamingock Cloud Edition",id:"flamingock-cloud-edition",level:2},{value:"Edition-specific transaction behavior",id:"edition-specific-transaction-behavior",level:2},{value:"\u2705 Best practices",id:"white_check_mark-best-practices",level:2}];function d(n){const e={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"transactions",children:"Transactions"})}),"\n",(0,t.jsxs)(e.p,{children:["Flamingock supports transactional execution for change units ",(0,t.jsx)(e.strong,{children:"when the underlying system and configuration allow it"}),"."]}),"\n",(0,t.jsxs)(e.p,{children:["In this context, ",(0,t.jsx)(e.strong,{children:"transactional execution means wrapping both the user-defined change and the corresponding audit record"})," in a single, atomic operation. This ensures that either both the change and the audit log are committed together, or neither are."]}),"\n",(0,t.jsx)(e.p,{children:"Flamingock logs each change unit execution in an audit store. In transactional scenarios, the change and the audit record are persisted together."}),"\n",(0,t.jsx)(e.p,{children:"This page explains:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"What Flamingock considers transactional"}),"\n",(0,t.jsx)(e.li,{children:"When transactions apply and when they don\u2019t"}),"\n",(0,t.jsx)(e.li,{children:"How Flamingock handles failure and rollback when transactions aren\u2019t available"}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"what-flamingock-considers-transactional",children:"What Flamingock considers transactional"}),"\n",(0,t.jsx)(e.p,{children:"A change unit is considered transactional when:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"The change targets a system that supports transactions (e.g., a modern database)"}),"\n",(0,t.jsxs)(e.li,{children:["The Flamingock ",(0,t.jsx)(e.strong,{children:"Community Edition"})," driver in use supports transactions"]}),"\n",(0,t.jsxs)(e.li,{children:["The change unit is marked as ",(0,t.jsx)(e.code,{children:"transactional = true"})," (default behavior)"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"If these conditions are met, Flamingock wraps the execution of:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["The ",(0,t.jsx)(e.code,{children:"@Execution"})," method of the change unit"]}),"\n",(0,t.jsx)(e.li,{children:"The audit log record creation"}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["...",(0,t.jsx)(e.strong,{children:"within the same transaction"}),". If anything fails, the entire operation is rolled back and not recorded as executed."]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"when-transactions-dont-apply",children:"When transactions don\u2019t apply"}),"\n",(0,t.jsxs)(e.p,{children:["Transactions do ",(0,t.jsx)(e.strong,{children:"not"})," apply in the following scenarios:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["The change targets a ",(0,t.jsx)(e.strong,{children:"non-transactional system"})," (e.g., Kafka, S3, external APIs)"]}),"\n",(0,t.jsxs)(e.li,{children:["The change targets a ",(0,t.jsx)(e.strong,{children:"different database"})," than the one used for Flamingock\u2019s audit log"]}),"\n",(0,t.jsxs)(e.li,{children:["The change performs ",(0,t.jsx)(e.strong,{children:"operations that are not allowed in transactions"})," (e.g., DDL operations in Mysql or MongoDB)"]}),"\n",(0,t.jsxs)(e.li,{children:["The driver or underlying ",(0,t.jsx)(e.strong,{children:"database doesn\u2019t support transactions"})]}),"\n"]}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsxs)(e.p,{children:["In all these cases, mark the change unit with ",(0,t.jsx)(e.code,{children:"@ChangeUnit(transactional = false)"})," to disable transaction wrapping."]})}),"\n",(0,t.jsx)(e.admonition,{type:"warning",children:(0,t.jsxs)(e.p,{children:["If a change unit is marked as transactional (",(0,t.jsx)(e.code,{children:"transactional = false"})," not applied) but targets a system or operation that doesn\u2019t support transactions, Flamingock assumes the database rolled back the change, and skips the ",(0,t.jsx)(e.code,{children:"@RollbackExecution"})," method in case of failure. This can result in partial updates and loss of consistency."]})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"disabling-transactions",children:"Disabling transactions"}),"\n",(0,t.jsx)(e.h3,{id:"per-change-unit-recommended",children:"Per change unit (recommended)"}),"\n",(0,t.jsxs)(e.p,{children:["Transactions are ",(0,t.jsx)(e.strong,{children:"enabled by default"}),". You can disable them explicitly for a given change unit:"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:'@ChangeUnit(id = "provision-bucket", order = "004", author = "team-a", transactional = false)\npublic class S3ProvisioningChange {\n\n  @Execution\n  public void execute(S3Client s3) {\n    s3.createBucket(...);\n  }\n\n  @RollbackExecution\n  public void rollback(S3Client s3) {\n    s3.deleteBucket(...);\n  }\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"This tells Flamingock:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Not to use a transaction for the execution and audit"}),"\n",(0,t.jsxs)(e.li,{children:["To call ",(0,t.jsx)(e.code,{children:"@RollbackExecution"})," if something goes wrong"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"globally-less-common",children:"Globally (less common)"}),"\n",(0,t.jsx)(e.p,{children:"You can also disable transactions across all change units in the builder:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-java",children:"Flamingock\n  .builder()\n  .disableTransaction()\n  .build()\n  .run();\n"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"manual-rollback",children:"Manual rollback"}),"\n",(0,t.jsxs)(e.p,{children:["When ",(0,t.jsx)(e.code,{children:"transactional = false"}),", Flamingock cannot rely on the underlying system to roll back failed operations. Instead, it will attempt a ",(0,t.jsx)(e.strong,{children:"manual rollback"})," by calling your ",(0,t.jsx)(e.code,{children:"@RollbackExecution"})," method if execution fails."]}),"\n",(0,t.jsx)(e.p,{children:"This fallback allows Flamingock to support non-transactional systems like:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Message brokers (e.g., Kafka, RabbitMQ)"}),"\n",(0,t.jsx)(e.li,{children:"External APIs"}),"\n",(0,t.jsx)(e.li,{children:"Cloud infrastructure"}),"\n"]}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsx)(e.p,{children:"You are responsible for writing reliable rollback logic. Flamingock cannot guarantee full recovery unless your rollback method safely restores the previous state."})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"when-to-use-transactional--false",children:["When to use ",(0,t.jsx)(e.code,{children:"transactional = false"})]}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"Type of change"}),(0,t.jsxs)(e.th,{style:{textAlign:"center"},children:[(0,t.jsx)(e.code,{children:"transactional = false"}),"?"]})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Operation allowed in transaction - same DB as audit log (transactional)"}),(0,t.jsx)(e.td,{style:{textAlign:"center"},children:"\u274c"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"Operation not allowed inside transaction (e.g., DDL operations in Mysql or MongoDB)"}),(0,t.jsx)(e.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"ChangeUnit targets different DB than audit log"}),(0,t.jsx)(e.td,{style:{textAlign:"center"},children:"\u2705"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:"ChangeUnit targets non-database system or a non-transactional"}),(0,t.jsx)(e.td,{style:{textAlign:"center"},children:"\u2705"})]})]})]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"flamingock-cloud-edition",children:"Flamingock Cloud Edition"}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsxs)(e.p,{children:["Flamingock Cloud Edition will support transactions through its own internal coordination mechanism.",(0,t.jsx)(e.br,{}),"\n","Documentation will be added when this feature is released."]})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"edition-specific-transaction-behavior",children:"Edition-specific transaction behavior"}),"\n",(0,t.jsx)(e.p,{children:"The examples and recommendations on this page apply to Flamingock generally, but each Community Edition (CE) driver has its own transactional capabilities and constraints."}),"\n",(0,t.jsx)(e.p,{children:"Refer to the relevant edition page for detailed behavior, including:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Whether transactions are supported"}),"\n",(0,t.jsx)(e.li,{children:"How they are initiated and managed"}),"\n",(0,t.jsx)(e.li,{children:"Known limitations (e.g., unsupported operations)"}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Supported transactional CE editions:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/docs/community-edition/ce-mongodb-java-driver",children:"flamingock-ce-mongodb-sync"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/docs/community-edition/ce-mongodb-springdata",children:"flamingock-ce-mongodb-springdata"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/docs/community-edition/ce-dynamodb",children:"flamingock-ce-dynamodb"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"/docs/community-edition/ce-couchbase",children:"flamingock-ce-couchbase"})}),"\n"]}),"\n",(0,t.jsx)(e.admonition,{type:"info",children:(0,t.jsx)(e.p,{children:"Cloud Edition transactional support will be explained in its own section once released."})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.h2,{id:"white_check_mark-best-practices",children:["\u2705"," Best practices"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.strong,{children:["Use ",(0,t.jsx)(e.code,{children:"transactional = false"})," for changes that cannot run in a transaction"]})}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["Some database drivers (e.g., MongoDB Sync) don\u2019t support all operations inside transactions (such as DDL or index creation). In those cases, explicitly set ",(0,t.jsx)(e.code,{children:"transactional = false"})," to avoid runtime errors."]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsxs)(e.strong,{children:["Always set ",(0,t.jsx)(e.code,{children:"transactional = false"})," for non-database change units"]})}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["If your change interacts with a message queue, API, file system, or another external system, it should ",(0,t.jsx)(e.strong,{children:"not"})," be marked as transactional. Flamingock will treat it as non-transactional and enable manual rollback instead."]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Keep change unit scope narrow and isolated"})}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Avoid combining transactional and non-transactional logic within the same change unit. If part of the logic targets a non-transactional system, isolate that logic in a dedicated change unit and mark it appropriately."}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.strong,{children:"Prefer automatic rollback (via transaction) when available"})}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Transactional change units offer stronger guarantees. Use them when the system supports them to ensure atomic execution and safe rollback on failure."})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>r});var a=i(6540);const t={},s=a.createContext(t);function o(n){const e=a.useContext(s);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);