"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[276],{889:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"flamingock-library-config/transactions","title":"Transactions","description":"Flamingock provides intelligent transaction management that adapts to your target systems\' capabilities. Understanding when and how changes are executed transactionally is key to building reliable system evolution.","source":"@site/docs/flamingock-library-config/transactions.md","sourceDirName":"flamingock-library-config","slug":"/flamingock-library-config/transactions","permalink":"/docs/flamingock-library-config/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/flamingock-library-config/transactions.md","tags":[],"version":"current","sidebarPosition":40,"frontMatter":{"title":"Transactions","sidebar_position":40},"sidebar":"tutorialSidebar","previous":{"title":"Lock","permalink":"/docs/flamingock-library-config/lock"},"next":{"title":"Additional configuration","permalink":"/docs/flamingock-library-config/additional-configuration"}}');var t=s(4848),i=s(8453);const r={title:"Transactions",sidebar_position:40},l="Transactions",o={},c=[{value:"How Flamingock handles transactions",id:"how-flamingock-handles-transactions",level:2},{value:"\ud83d\udd04 Transactional target systems",id:"-transactional-target-systems",level:3},{value:"\u26a1 Non-transactional target systems",id:"-non-transactional-target-systems",level:3},{value:"Behavior summary table",id:"behavior-summary-table",level:3},{value:"Best practices",id:"best-practices",level:2},{value:"Always provide @RollbackExecution",id:"always-provide-rollbackexecution",level:3},{value:"Use appropriate transactionality",id:"use-appropriate-transactionality",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"transactions",children:"Transactions"})}),"\n",(0,t.jsx)(e.p,{children:"Flamingock provides intelligent transaction management that adapts to your target systems' capabilities. Understanding when and how changes are executed transactionally is key to building reliable system evolution."}),"\n",(0,t.jsx)(e.h2,{id:"how-flamingock-handles-transactions",children:"How Flamingock handles transactions"}),"\n",(0,t.jsxs)(e.p,{children:["Flamingock's transaction handling is determined by the ",(0,t.jsx)(e.strong,{children:"target system's capabilities"}),", not just the ",(0,t.jsx)(e.code,{children:"transactional"})," flag. The behavior differs fundamentally between transactional and non-transactional target systems."]}),"\n",(0,t.jsx)(e.h3,{id:"-transactional-target-systems",children:"\ud83d\udd04 Transactional target systems"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Examples"}),": PostgreSQL, MySQL, MongoDB, SQL databases, DynamoDB, Couchbase"]}),"\n",(0,t.jsx)(e.p,{children:"These systems support native transaction capabilities:"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsxs)(e.strong,{children:["When ",(0,t.jsx)(e.code,{children:"transactional = true"})," (default)"]}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Execution runs within a native database transaction"}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"On failure"}),": Automatic rollback using database's native transaction mechanism"]}),"\n",(0,t.jsx)(e.li,{children:"Session/connection managed automatically by Flamingock"}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"@RollbackExecution"})," used only for manual operations (CLI undo)"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsxs)(e.strong,{children:["When ",(0,t.jsx)(e.code,{children:"transactional = false"})]}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Execution runs without transaction"}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"On failure"}),": Safety through compensation logic (@RollbackExecution)"]}),"\n",(0,t.jsx)(e.li,{children:"Useful for DDL operations or large bulk operations that exceed transaction limits"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"-non-transactional-target-systems",children:"\u26a1 Non-transactional target systems"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Examples"}),": Kafka, S3, REST APIs, file systems, message queues"]}),"\n",(0,t.jsx)(e.p,{children:"These systems have no native transaction support:"}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsxs)(e.strong,{children:["The ",(0,t.jsx)(e.code,{children:"transactional"})," flag is ignored"]})," - behavior is always the same:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Execution runs normally (no native transaction possible)"}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"On failure"}),": Safety through compensation logic (@RollbackExecution)"]}),"\n",(0,t.jsx)(e.li,{children:"Safety relies entirely on idempotent operations and rollback methods"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"behavior-summary-table",children:"Behavior summary table"}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{children:"Target System Type"}),(0,t.jsxs)(e.th,{children:[(0,t.jsx)(e.code,{children:"transactional = true"})," (default)"]}),(0,t.jsx)(e.th,{children:(0,t.jsx)(e.code,{children:"transactional = false"})})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Transactional"})}),(0,t.jsx)(e.td,{children:"Native transaction rollback on failure"}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.code,{children:"@RollbackExecution"})," on failure"]})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{children:(0,t.jsx)(e.strong,{children:"Non-transactional"})}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.strong,{children:"Flag ignored"})," - ",(0,t.jsx)(e.code,{children:"@RollbackExecution"})," on failure"]}),(0,t.jsxs)(e.td,{children:[(0,t.jsx)(e.strong,{children:"Flag ignored"})," - ",(0,t.jsx)(e.code,{children:"@RollbackExecution"})," on failure"]})]})]})]}),"\n",(0,t.jsx)(e.h2,{id:"best-practices",children:"Best practices"}),"\n",(0,t.jsx)(e.h3,{id:"always-provide-rollbackexecution",children:"Always provide @RollbackExecution"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:["Transactional systems with ",(0,t.jsx)(e.code,{children:"transactional = true"})]}),": Used for manual rollback operations (CLI undo)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:["Transactional systems with ",(0,t.jsx)(e.code,{children:"transactional = false"})]}),": Called automatically on failure"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Non-transactional systems"}),": Always called automatically on failure (flag ignored)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"All cases"}),": Essential for complete change management"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"use-appropriate-transactionality",children:"Use appropriate transactionality"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:["Keep default ",(0,t.jsx)(e.code,{children:"transactional = true"})]})," for regular data changes on transactional systems"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsxs)(e.strong,{children:["Use ",(0,t.jsx)(e.code,{children:"transactional = false"})]})," only when necessary on transactional systems (DDL, bulk operations)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"For non-transactional systems"}),": The flag doesn't matter - design idempotent operations and robust rollback logic"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Key takeaway"}),": Flamingock's transaction behavior is determined by your target system's capabilities. For transactional systems, the ",(0,t.jsx)(e.code,{children:"transactional"})," flag controls failure handling (native rollback vs @RollbackExecution). For non-transactional systems, the flag is ignored and @RollbackExecution is always used."]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>l});var a=s(6540);const t={},i=a.createContext(t);function r(n){const e=a.useContext(i);return a.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:r(n.components),a.createElement(i.Provider,{value:e},n.children)}}}]);