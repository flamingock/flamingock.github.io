"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[5419],{3542:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"changes/best-practices","title":"Best Practices","description":"Following these proven patterns will help you create reliable, maintainable Changes that work safely in production environments.","source":"@site/docs/changes/best-practices.md","sourceDirName":"changes","slug":"/changes/best-practices","permalink":"/docs/changes/best-practices","draft":false,"unlisted":false,"editUrl":"https://github.com/flamingock/flamingock-java/docs/changes/best-practices.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Best Practices","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Types & Implementation","permalink":"/docs/changes/types-and-implementation"},"next":{"title":"Domain Coupling","permalink":"/docs/changes/domain-coupling"}}');var r=s(4848),i=s(8453);const t={title:"Best Practices",sidebar_position:6},l="Change Best Practices",o={},c=[{value:"Core principles",id:"core-principles",level:2},{value:"Treat Changes as immutable",id:"treat-changes-as-immutable",level:3},{value:"Avoid domain object coupling",id:"avoid-domain-object-coupling",level:3},{value:"Always provide rollback logic",id:"always-provide-rollback-logic",level:3},{value:"Keep scope focused",id:"keep-scope-focused",level:3},{value:"Technical guidelines",id:"technical-guidelines",level:2},{value:"Design for idempotency",id:"design-for-idempotency",level:3},{value:"Handle errors gracefully",id:"handle-errors-gracefully",level:3},{value:"Use meaningful method names",id:"use-meaningful-method-names",level:3},{value:"Naming and organization",id:"naming-and-organization",level:2},{value:"Follow consistent naming patterns",id:"follow-consistent-naming-patterns",level:3},{value:"Use descriptive IDs and descriptions",id:"use-descriptive-ids-and-descriptions",level:3},{value:"Organize by chronological order",id:"organize-by-chronological-order",level:3},{value:"Testing and validation",id:"testing-and-validation",level:2},{value:"Test both execution and rollback",id:"test-both-execution-and-rollback",level:3},{value:"Validate with real-like data",id:"validate-with-real-like-data",level:3},{value:"Next steps",id:"next-steps",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"change-best-practices",children:"Change Best Practices"})}),"\n",(0,r.jsx)(n.p,{children:"Following these proven patterns will help you create reliable, maintainable Changes that work safely in production environments."}),"\n",(0,r.jsx)(n.h2,{id:"core-principles",children:"Core principles"}),"\n",(0,r.jsx)(n.h3,{id:"treat-changes-as-immutable",children:"Treat Changes as immutable"}),"\n",(0,r.jsx)(n.p,{children:"Once a Change is deployed, never modify it. Create new Changes for corrections."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u274c Don't do this:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Modifying an existing Change after deployment\n@Change(id = "add-user-field", author = "team")  // order extracted from filename\npublic class _20250923_01_AddUserField {\n    @Apply\n    public void apply(MongoDatabase db) {\n        // Original: db.getCollection("users").updateMany(/* add field */)\n        // Modified: db.getCollection("users").updateMany(/* different logic */)\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u2705 Do this instead:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Keep the original unchanged\n@Change(id = "add-user-field", author = "team")  // order extracted from filename\npublic class _20250923_01_AddUserField {\n    @Apply\n    public void apply(MongoDatabase db) {\n        // Original logic remains unchanged\n    }\n}\n\n// Create a new Change for corrections\n@Change(id = "fix-user-field-values", author = "team")  // order extracted from filename\npublic class _20250923_02_FixUserFieldValues {\n    @Apply\n    public void apply(MongoDatabase db) {\n        // Correction logic\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"avoid-domain-object-coupling",children:"Avoid domain object coupling"}),"\n",(0,r.jsx)(n.p,{children:"Building on the idea of immutability, another common pitfall is coupling Changes too tightly to domain objects. Changes are historical records that must remain stable over time, even as your application evolves. When Changes depend on domain classes that later change (fields removed, renamed, or restructured), your previously successful Changes can break compilation or execution."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"The issue:"})," If a Change uses a ",(0,r.jsx)(n.code,{children:"Customer"})," domain class and you later remove the ",(0,r.jsx)(n.code,{children:"middleName"})," field from that class, the Change will no longer compile - breaking Flamingock's ability to verify or re-execute historical changes."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u2705 Use generic structures instead:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'// Instead of domain objects, use framework-native structures\n@Apply\npublic void apply(JdbcTemplate jdbc) {\n    Map<String, Object> customer = jdbc.queryForMap(\n        "SELECT * FROM customers WHERE id = ?", customerId\n    );\n    // Work with the Map directly, not a Customer object\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u2192 ",(0,r.jsx)(n.strong,{children:"Learn more:"})," ",(0,r.jsx)(n.a,{href:"/docs/changes/domain-coupling",children:"Domain Coupling and Historical Immutability"})," - Understand why this happens and explore different approaches to keep your Changes stable."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"always-provide-rollback-logic",children:"Always provide rollback logic"}),"\n",(0,r.jsxs)(n.p,{children:["Every Change must have a ",(0,r.jsx)(n.code,{children:"@Rollback"})," method, regardless of target system type."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why rollback matters:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Non-transactional systems"}),": Automatic cleanup on failure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"All systems"}),": CLI/UI undo operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Safety"}),": Proves you understand the change impact"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Governance"}),": Required for audit compliance"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example with comprehensive rollback:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Change(id = "setup-user-indexes", author = "db-team")  // order extracted from filename\npublic class _20250923_01_SetupUserIndexes {\n    \n    @Apply\n    public void apply(MongoDatabase database) {\n        MongoCollection<Document> users = database.getCollection("users");\n        \n        // Create compound index for user queries\n        users.createIndex(\n            new Document("email", 1).append("status", 1),\n            new IndexOptions().name("idx_user_email_status").unique(false)\n        );\n        \n        // Create text index for search\n        users.createIndex(\n            new Document("firstName", "text").append("lastName", "text"),\n            new IndexOptions().name("idx_user_search")\n        );\n    }\n    \n    @Rollback\n    public void rollback(MongoDatabase database) {\n        MongoCollection<Document> users = database.getCollection("users");\n\n        // Drop only if the index exists\n        if (isIndexCreated(users, "idx_user_search")) {\n            users.dropIndex("idx_user_search");\n        }\n\n        if (isIndexCreated(users, "idx_user_email_status")) {\n            users.dropIndex("idx_user_email_status");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"keep-scope-focused",children:"Keep scope focused"}),"\n",(0,r.jsx)(n.p,{children:"Each Change should address one logical change. Avoid combining unrelated operations."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u274c Avoid mixing concerns:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Change(id = "big-refactor", author = "team")  // order extracted from filename\npublic class _20250923_01_BigRefactor {\n    @Apply\n    public void apply(MongoDatabase db, KafkaProducer producer) {\n        // Adding user field\n        db.getCollection("users").updateMany(/* ... */);\n        \n        // Creating Kafka topic  \n        producer.send(/* create topic message */);\n        \n        // Updating configuration\n        db.getCollection("config").updateOne(/* ... */);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u2705 Separate concerns:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")\n@Change(id = "add-user-status", author = "team")  // order extracted from filename\npublic class _20250923_01_AddUserStatus {\n    // Focus: User schema change only\n}\n\n@TargetSystem("kafka-events")\n@Change(id = "create-user-topic", author = "team")  // order extracted from filename\npublic class _20250923_01_CreateUserTopic {\n    // Focus: Kafka topic creation only\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"technical-guidelines",children:"Technical guidelines"}),"\n",(0,r.jsx)(n.h3,{id:"design-for-idempotency",children:"Design for idempotency"}),"\n",(0,r.jsx)(n.p,{children:"Make operations safe to re-run whenever possible."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example: Idempotent field addition:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Change(id = "add-user-preferences", author = "team")  // order extracted from filename\npublic class _20250923_01_AddUserPreferences {\n    \n    @Apply\n    public void apply(MongoDatabase database) {\n        // Only update users that don\'t already have preferences\n        database.getCollection("users").updateMany(\n            new Document("preferences", new Document("$exists", false)),\n            new Document("$set", new Document("preferences", getDefaultPreferences()))\n        );\n    }\n    \n    private Document getDefaultPreferences() {\n        return new Document()\n            .append("theme", "light")\n            .append("notifications", true);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"handle-errors-gracefully",children:"Handle errors gracefully"}),"\n",(0,r.jsx)(n.p,{children:"Don't catch exceptions unless you have specific recovery logic. Let Flamingock handle error management."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u274c Don't suppress errors:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Apply\npublic void apply(MongoDatabase database) {\n    try {\n        // Some operation\n        database.getCollection("users").updateMany(/* ... */);\n    } catch (Exception e) {\n        // Silently ignoring errors prevents proper error handling\n        System.out.println("Error occurred: " + e.getMessage());\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"\u2705 Let exceptions bubble up:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Apply\npublic void apply(MongoDatabase database) {\n    // Let Flamingock handle exceptions and recovery\n    database.getCollection("users").updateMany(/* ... */);\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"use-meaningful-method-names",children:"Use meaningful method names"}),"\n",(0,r.jsx)(n.p,{children:"Method names should clearly indicate their purpose."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Good examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Apply\npublic void migrateUserProfilesToNewSchema(MongoDatabase db) { }\n\n@Apply  \npublic void addEmailIndexForFasterLookups(MongoDatabase db) { }\n\n@Rollback\npublic void removeEmailIndexAndRevertSchema(MongoDatabase db) { }\n"})}),"\n",(0,r.jsx)(n.h2,{id:"naming-and-organization",children:"Naming and organization"}),"\n",(0,r.jsx)(n.h3,{id:"follow-consistent-naming-patterns",children:"Follow consistent naming patterns"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"File names:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"_ORDER_DescriptiveName"})," format where ORDER is extracted between first and last underscores"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recommended format"}),": ",(0,r.jsx)(n.code,{children:"YYYYMMDD_NN"})," where:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"YYYY = year, MM = month, DD = day"}),"\n",(0,r.jsx)(n.li,{children:"NN = sequence number (01-99) for changes on the same day"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["When using this naming pattern, the order in ",(0,r.jsx)(n.code,{children:"@Change"})," annotation or YAML is optional"]}),"\n",(0,r.jsx)(n.li,{children:"Use PascalCase for class names"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Good examples:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"_20250923_01_CreateUserIndexes.java\n_20250923_02_MigrateUserData.java\n_20250924_01_AddUserPreferences.java\n_20250925_01_OptimizeUserQueries.java\n_20250930_01_MigrateToNewFormat.yaml\n"})}),"\n",(0,r.jsxs)(n.admonition,{title:"Recommendation",type:"tip",children:[(0,r.jsxs)(n.p,{children:["We recommend specifying the order in the file/class name using the ",(0,r.jsx)(n.code,{children:"YYYYMMDD_NN"})," format:"]}),(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Benefits:"})}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Natural chronological sorting"})," - Files automatically sort by date in folders"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clear timeline visibility"})," - Instantly see when changes were created"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Practical daily limit"})," - 99 changes per day is more than sufficient"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Easy identification"})," - Quick visual scan shows change history"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No annotation needed"})," - Order is extracted from filename"]}),"\n"]}),(0,r.jsx)(n.p,{children:"Examples:"}),(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_20250923_01_CreateUserTable.java"}),' \u2192 order: "20250923_01" (no need for order in @Change)']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_20250923_02_MigrateData.yaml"}),' \u2192 order: "20250923_02" (no need for order in YAML)']}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"_20250924_01_AddIndexes.java"}),' \u2192 order: "20250924_01"']}),"\n"]})]}),"\n",(0,r.jsxs)(n.p,{children:["For detailed rules about order and file naming, see ",(0,r.jsx)(n.a,{href:"./anatomy-and-structure#file-name-and-order",children:"Anatomy & Structure - File name and order"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"use-descriptive-ids-and-descriptions",children:"Use descriptive IDs and descriptions"}),"\n",(0,r.jsx)(n.p,{children:"Make your Changes self-documenting:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Change(\n    id = "migrate-legacy-user-format-to-v2",\n    order = "20250923_01",\n    author = "data-migration-team",\n    description = "Migrate user documents from legacy format to v2 schema with new preference structure"\n)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"organize-by-chronological-order",children:"Organize by chronological order"}),"\n",(0,r.jsx)(n.p,{children:"Changes should be organized chronologically by their order within stages. If you need logical grouping, use stages - but remember that execution order is only guaranteed within a stage, not between stages."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"src/main/java/com/company/changes/\n\u251c\u2500\u2500 _20250923_01_CreateUserCollection.java\n\u251c\u2500\u2500 _20250923_02_AddUserIndexes.java\n\u251c\u2500\u2500 _20250924_01_MigrateUserData.java\n\u251c\u2500\u2500 _20250924_02_CreateOrdersTable.java\n\u2514\u2500\u2500 _20250925_01_AddOrderStatusColumn.java\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-and-validation",children:"Testing and validation"}),"\n",(0,r.jsx)(n.h3,{id:"test-both-execution-and-rollback",children:"Test both execution and rollback"}),"\n",(0,r.jsx)(n.p,{children:"Create comprehensive tests for your Changes:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Test\npublic void testUserMigrationChange() {\n    // Arrange\n    MongoDatabase testDb = getTestDatabase();\n    insertTestUsers(testDb);\n    \n    var change = new _20250923_01_MigrateUsers();\n    \n    // Act - Test execution\n    change.execute(testDb);\n    \n    // Assert - Verify execution results\n    MongoCollection<Document> users = testDb.getCollection("users");\n    assertEquals(5, users.countDocuments(new Document("status", "active")));\n    \n    // Act - Test rollback  \n    change.rollback(testDb);\n    \n    // Assert - Verify rollback results\n    assertEquals(0, users.countDocuments(new Document("status", new Document("$exists", true))));\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"validate-with-real-like-data",children:"Validate with real-like data"}),"\n",(0,r.jsx)(n.p,{children:"Test with data that resembles production:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Test\npublic void testWithRealisticData() {\n    // Use realistic data volumes and edge cases\n    insertUsers(1000);  // Test batch processing\n    insertUsersWithMissingFields(); // Test data inconsistencies\n    insertUsersWithEdgeCaseValues(); // Test boundary conditions\n    \n    // Run your Change\n    change.execute(database);\n    \n    // Verify all scenarios handled correctly\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../templates/templates-introduction",children:"Templates"})})," - Explore reusable change patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../target-systems/introduction",children:"Target Systems"})})," - Configure where changes are applied"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"../testing/introduction",children:"Testing"})})," - Comprehensive testing strategies for Changes"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var a=s(6540);const r={},i=a.createContext(r);function t(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);