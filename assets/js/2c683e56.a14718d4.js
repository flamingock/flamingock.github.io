"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[3977],{30:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"getting-started/how-it-works","title":"How it works?","description":"Flamingock provides a structured, auditable, and version-controlled approach to managing changes across your systems, services, and configurations \u2014 simplifying the release process and reducing the risk of failure.","source":"@site/docs/getting-started/how-it-works.md","sourceDirName":"getting-started","slug":"/getting-started/how-it-works","permalink":"/docs/1.0.0/getting-started/how-it-works","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/getting-started/how-it-works.md","tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"sidebar_position":30},"sidebar":"tutorialSidebar","previous":{"title":"Get started","permalink":"/docs/1.0.0/getting-started/get-started"},"next":{"title":"Introduction to Flamingock","permalink":"/docs/1.0.0/overview/Introduction"}}');var a=i(4848),t=i(8453);const r={sidebar_position:30},o="How it works?",l={},c=[{value:"1. Define your changes as ChangeUnits",id:"1-define-your-changes-as-changeunits",level:2},{value:"2. Organize changes into Workflows",id:"2-organize-changes-into-workflows",level:2},{value:"3. Execute at startup (or on demand)",id:"3-execute-at-startup-or-on-demand",level:2},{value:"4. Locking for safety in distributed environments",id:"4-locking-for-safety-in-distributed-environments",level:2},{value:"5. Audit everything, rollback when needed",id:"5-audit-everything-rollback-when-needed",level:2},{value:"Example Use Cases",id:"example-use-cases",level:2},{value:"Example 1: Versioning made simple",id:"example-1-versioning-made-simple",level:3},{value:"Example 2: Synchronizing Changes across domain services",id:"example-2-synchronizing-changes-across-domain-services",level:3}];function d(e){const n={a:"a",admonition:"admonition",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"how-it-works",children:"How it works?"})}),"\n",(0,a.jsx)(n.p,{children:"Flamingock provides a structured, auditable, and version-controlled approach to managing changes across your systems, services, and configurations \u2014 simplifying the release process and reducing the risk of failure."}),"\n",(0,a.jsx)(n.p,{children:"At a high level, here\u2019s how Flamingock works:"}),"\n",(0,a.jsx)(n.mermaid,{value:"flowchart LR\n    A[1: Define Changes as ChangeUnits] --\x3e B[2: Organize into Workflows]\n    B --\x3e C[3: Execute at Startup or On Demand]\n    C --\x3e D[4: Acquire Distributed Lock]\n    D --\x3e E[5: Apply ChangeUnits Sequentially]\n    E --\x3e F[6: Audit Changes]\n    F --\x3e G{Success?}\n    G -- Yes --\x3e H[Finish Deployment]\n    G -- No --\x3e I[Invoke Rollback Logic]\n    I --\x3e H"}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.mdxAdmonitionTitle,{children:["Flamingock helps development teams ",(0,a.jsx)(n.strong,{children:"release faster"}),", ",(0,a.jsx)(n.strong,{children:"with confidence"}),", and ",(0,a.jsx)(n.strong,{children:"without surprises"}),". It provides an auditable traceable system where all Changes are centrally managed."]})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"1-define-your-changes-as-changeunits",children:"1. Define your changes as ChangeUnits"}),"\n",(0,a.jsxs)(n.p,{children:["Every change \u2014 whether it\u2019s a database migration, a feature flag update, or a third-party API configuration \u2014 is encapsulated into a ",(0,a.jsx)(n.strong,{children:"ChangeUnit"}),"."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Each ChangeUnit is uniquely identified, versioned, and optionally includes rollback logic."}),"\n",(0,a.jsxs)(n.li,{children:["Changes can be defined in code (Java/Kotlin) or declaratively (YAML/JSON) via reusable templates ",(0,a.jsx)(n.a,{href:"/docs/1.0.0/templates/templates-introduction",children:(0,a.jsx)(n.strong,{children:"templates"})}),"."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"2-organize-changes-into-workflows",children:"2. Organize changes into Workflows"}),"\n",(0,a.jsxs)(n.p,{children:["ChangeUnits are grouped into stages and structured into a ",(0,a.jsx)(n.a,{href:"/docs/1.0.0/overview/core-concepts?#-workflows",children:(0,a.jsx)(n.strong,{children:"Workflow"})})," pipeline to represent a coordinated sequence of changes."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Workflows allow you to define how changes should be applied: sequentially or (in future releases) in parallel or conditionally."}),"\n",(0,a.jsx)(n.li,{children:"This logical grouping simplifies the orchestration and order of changes across systems / services / components."}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"3-execute-at-startup-or-on-demand",children:"3. Execute at startup (or on demand)"}),"\n",(0,a.jsx)(n.p,{children:"When your application starts, Flamingock automatically:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Scans for pending ChangeUnits"}),"\n",(0,a.jsx)(n.li,{children:"Applies them in the defined workflow order"}),"\n",(0,a.jsxs)(n.li,{children:["Ensures ",(0,a.jsx)(n.strong,{children:"idempotency"})," so the same changes aren't applied twice"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Flamingock can also run in standalone mode, ideal for setups that don't use an underlying framework (ie. Spring)."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"4-locking-for-safety-in-distributed-environments",children:"4. Locking for safety in distributed environments"}),"\n",(0,a.jsxs)(n.p,{children:["Using ",(0,a.jsx)(n.strong,{children:"distributed locking"}),", Flamingock ensures only one instance (or one node) applies changes at a time \u2014 preventing race conditions or duplicate executions."]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Works across microservices and distributed system setups"}),"\n",(0,a.jsxs)(n.li,{children:["Supports multiple store types:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Flamingock Community Edition, with native driver compatibility with MongoDB, Couchbase, DynamoDB"}),"\n",(0,a.jsx)(n.li,{children:"Flamingock SaaS or Flamingock self-hosted options to leverage Flamingock's provisioned storage."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"5-audit-everything-rollback-when-needed",children:"5. Audit everything, rollback when needed"}),"\n",(0,a.jsxs)(n.p,{children:["Every change applied is ",(0,a.jsx)(n.strong,{children:"fully audited"}),":"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"When, by whom, and what was changed"}),"\n",(0,a.jsx)(n.li,{children:"Status of execution (success/failure)"}),"\n",(0,a.jsx)(n.li,{children:"And a provisioned optional rollback strategy for non-transactional integrations."}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"In case of failure or rollback scenario, Flamingock uses defined compensating logic to revert changes and restore consistency."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"example-use-cases",children:"Example Use Cases"}),"\n",(0,a.jsx)(n.h3,{id:"example-1-versioning-made-simple",children:"Example 1: Versioning made simple"}),"\n",(0,a.jsx)(n.p,{children:"Imagine a developer needs to introduce the following system changes as part of a release:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Add a new field to the user collection in MongoDB"}),"\n",(0,a.jsx)(n.li,{children:"Enable a feature flag in a SaaS dashboard via REST API"}),"\n",(0,a.jsx)(n.li,{children:"Update an environment variable in a remote configuration store"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Example 1",src:i(6192).A+"",width:"751",height:"585"})}),"\n",(0,a.jsx)(n.p,{children:"Here\u2019s how Flamingock helps:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The developer defines each change as an individual ",(0,a.jsx)(n.strong,{children:"ChangeUnit"}),", with rollback logic included."]}),"\n",(0,a.jsxs)(n.li,{children:["These ChangeUnits are grouped into stages and a embedded into a ",(0,a.jsx)(n.strong,{children:"workflow"}),", ensuring they run in the correct order."]}),"\n",(0,a.jsxs)(n.li,{children:["On the next application startup, Flamingock:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Detects that these changes haven\u2019t been applied yet"}),"\n",(0,a.jsx)(n.li,{children:"Acquires a distributed lock"}),"\n",(0,a.jsx)(n.li,{children:"Executes all ChangeUnits safely and atomically"}),"\n",(0,a.jsx)(n.li,{children:"Logs every detail in the audit system"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Flamingock rolls back automatically in case of failure(if defined), ensuring the system doesn\u2019t end up in a partial state."}),"\n",(0,a.jsx)(n.p,{children:"The result? Faster deployments, consistent environments, and complete traceability."}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h3,{id:"example-2-synchronizing-changes-across-domain-services",children:"Example 2: Synchronizing Changes across domain services"}),"\n",(0,a.jsx)(n.p,{children:"In a Domain-Driven Design (DDD) environment, a change to a domain model often requires updates across several components:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Update to the Database and API specification (e.g., OpenAPI/Swagger)"}),"\n",(0,a.jsx)(n.li,{children:"Modify the Kafka event schema and topic configuration"}),"\n",(0,a.jsx)(n.li,{children:"Adjust the API Gateway routing and validation rules"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Example 2",src:i(1227).A+"",width:"751",height:"585"})}),"\n",(0,a.jsx)(n.p,{children:"Here\u2019s how Flamingock makes this seamless:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["The team creates ",(0,a.jsx)(n.strong,{children:"ChangeUnits"})," for:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Updating the Database and  API specification"}),"\n",(0,a.jsx)(n.li,{children:"Reconfiguring Kafka topics and event schema"}),"\n",(0,a.jsx)(n.li,{children:"Updating API Gateway specs"}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["All related ",(0,a.jsx)(n.em,{children:"ChangeUnits"})," are grouped into a single ",(0,a.jsx)(n.strong,{children:"workflow"})," to ensure coordinated application."]}),"\n",(0,a.jsxs)(n.li,{children:["During deployment, Flamingock:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Applies all changes atomically, respecting dependencies"}),"\n",(0,a.jsx)(n.li,{children:"Acquires a distributed lock to avoid concurrent modifications"}),"\n",(0,a.jsx)(n.li,{children:"Audits the entire process for traceability and compliance"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"This ensures that changes in the Database, messaging, and APIs exposed in the gateway are synchronized, reducing integration errors and deployment friction across microservices."}),"\n",(0,a.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},1227:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Flamingock Example use case 2-199e2bada9d8e0a7608e91166bec9efa.png"},6192:(e,n,i)=>{i.d(n,{A:()=>s});const s=i.p+"assets/images/Flamingock Example use case 1-9d31169eaf08090cbbc2724e38afe9a7.png"},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(6540);const a={},t=s.createContext(a);function r(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);