"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[3078],{1470:(e,n,t)=>{t.d(n,{A:()=>k});var a=t(6540),s=t(4164),r=t(3104),i=t(6347),o=t(205),l=t(7485),c=t(1682),d=t(679);function u(e){return a.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,a.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,a.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:a}})=>({value:e,label:n,attributes:t,default:a}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const t=(0,i.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(s),(0,a.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(t.location.search);n.set(s,e),t.replace({...t.location,search:n.toString()})},[s,t])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:s}=e,r=h(e),[i,l]=(0,a.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:r})),[c,u]=m({queryString:t,groupId:s}),[g,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,s]=(0,d.Dv)(n);return[t,(0,a.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),x=(()=>{const e=c??g;return p({value:e,tabValues:r})?e:null})();(0,o.A)(()=>{x&&l(x)},[x]);return{selectedValue:i,selectValue:(0,a.useCallback)(e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),f(e)},[u,f,r]),tabValues:r}}var f=t(2303);const x={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(4848);function j({className:e,block:n,selectedValue:t,selectValue:a,tabValues:i}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,r.a_)(),c=e=>{const n=e.currentTarget,s=o.indexOf(n),r=i[s].value;r!==t&&(l(n),a(r))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=o.indexOf(e.currentTarget)+1;n=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(e.currentTarget)-1;n=o[t]??o[o.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:i.map(({value:e,label:n,attributes:a})=>(0,b.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{o.push(e)},onKeyDown:d,onClick:c,...a,className:(0,s.A)("tabs__item",x.tabItem,a?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:t}){const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===t);return e?(0,a.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:r.map((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function y(e){const n=g(e);return(0,b.jsxs)("div",{className:(0,s.A)("tabs-container",x.tabList),children:[(0,b.jsx)(j,{...n,...e}),(0,b.jsx)(v,{...n,...e})]})}function k(e){const n=(0,f.A)();return(0,b.jsx)(y,{...e,children:u(e.children)},String(n))}},6412:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>u});const a=JSON.parse('{"id":"templates/templates-how-to-use","title":"How to use Templates","description":"Templates are available in beta.","source":"@site/docs/templates/templates-how-to-use.md","sourceDirName":"templates","slug":"/templates/templates-how-to-use","permalink":"/docs/templates/templates-how-to-use","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/templates/templates-how-to-use.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"How to use Templates"},"sidebar":"tutorialSidebar","previous":{"title":"Templates Introduction","permalink":"/docs/templates/templates-introduction"},"next":{"title":"Create your template","permalink":"/docs/templates/create-your-own-template"}}');var s=t(4848),r=t(8453),i=t(1470),o=t(9365);const l={sidebar_position:2,title:"How to use Templates"},c="How to use Flamingock Templates",d={},u=[{value:"Step 1: Add the Template dependency",id:"step-1-add-the-template-dependency",level:3},{value:"Step 2: define a Template-based change",id:"step-2-define-a-template-based-change",level:3},{value:"\ud83d\udd0d Understanding the configuration attributes",id:"-understanding-the-configuration-attributes",level:4},{value:"Step 3: Configure Flamingock to use the template file",id:"step-3-configure-flamingock-to-use-the-template-file",level:3},{value:"Step 4: Run Flamingock",id:"step-4-run-flamingock",level:3},{value:"Use case: SQL database changes",id:"use-case-sql-database-changes",level:2},{value:"Approach 1: Using a Traditional Code-Based ChangeUnit",id:"approach-1-using-a-traditional-code-based-changeunit",level:3},{value:"Approach 2: Using a Flamingock SQL Template",id:"approach-2-using-a-flamingock-sql-template",level:3},{value:"Key Benefits of Using a Template Instead of Code-Based ChangeUnits:",id:"key-benefits-of-using-a-template-instead-of-code-based-changeunits",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"how-to-use-flamingock-templates",children:"How to use Flamingock Templates"})}),"\n",(0,s.jsxs)(n.admonition,{title:"Beta feature",type:"caution",children:[(0,s.jsxs)(n.p,{children:["Templates are available in ",(0,s.jsx)(n.strong,{children:"beta"}),"."]}),(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You can already create ",(0,s.jsx)(n.strong,{children:"custom templates"})," for your own use cases."]}),"\n",(0,s.jsxs)(n.li,{children:["Flamingock is actively developing ",(0,s.jsx)(n.strong,{children:"official templates"})," for key technologies (Kafka, SQL, MongoDB, S3, Redis, etc.) that are currently in development and not yet production-ready."]}),"\n",(0,s.jsx)(n.li,{children:"Expect API and behavior changes before GA."}),"\n"]}),(0,s.jsxs)(n.p,{children:["This feature is a ",(0,s.jsx)(n.strong,{children:"sneak peek of Flamingock's future"}),": a low-code, reusable ecosystem on top of ChangeUnits."]})]}),"\n",(0,s.jsxs)(n.p,{children:["Using a Flamingock Template is straightforward. Here's an example of how you can apply an SQL-based change using the ",(0,s.jsx)(n.strong,{children:"SQL Template"}),"."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["This example uses the ",(0,s.jsx)(n.strong,{children:"SQL Template"}),", which is experimental. It is intended for testing and feedback, not yet production use."]})}),"\n",(0,s.jsx)(n.h3,{id:"step-1-add-the-template-dependency",children:"Step 1: Add the Template dependency"}),"\n",(0,s.jsxs)(n.p,{children:["Ensure your ",(0,s.jsx)(n.strong,{children:"Flamingock Template"})," dependency is included in your project. Example of using ",(0,s.jsx)(n.code,{children:"sql-template"}),":"]}),"\n",(0,s.jsxs)(i.A,{groupId:"gradle_maven",children:[(0,s.jsx)(o.A,{value:"gradle",label:"Gradle",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-kotlin",children:'implementation(platform("io.flamingock:flamingock-community-bom:$flamingockVersion"))\nimplementation("io.flamingock:flamingock-community-sql-template")\n'})})}),(0,s.jsx)(o.A,{value:"maven",label:"Maven",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:"<dependency>\n    <groupId>io.flamingock</groupId>\n    <artifactId>flamingock-community-sql-template</artifactId>\n</dependency>\n"})})})]}),"\n",(0,s.jsx)(n.h3,{id:"step-2-define-a-template-based-change",children:"Step 2: define a Template-based change"}),"\n",(0,s.jsxs)(n.p,{children:["In Flamingock, a ",(0,s.jsx)(n.strong,{children:"ChangeUnit"})," represents a single unit of work that needs to be applied to your system \u2014 for example, creating a table, updating a configuration, or setting up a cloud resource."]}),"\n",(0,s.jsxs)(n.p,{children:["When using template-based changes, instead of implementing a code-based file to define the logic of the change, you describe the change in a declarative format (e.g., ",(0,s.jsx)(n.strong,{children:"YAML"})," file). The structure you use will depend on the template you\u2019re leveraging."]}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.strong,{children:"YAML file"})," (e.g., ",(0,s.jsx)(n.code,{children:"_0001_create_persons_table.yaml"}),") inside your application\u2019s resources directory:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: create-persons-table-from-template\norder: 1\ntargetSystem: "database-system"\ntemplateName: sql-template\nexecution: |\n  CREATE TABLE Persons (\n    PersonID int,\n    LastName varchar(255),\n    FirstName varchar(255),\n    Address varchar(255),\n    City varchar(255)\n  )\nrollback: "DROP TABLE Persons;"\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsxs)(n.p,{children:["Note that your application must provide a ",(0,s.jsx)(n.code,{children:"java.sql.Connection"})," instance as a dependency to Flamingock."]})}),"\n",(0,s.jsx)(n.h4,{id:"-understanding-the-configuration-attributes",children:"\ud83d\udd0d Understanding the configuration attributes"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"id"})}),": Unique identifier for the change, used for tracking (same as in code-based changes)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"order"})}),": Execution order relative to other changes (also shared with code-based)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"targetSystem"})}),": Specifies which target system this change applies to - ",(0,s.jsx)(n.strong,{children:"required"})," for all template-based changes, just like code-based ChangeUnits."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"templateName"})}),": Indicates which template should be used to handle the change logic. This is ",(0,s.jsx)(n.strong,{children:"required"})," for all template-based changes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"execution"})}),": Direct execution logic for the change. The format depends on the template type (string for SQL, map for MongoDB, etc.)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"rollback"})}),": Direct rollback logic for the change. The format depends on the template type (string for SQL, map for MongoDB, etc.)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Other fields"}),": Templates may define additional configuration fields as needed."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Template-based changes provide both ",(0,s.jsx)(n.strong,{children:"structure and flexibility"}),". They share the core concepts of change tracking with code-based ChangeUnits, but use a standardized format with ",(0,s.jsx)(n.code,{children:"execution"})," and ",(0,s.jsx)(n.code,{children:"rollback"})," sections that each template interprets according to its specific requirements."]}),"\n",(0,s.jsx)(n.h3,{id:"step-3-configure-flamingock-to-use-the-template-file",children:"Step 3: Configure Flamingock to use the template file"}),"\n",(0,s.jsxs)(n.p,{children:["To configure Flamingock to use the YAML template file, you need to define a stage that includes the path to the template file using the ",(0,s.jsx)(n.code,{children:"@EnableFlamingock"})," annotation:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@EnableFlamingock(\n    stages = {\n        @Stage(location = "src/main/resources/templates")\n    }\n)\npublic class MainApplication {\n    // Configuration class\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If you prefer to use a pipeline YAML file for configuration, refer to the ",(0,s.jsx)(n.a,{href:"/docs/flamingock-library-config/setup-and-stages",children:"Setup & Stages guide"})," for more details."]}),"\n",(0,s.jsx)(n.h3,{id:"step-4-run-flamingock",children:"Step 4: Run Flamingock"}),"\n",(0,s.jsx)(n.p,{children:"At application startup, Flamingock will automatically detect the YAML file and process it as a standard change, following the same execution flow as code-based changes."}),"\n",(0,s.jsx)(n.h2,{id:"use-case-sql-database-changes",children:"Use case: SQL database changes"}),"\n",(0,s.jsxs)(n.p,{children:["Let's compare how an SQL change is handled using a ",(0,s.jsx)(n.strong,{children:"template-based ChangeUnit"})," vs. a ",(0,s.jsx)(n.strong,{children:"traditional code-based ChangeUnit"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"approach-1-using-a-traditional-code-based-changeunit",children:"Approach 1: Using a Traditional Code-Based ChangeUnit"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@ChangeUnit(id = "create-persons-table", order = 1, author = "developer")\npublic class CreatePersonsTableChangeUnit {\n\n    private final DataSource dataSource;\n\n    public CreatePersonsTableChangeUnit(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n\n    @Execution\n    public void execute() throws SQLException {\n        try (Connection connection = dataSource.getConnection();\n             Statement statement = connection.createStatement()) {\n\n            statement.executeUpdate("""\n                CREATE TABLE Persons (\n                    PersonID int PRIMARY KEY,\n                    LastName varchar(255),\n                    FirstName varchar(255),\n                    Address varchar(255),\n                    City varchar(255)\n                )\n            """);\n        }\n    }\n}\n\n'})}),"\n",(0,s.jsx)(n.h3,{id:"approach-2-using-a-flamingock-sql-template",children:"Approach 2: Using a Flamingock SQL Template"}),"\n",(0,s.jsxs)(n.p,{children:["With the ",(0,s.jsx)(n.strong,{children:"SQL Template"}),", users define the same change in ",(0,s.jsx)(n.strong,{children:"YAML"})," instead of Java:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'id: create-persons-table-from-template\norder: 1\ntargetSystem: "database-system"\ntemplateName: sql-template\nexecution: |\n    CREATE TABLE Persons (\n        PersonID int,\n        LastName varchar(255),\n        FirstName varchar(255),\n        Address varchar(255),\n        City varchar(255)\n    )\nrollback: "DROP TABLE Persons;"\n'})}),"\n",(0,s.jsx)(n.h3,{id:"key-benefits-of-using-a-template-instead-of-code-based-changeunits",children:"Key Benefits of Using a Template Instead of Code-Based ChangeUnits:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Less code maintenance"}),": No need to write Java classes, inject DataSource, manage connections, or handle SQL execution manually."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Faster onboarding"}),": YAML is easier for non-Java developers."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Standardised changes"}),": Ensures best practices and avoids custom implementation errors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improved readability"}),": Easier to review and version control."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var a=t(6540);const s={},r=a.createContext(s);function i(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(r.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var a=t(4164);const s={tabItem:"tabItem_Ymn6"};var r=t(4848);function i({children:e,hidden:n,className:t}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,a.A)(s.tabItem,t),hidden:n,children:e})}}}]);