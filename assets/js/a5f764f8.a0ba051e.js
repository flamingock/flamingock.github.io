"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[5924],{821:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"flamingock-library-config/audit-store-configuration","title":"Audit Store Configuration","description":"How to configure Flamingock\'s audit store for tracking and compliance","source":"@site/docs/flamingock-library-config/audit-store-configuration.md","sourceDirName":"flamingock-library-config","slug":"/flamingock-library-config/audit-store-configuration","permalink":"/docs/flamingock-library-config/audit-store-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/flamingock-library-config/audit-store-configuration.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Audit Store Configuration","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"Target System Configuration","permalink":"/docs/flamingock-library-config/target-system-configuration"},"next":{"title":"Distributed lock configuration","permalink":"/docs/flamingock-library-config/lock-configuration"}}');var o=i(4848),a=i(8453);const s={title:"Audit Store Configuration",sidebar_position:5},r="Audit Store Configuration",c={},l=[{value:"Audit Store Fundamentals",id:"audit-store-fundamentals",level:2},{value:"What the Audit Store Tracks",id:"what-the-audit-store-tracks",level:3},{value:"Audit Store vs Target Systems",id:"audit-store-vs-target-systems",level:3},{value:"Community Edition Audit Store Options",id:"community-edition-audit-store-options",level:2},{value:"MongoDB Audit Store",id:"mongodb-audit-store",level:3},{value:"Basic Configuration",id:"basic-configuration",level:4},{value:"Advanced MongoDB Configuration",id:"advanced-mongodb-configuration",level:4},{value:"MongoDB Collections Structure",id:"mongodb-collections-structure",level:4},{value:"DynamoDB Audit Store",id:"dynamodb-audit-store",level:3},{value:"Basic DynamoDB Configuration",id:"basic-dynamodb-configuration",level:4},{value:"DynamoDB Tables Structure",id:"dynamodb-tables-structure",level:4},{value:"Couchbase Audit Store",id:"couchbase-audit-store",level:3},{value:"Basic Couchbase Configuration",id:"basic-couchbase-configuration",level:4},{value:"Audit Store Configuration Options",id:"audit-store-configuration-options",level:2},{value:"Write Concern and Durability",id:"write-concern-and-durability",level:3},{value:"Collection/Table Naming",id:"collectiontable-naming",level:3},{value:"Index Optimization",id:"index-optimization",level:3},{value:"Separation Patterns",id:"separation-patterns",level:2},{value:"Pattern 1: Same Database as Target System",id:"pattern-1-same-database-as-target-system",level:3},{value:"Pattern 2: Dedicated Audit Database",id:"pattern-2-dedicated-audit-database",level:3},{value:"Pattern 3: Cloud Edition",id:"pattern-3-cloud-edition",level:3},{value:"Security and Access Control",id:"security-and-access-control",level:2},{value:"Audit Store Security",id:"audit-store-security",level:3},{value:"Role-Based Access",id:"role-based-access",level:3},{value:"Network Security",id:"network-security",level:3},{value:"Performance and Scaling",id:"performance-and-scaling",level:2},{value:"Connection Pooling",id:"connection-pooling",level:3},{value:"Write Performance Optimization",id:"write-performance-optimization",level:3},{value:"Monitoring and Metrics",id:"monitoring-and-metrics",level:3},{value:"Backup and Recovery",id:"backup-and-recovery",level:2},{value:"Audit Store Backup Strategy",id:"audit-store-backup-strategy",level:3},{value:"Disaster Recovery",id:"disaster-recovery",level:3},{value:"Troubleshooting Audit Store Issues",id:"troubleshooting-audit-store-issues",level:2},{value:"Common Configuration Problems",id:"common-configuration-problems",level:3},{value:"Connection Issues",id:"connection-issues",level:4},{value:"Permission Errors",id:"permission-errors",level:4},{value:"Index Creation Failures",id:"index-creation-failures",level:4},{value:"Diagnostic Commands",id:"diagnostic-commands",level:3},{value:"Health Checks",id:"health-checks",level:3}];function d(n){const e={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"audit-store-configuration",children:"Audit Store Configuration"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.em,{children:"How to configure Flamingock's audit store for tracking and compliance"})}),"\n",(0,o.jsx)(e.p,{children:"The audit store is Flamingock's dedicated system for tracking execution history, managing distributed locking, and ensuring compliance. This guide covers configuration options for different audit store implementations."}),"\n",(0,o.jsxs)(e.blockquote,{children:["\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Conceptual Overview"}),": For architectural understanding of audit store vs target systems, see ",(0,o.jsx)(e.a,{href:"/docs/overview/audit-store-vs-target-system",children:"Target Systems vs Audit Store Architecture"}),"."]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"audit-store-fundamentals",children:"Audit Store Fundamentals"}),"\n",(0,o.jsx)(e.h3,{id:"what-the-audit-store-tracks",children:"What the Audit Store Tracks"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Execution History"}),": Which ChangeUnits ran, when, and with what outcome"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Distributed Locking"}),": Prevents concurrent executions across multiple instances"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Issue Tracking"}),": Failed or uncertain executions requiring resolution"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Metadata"}),": Authors, environments, execution context"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"audit-store-vs-target-systems",children:"Audit Store vs Target Systems"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Audit Store"}),": Managed automatically by Flamingock framework (never modified by your code)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Target Systems"}),": Modified by your business logic in ",(0,o.jsx)(e.code,{children:"@Execution"})," methods"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Independence"}),": Audit integrity maintained even if target systems fail"]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"community-edition-audit-store-options",children:"Community Edition Audit Store Options"}),"\n",(0,o.jsx)(e.h3,{id:"mongodb-audit-store",children:"MongoDB Audit Store"}),"\n",(0,o.jsx)(e.h4,{id:"basic-configuration",children:"Basic Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"@Configuration\npublic class FlamingockConfig {\n    \n    @Bean\n    public Flamingock flamingock(MongoTemplate mongoTemplate) {\n        return Flamingock.builder()\n            .setConnectionRepository(new MongoConnectionRepository(mongoTemplate))\n            .addMigrationClass(MyChangeUnits.class)\n            .build();\n    }\n}\n"})}),"\n",(0,o.jsx)(e.h4,{id:"advanced-mongodb-configuration",children:"Advanced MongoDB Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Configuration\npublic class FlamingockConfig {\n    \n    @Bean\n    public Flamingock flamingock() {\n        // Create dedicated audit store connection\n        MongoClientSettings settings = MongoClientSettings.builder()\n            .applyConnectionString(ConnectionString.create("mongodb://audit-db:27017/flamingock-audit"))\n            .writeConcern(WriteConcern.MAJORITY)  // Ensure audit durability\n            .readConcern(ReadConcern.MAJORITY)    // Consistent audit reads\n            .build();\n        \n        MongoClient auditClient = MongoClients.create(settings);\n        MongoTemplate auditTemplate = new MongoTemplate(auditClient, "flamingock-audit");\n        \n        return Flamingock.builder()\n            .setConnectionRepository(new MongoConnectionRepository(auditTemplate))\n            .addMigrationClass(MyChangeUnits.class)\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"mongodb-collections-structure",children:"MongoDB Collections Structure"}),"\n",(0,o.jsx)(e.p,{children:"Flamingock automatically creates these collections in your audit store:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.code,{children:"changeLog"})}),": Execution history and state tracking"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.code,{children:"locks"})}),": Distributed locking for concurrent safety"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.code,{children:"issues"})}),": Failed executions requiring resolution"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"dynamodb-audit-store",children:"DynamoDB Audit Store"}),"\n",(0,o.jsx)(e.h4,{id:"basic-dynamodb-configuration",children:"Basic DynamoDB Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Configuration\npublic class FlamingockConfig {\n    \n    @Bean\n    public Flamingock flamingock(DynamoDbClient dynamoDbClient) {\n        DynamoConnectionRepository connectionRepository = \n            new DynamoConnectionRepository(dynamoDbClient)\n                .withTablePrefix("flamingock-")  // Optional: prefix for table names\n                .withRegion(Region.US_EAST_1);   // Optional: specify region\n        \n        return Flamingock.builder()\n            .setConnectionRepository(connectionRepository)\n            .addMigrationClass(MyChangeUnits.class)\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h4,{id:"dynamodb-tables-structure",children:"DynamoDB Tables Structure"}),"\n",(0,o.jsx)(e.p,{children:"Flamingock automatically creates these tables:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.code,{children:"flamingock-changeLog"})}),": Execution history"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.code,{children:"flamingock-locks"})}),": Distributed locking"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:(0,o.jsx)(e.code,{children:"flamingock-issues"})}),": Issue tracking"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"couchbase-audit-store",children:"Couchbase Audit Store"}),"\n",(0,o.jsx)(e.h4,{id:"basic-couchbase-configuration",children:"Basic Couchbase Configuration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Configuration  \npublic class FlamingockConfig {\n    \n    @Bean\n    public Flamingock flamingock() {\n        Cluster cluster = Cluster.connect("localhost", "username", "password");\n        Bucket bucket = cluster.bucket("flamingock-audit");\n        \n        CouchbaseConnectionRepository connectionRepository = \n            new CouchbaseConnectionRepository(bucket)\n                .withScope("audit-scope")        // Optional: custom scope\n                .withCollection("change-log");   // Optional: custom collection\n        \n        return Flamingock.builder()\n            .setConnectionRepository(connectionRepository)\n            .addMigrationClass(MyChangeUnits.class)\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"audit-store-configuration-options",children:"Audit Store Configuration Options"}),"\n",(0,o.jsx)(e.h3,{id:"write-concern-and-durability",children:"Write Concern and Durability"}),"\n",(0,o.jsx)(e.p,{children:"Critical for audit integrity - ensure changes are durably persisted:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// MongoDB with strong consistency\nMongoClientSettings settings = MongoClientSettings.builder()\n    .writeConcern(WriteConcern.MAJORITY)     // Wait for majority acknowledgment\n    .readConcern(ReadConcern.MAJORITY)       // Read from majority\n    .readPreference(ReadPreference.primary()) // Always read from primary\n    .build();\n\n// DynamoDB with consistent reads\nDynamoConnectionRepository connectionRepository = \n    new DynamoConnectionRepository(dynamoDbClient)\n        .withConsistentRead(true)            // Enable strong consistency\n        .withWriteCapacity(25)               // Provision appropriate capacity\n        .withReadCapacity(25);\n"})}),"\n",(0,o.jsx)(e.h3,{id:"collectiontable-naming",children:"Collection/Table Naming"}),"\n",(0,o.jsx)(e.p,{children:"Customize audit store object names:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// MongoDB custom collection names\nMongoConnectionRepository connectionRepository = \n    new MongoConnectionRepository(mongoTemplate)\n        .withChangeLogCollectionName("execution_history")\n        .withLockCollectionName("distributed_locks")\n        .withIssuesCollectionName("failed_executions");\n\n// DynamoDB custom table names  \nDynamoConnectionRepository connectionRepository = \n    new DynamoConnectionRepository(dynamoDbClient)\n        .withChangeLogTableName("ExecutionHistory")\n        .withLockTableName("DistributedLocks")\n        .withIssuesTableName("FailedExecutions");\n'})}),"\n",(0,o.jsx)(e.h3,{id:"index-optimization",children:"Index Optimization"}),"\n",(0,o.jsx)(e.p,{children:"Flamingock automatically creates necessary indexes, but you can optimize:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// MongoDB: Additional indexes for query performance\ndb.changeLog.createIndex({ "targetSystem": 1, "executionDate": -1 })\ndb.changeLog.createIndex({ "author": 1, "status": 1 })\ndb.issues.createIndex({ "createdAt": -1, "status": 1 })\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"separation-patterns",children:"Separation Patterns"}),"\n",(0,o.jsx)(e.h3,{id:"pattern-1-same-database-as-target-system",children:"Pattern 1: Same Database as Target System"}),"\n",(0,o.jsx)(e.p,{children:"Simplest setup - audit and business data in same database:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Configuration\npublic class FlamingockConfig {\n    \n    @Bean\n    public Flamingock flamingock(@Qualifier("businessDatabase") MongoTemplate mongoTemplate) {\n        // Both audit store and target system use same database\n        // Benefits: Single database to manage, reduced infrastructure complexity\n        // Important: Even with same database, audit and changes use separate transactions\n        // Trade-offs: Mixed concerns, shared resource limits\n        return Flamingock.builder()\n            .setConnectionRepository(new MongoConnectionRepository(mongoTemplate))\n            .addMigrationClass(BusinessChangeUnits.class)\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"pattern-2-dedicated-audit-database",children:"Pattern 2: Dedicated Audit Database"}),"\n",(0,o.jsx)(e.p,{children:"Best practice - separate audit store from business systems:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Configuration\npublic class FlamingockConfig {\n    \n    @Bean\n    public Flamingock flamingock(@Qualifier("auditDatabase") MongoTemplate auditTemplate,\n                                @Qualifier("businessDatabase") MongoTemplate businessTemplate) {\n        // Audit store: dedicated database for compliance and tracking\n        // Target systems: business databases\n        // Benefits: Clear separation, independent scaling, compliance isolation\n        return Flamingock.builder()\n            .setConnectionRepository(new MongoConnectionRepository(auditTemplate))\n            .addDependency("businessDatabase", businessTemplate)\n            .addMigrationClass(BusinessChangeUnits.class)\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.h3,{id:"pattern-3-cloud-edition",children:"Pattern 3: Cloud Edition"}),"\n",(0,o.jsx)(e.p,{children:"Managed audit store with enhanced capabilities:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Configuration\npublic class FlamingockConfig {\n    \n    @Bean\n    public Flamingock flamingock(@Value("${flamingock.cloud.api-key}") String apiKey) {\n        // Audit store: Fully managed Flamingock Cloud backend\n        // Target systems: Your business systems\n        // Benefits: Zero ops, advanced features, enterprise governance\n        return Flamingock.builder()\n            .setConnectionRepository(new CloudConnectionRepository(apiKey))\n            .addMigrationClass(BusinessChangeUnits.class)\n            .build();\n    }\n}\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"security-and-access-control",children:"Security and Access Control"}),"\n",(0,o.jsx)(e.h3,{id:"audit-store-security",children:"Audit Store Security"}),"\n",(0,o.jsx)(e.p,{children:"Protect audit integrity with proper access controls:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'// MongoDB with authentication and SSL\nMongoClientSettings settings = MongoClientSettings.builder()\n    .applyConnectionString(ConnectionString.create(\n        "mongodb://audit-user:secure-password@audit-cluster:27017/flamingock-audit" +\n        "?authSource=admin&ssl=true&replicaSet=audit-rs"))\n    .sslSettings(SslSettings.builder()\n        .enabled(true)\n        .invalidHostNameAllowed(false)\n        .build())\n    .build();\n'})}),"\n",(0,o.jsx)(e.h3,{id:"role-based-access",children:"Role-Based Access"}),"\n",(0,o.jsx)(e.p,{children:"Define appropriate database roles:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// MongoDB: Audit store user with minimal required permissions\ndb.createUser({\n    user: "flamingock-audit",\n    pwd: "secure-password",\n    roles: [\n        {\n            role: "readWrite",\n            db: "flamingock-audit"\n        },\n        {\n            role: "dbAdmin",  // For index creation\n            db: "flamingock-audit"\n        }\n    ]\n});\n'})}),"\n",(0,o.jsx)(e.h3,{id:"network-security",children:"Network Security"}),"\n",(0,o.jsx)(e.p,{children:"Isolate audit store network access:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"# Docker Compose example with network isolation\nservices:\n  audit-database:\n    image: mongo:7\n    networks:\n      - audit-network\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: audit-admin\n      MONGO_INITDB_ROOT_PASSWORD: secure-password\n  \n  app:\n    networks:\n      - audit-network\n      - business-network\n"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"performance-and-scaling",children:"Performance and Scaling"}),"\n",(0,o.jsx)(e.h3,{id:"connection-pooling",children:"Connection Pooling"}),"\n",(0,o.jsx)(e.p,{children:"Optimize audit store connections:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// MongoDB connection pool settings\nMongoClientSettings settings = MongoClientSettings.builder()\n    .applyToConnectionPoolSettings(builder ->\n        builder.maxSize(20)                    // Max connections\n               .minSize(5)                     // Min connections\n               .maxWaitTime(10, TimeUnit.SECONDS)\n               .maxConnectionIdleTime(30, TimeUnit.SECONDS))\n    .build();\n"})}),"\n",(0,o.jsx)(e.h3,{id:"write-performance-optimization",children:"Write Performance Optimization"}),"\n",(0,o.jsx)(e.p,{children:"Balance consistency with performance:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:"// For high-throughput scenarios\nMongoConnectionRepository connectionRepository = \n    new MongoConnectionRepository(mongoTemplate)\n        .withBatchSize(100)              // Batch audit writes\n        .withAsyncWrites(true)           // Non-blocking audit writes\n        .withRetryPolicy(RetryPolicy.exponentialBackoff());\n"})}),"\n",(0,o.jsx)(e.h3,{id:"monitoring-and-metrics",children:"Monitoring and Metrics"}),"\n",(0,o.jsx)(e.p,{children:"Track audit store health:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Component\npublic class AuditStoreMonitoring {\n    \n    @EventListener\n    public void onAuditWrite(AuditWriteEvent event) {\n        // Track audit store performance metrics\n        meterRegistry.timer("flamingock.audit.write.duration")\n                    .record(event.getDuration());\n        \n        if (event.hasFailed()) {\n            meterRegistry.counter("flamingock.audit.write.failures")\n                        .increment();\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"backup-and-recovery",children:"Backup and Recovery"}),"\n",(0,o.jsx)(e.h3,{id:"audit-store-backup-strategy",children:"Audit Store Backup Strategy"}),"\n",(0,o.jsx)(e.p,{children:"Protect your compliance and execution history:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# MongoDB audit store backup script\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\nmongodump --host audit-cluster:27017 \\\n         --db flamingock-audit \\\n         --out /backups/flamingock-audit-$TIMESTAMP \\\n         --gzip\n\n# Retention: Keep 30 days of backups\nfind /backups -name "flamingock-audit-*" -mtime +30 -exec rm -rf {} \\;\n'})}),"\n",(0,o.jsx)(e.h3,{id:"disaster-recovery",children:"Disaster Recovery"}),"\n",(0,o.jsx)(e.p,{children:"Restore audit store from backup:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# Restore audit store from backup\nBACKUP_DATE="20241201_143000"\nmongorestore --host audit-cluster:27017 \\\n            --db flamingock-audit \\\n            --gzip \\\n            /backups/flamingock-audit-$BACKUP_DATE/flamingock-audit\n\n# Verify restoration\nmongo audit-cluster:27017/flamingock-audit --eval "db.changeLog.count()"\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"troubleshooting-audit-store-issues",children:"Troubleshooting Audit Store Issues"}),"\n",(0,o.jsx)(e.h3,{id:"common-configuration-problems",children:"Common Configuration Problems"}),"\n",(0,o.jsx)(e.h4,{id:"connection-issues",children:"Connection Issues"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Error: Unable to connect to audit store\nSolution: Verify connection string, network access, and authentication credentials\n"})}),"\n",(0,o.jsx)(e.h4,{id:"permission-errors",children:"Permission Errors"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Error: Insufficient permissions to create collections/tables\nSolution: Grant necessary database permissions to Flamingock user\n"})}),"\n",(0,o.jsx)(e.h4,{id:"index-creation-failures",children:"Index Creation Failures"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"Error: Failed to create audit store indexes\nSolution: Ensure dbAdmin privileges or create indexes manually\n"})}),"\n",(0,o.jsx)(e.h3,{id:"diagnostic-commands",children:"Diagnostic Commands"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# Verify audit store connectivity\nflamingock test-connection --audit-store\n\n# Check audit store schema\nflamingock audit verify-schema\n\n# Monitor audit store performance\nflamingock audit stats --since "1 hour ago"\n\n# Repair corrupted audit entries (use with caution)\nflamingock audit repair --dry-run\n'})}),"\n",(0,o.jsx)(e.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,o.jsx)(e.p,{children:"Implement audit store health monitoring:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-java",children:'@Component\npublic class AuditStoreHealthIndicator implements HealthIndicator {\n    \n    @Override\n    public Health health() {\n        try {\n            // Test audit store connectivity\n            auditStore.testConnection();\n            \n            // Verify recent write capability\n            auditStore.writeHealthCheck();\n            \n            return Health.up()\n                        .withDetail("audit-store", "Available")\n                        .build();\n        } catch (Exception e) {\n            return Health.down()\n                        .withDetail("audit-store", "Unavailable")\n                        .withException(e)\n                        .build();\n        }\n    }\n}\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsxs)(e.p,{children:[(0,o.jsx)(e.strong,{children:"Key Takeaway"}),": Proper audit store configuration is critical for Flamingock's safety guarantees, compliance capabilities, and operational reliability. Choose the configuration pattern that best matches your architecture and operational requirements."]})]})}function u(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>r});var t=i(6540);const o={},a=t.createContext(o);function s(n){const e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);