"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[2789],{1470:(e,n,t)=>{t.d(n,{A:()=>v});var i=t(6540),a=t(4164),o=t(3104),r=t(6347),s=t(205),l=t(7485),c=t(1682),d=t(679);function u(e){return i.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:t}=e;return(0,i.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:t,default:i}})=>({value:e,label:n,attributes:t,default:i}))}(t);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,t])}function g({value:e,tabValues:n}){return n.some(n=>n.value===e)}function p({queryString:e=!1,groupId:n}){const t=(0,r.W6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(a),(0,i.useCallback)(e=>{if(!a)return;const n=new URLSearchParams(t.location.search);n.set(a,e),t.replace({...t.location,search:n.toString()})},[a,t])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,o=h(e),[r,l]=(0,i.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!g({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const t=n.find(e=>e.default)??n[0];if(!t)throw new Error("Unexpected error: 0 tabValues");return t.value}({defaultValue:n,tabValues:o})),[c,u]=p({queryString:t,groupId:a}),[m,x]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[t,a]=(0,d.Dv)(n);return[t,(0,i.useCallback)(e=>{n&&a.set(e)},[n,a])]}({groupId:a}),f=(()=>{const e=c??m;return g({value:e,tabValues:o})?e:null})();(0,s.A)(()=>{f&&l(f)},[f]);return{selectedValue:r,selectValue:(0,i.useCallback)(e=>{if(!g({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),x(e)},[u,x,o]),tabValues:o}}var x=t(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=t(4848);function k({className:e,block:n,selectedValue:t,selectValue:i,tabValues:r}){const s=[],{blockElementScrollPositionUntilNextRender:l}=(0,o.a_)(),c=e=>{const n=e.currentTarget,a=s.indexOf(n),o=r[a].value;o!==t&&(l(n),i(o))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},e),children:r.map(({value:e,label:n,attributes:i})=>(0,j.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{s.push(e)},onKeyDown:d,onClick:c,...i,className:(0,a.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":t===e}),children:n??e},e))})}function b({lazy:e,children:n,selectedValue:t}){const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=o.find(e=>e.props.value===t);return e?(0,i.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:o.map((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==t}))})}function y(e){const n=m(e);return(0,j.jsxs)("div",{className:(0,a.A)("tabs-container",f.tabList),children:[(0,j.jsx)(k,{...n,...e}),(0,j.jsx)(b,{...n,...e})]})}function v(e){const n=(0,x.A)();return(0,j.jsx)(y,{...e,children:u(e.children)},String(n))}},1886:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>u});const i=JSON.parse('{"id":"resources/upgrade-from-mongock","title":"Upgrade from Mongock","description":"Flamingock is the next evolution of Mongock. Upgrading from Mongock to Flamingock involves two main pillars:","source":"@site/docs/resources/upgrade-from-mongock.md","sourceDirName":"resources","slug":"/resources/upgrade-from-mongock","permalink":"/docs/resources/upgrade-from-mongock","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/resources/upgrade-from-mongock.md","tags":[],"version":"current","sidebarPosition":999,"frontMatter":{"title":"Upgrade from Mongock","sidebar_position":999},"sidebar":"tutorialSidebar","previous":{"title":"FAQ","permalink":"/docs/resources/faq"}}');var a=t(4848),o=t(8453),r=t(1470),s=t(9365);const l={title:"Upgrade from Mongock",sidebar_position:999},c="Upgrade from Mongock to Flamingock",d={},u=[{value:"Upgrade steps (at a glance)",id:"upgrade-steps-at-a-glance",level:2},{value:"Step1: Update artefacts",id:"step1-update-artefacts",level:2},{value:"Step 1: Update ChangeUnit imports",id:"step-1-update-changeunit-imports",level:2},{value:"Step 2: Upgrade application code",id:"step-2-upgrade-application-code",level:2},{value:"Key changes:",id:"key-changes",level:3},{value:"Step 3: Create system stage",id:"step-3-create-system-stage",level:2},{value:"Step 4: Configure setup",id:"step-4-configure-setup",level:2},{value:"Configuration explained:",id:"configuration-explained",level:3},{value:"Run and validate",id:"run-and-validate",level:2},{value:"Running the upgrade",id:"running-the-upgrade",level:3},{value:"Expected output",id:"expected-output",level:3},{value:"Validation checklist",id:"validation-checklist",level:3},{value:"Why upgrade instead of removing or starting fresh?",id:"why-upgrade-instead-of-removing-or-starting-fresh",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"upgrade-from-mongock-to-flamingock",children:"Upgrade from Mongock to Flamingock"})}),"\n",(0,a.jsxs)(n.p,{children:["Flamingock is the next evolution of Mongock. ",(0,a.jsx)(n.strong,{children:"Upgrading"})," from Mongock to Flamingock involves two main pillars:"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Audit-store import"})," \u2013 Flamingock automatically copies Mongock\u2019s ",(0,a.jsx)(n.em,{children:"changeLog"})," collection/table into its own audit store so historical executions are preserved."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Library swap"})," \u2013 Your application stops calling the Mongock API and starts calling Flamingock. Existing ChangeUnits stay in place; only their annotation imports change."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Because the codebase remains the same and ChangeUnits are kept intact, we call this an ",(0,a.jsx)(n.em,{children:"upgrade"}),", not a migration."]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"upgrade-steps-at-a-glance",children:"Upgrade steps (at a glance)"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Update ChangeUnit imports"})," \u2013 Replace Mongock annotations with Flamingock equivalents."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Upgrade application code"})," \u2013 Replace Mongock API usage with the Flamingock builder(or Spring annotation)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Create system stage"})," \u2013 Add a template-based ChangeUnit that imports legacy audit records."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Configure pipeline"})," \u2013 Point Flamingock to your legacy and new ChangeUnit packages."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"That\u2019s it! Once complete, Flamingock runs with your full history intact."}),"\n",(0,a.jsx)(n.h2,{id:"step1-update-artefacts",children:"Step1: Update artefacts"}),"\n",(0,a.jsx)(n.p,{children:"Replace the Mongock artefacts with Flamingock ones."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Mongock"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-groovy",children:'implementation(platform("io.mongock:mongock-bom:5.5.0"))\nimplementation("io.mongock:mongock-standalone")\nimplementation("io.mongock:mongodb-sync-v4-driver")\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Flamingock"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-groovy",children:'implementation(platform("io.flamingock:flamingock-cloud-bom:$flamingockVersion"))\nimplementation("io.flamingock:flamingock-ce-mongodb-sync")\nannotationProcessor("io.flamingock:flamingock-processor:$flamingockVersion")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"step-1-update-changeunit-imports",children:"Step 1: Update ChangeUnit imports"}),"\n",(0,a.jsx)(n.p,{children:"Update these imports in your existing ChangeUnits (keep them in their current packages):"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Mongock import"}),(0,a.jsx)(n.th,{children:"Flamingock import"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"io.mongock.api.annotations.ChangeUnit"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"io.flamingock.api.annotations.ChangeUnit"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"io.mongock.api.annotations.Execution"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"io.flamingock.api.annotations.Execution"})})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"io.mongock.api.annotations.RollbackExecution"})}),(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"io.flamingock.api.annotations.RollbackExecution"})})]})]})]}),"\n",(0,a.jsx)(n.admonition,{title:"Legacy Support",type:"info",children:(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"For existing change units"}),": Keep them ",(0,a.jsx)(n.strong,{children:"exactly as they are"})," in their current packages - only update imports to maintain immutability."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"For new change units"}),": Avoid using ",(0,a.jsx)(n.code,{children:"@BeforeExecution"})," and ",(0,a.jsx)(n.code,{children:"@RollbackBeforeExecution"}),". Instead, use dedicated ",(0,a.jsx)(n.code,{children:"@Execution"})," and ",(0,a.jsx)(n.code,{children:"@RollbackExecution"})," methods for better separation of concerns"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"@BeforeExecution"})," and ",(0,a.jsx)(n.code,{children:"@RollbackBeforeExecution"})," from ",(0,a.jsx)(n.code,{children:"io.mongock.api"})," are supported for backward compatibility"]}),"\n"]})}),"\n",(0,a.jsx)(n.h2,{id:"step-2-upgrade-application-code",children:"Step 2: Upgrade application code"}),"\n",(0,a.jsxs)(r.A,{groupId:"upgrade",children:[(0,a.jsx)(s.A,{value:"flamingock",label:"Flamingock(new)",default:!0,children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"Flamingock.builder()\n    .addDependency(mongoClient)\n    .addDependency(mongoDatabase)\n    .build()\n    .run();\n"})})}),(0,a.jsx)(s.A,{value:"mongock",label:"Mongock(legacy)",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'MongockStandalone.builder()\n    .setDriver(MongoSync4Driver.withDefaultLock(mongoClient, "test"))\n    .addMigrationScanPackage("legacy.mongock.changes")\n    .buildRunner()\n    .execute();\n'})})})]}),"\n",(0,a.jsx)(n.h3,{id:"key-changes",children:"Key changes:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Replace ",(0,a.jsx)(n.code,{children:"MongockStandalone"})," with ",(0,a.jsx)(n.code,{children:"Flamingock.builder()"})]}),"\n",(0,a.jsx)(n.li,{children:"Remove explicit driver setup (Flamingock auto-configures it)"}),"\n",(0,a.jsx)(n.li,{children:"Remove package scanning in favor of pipeline config"}),"\n",(0,a.jsxs)(n.li,{children:["Inject dependencies via ",(0,a.jsx)(n.code,{children:".addDependency()"})]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["For Spring Boot integration, see the ",(0,a.jsx)(n.a,{href:"/docs/frameworks/springboot-integration/introduction",children:"Spring Boot guide"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"step-3-create-system-stage",children:"Step 3: Create system stage"}),"\n",(0,a.jsx)(n.p,{children:"The system stage is a special stage handled by Flamingock for system-level operations. In this upgrade context, you'll create a template-based change unit in the system stage package to handle audit records migration."}),"\n",(0,a.jsxs)(n.p,{children:["Create a YAML file (e.g., ",(0,a.jsx)(n.code,{children:"_0001_upgrade_from_mongock.yaml"}),") with the following structure:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"id: upgrade-from-mongock\norder: 0001\ntemplate: MongoDbImporterChangeTemplate\nconfiguration:\n  origin: mongockChangeLog\n  failOnEmptyOrigin: true\n"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Configuration parameters:"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"id"}),": Choose how you want to identify this change unit"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"order"}),": Should be the first one (0001) as this is typically the first system stage change unit"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"template"}),": Available templates: ",(0,a.jsx)(n.code,{children:"MongoDbImporterChangeTemplate"}),", ",(0,a.jsx)(n.code,{children:"DynamoDbImporterChangeTemplate"}),", ",(0,a.jsx)(n.code,{children:"CouchbaseImporterChangeTemplate"})]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"origin"}),": The collection/table where Mongock's audit log is stored (typically ",(0,a.jsx)(n.code,{children:"mongockChangeLog"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"failOnEmptyOrigin"}),": (Optional) Set to ",(0,a.jsx)(n.code,{children:"false"})," to disable the security check that ensures the origin contains data. By default, Flamingock verifies the origin collection/table has content to prevent importing from the wrong source"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"step-4-configure-setup",children:"Step 4: Configure setup"}),"\n",(0,a.jsxs)(n.p,{children:["Configure Flamingock using the ",(0,a.jsx)(n.code,{children:"@EnableFlamingock"})," annotation. Add this annotation to any class in your application:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'@EnableFlamingock(\n    stages = {\n        @Stage(type = SYSTEM, location = "com.yourapp.flamingock.system"),\n        @Stage(type = LEGACY, location = "com.yourapp.mongock"),\n        @Stage(location = "com.yourapp.flamingock.changes")\n    }\n)\npublic class FlamingockConfig {\n    // Configuration class\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"configuration-explained",children:"Configuration explained:"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Stage types and usage:"})}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"System stage"})," - A special stage for framework-level changeUnits handled by Flamingock itself. In this context, it contains the changeUnit(provided by flamingock team) that copies Mongock\u2019s audit data into Flamingock\u2019s store"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Legacy stage"})," - Designed specifically for the changeUnits that originally came from the legacy tool (here, Mongock). Flamingock treats it as read-only: it runs only the units that never executed under Mongock and skips those already recorded in the imported audit history. Do ",(0,a.jsx)(n.strong,{children:"not"})," add new ChangeUnits to this stage."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Standard stage"})," (default): For new Flamingock-native change units. This is where all your new application changes should be added going forward"]}),"\n"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["For advanced stage configurations and multi-stage scenarios, see the ",(0,a.jsx)(n.a,{href:"../flamingock-library-config/setup-and-stages",children:"setup & stages guide"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"run-and-validate",children:"Run and validate"}),"\n",(0,a.jsx)(n.h3,{id:"running-the-upgrade",children:"Running the upgrade"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-shell",children:"./gradlew run\n"})}),"\n",(0,a.jsx)(n.h3,{id:"expected-output",children:"Expected output"}),"\n",(0,a.jsx)(n.p,{children:"After running Flamingock, you should see output similar to:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Stage: flamingock-system-stage\n\t0001) id: upgrade-from-mongock \n\t\tStarted\t\t\t\t\u2705 - OK\n\t\tExecuted\t\t\t\u2705 - OK\n\t\tAudited[execution]\t        \u2705 - OK\n\t\nStage: Application Changes\n\t0001) id: create-users-collection-with-index \n\t\tStarted\t\t\t\t\u2705 - OK\n\t\tExecuted\t\t\t\u2705 - OK\n\t\tAudited[execution]\t        \u2705 - OK\n\t0002) id: seed-users \n\t\tStarted\t\t\t\t\u2705 - OK\n\t\tExecuted\t\t\t\u2705 - OK\n\t\tAudited[execution]\t        \u2705 - OK\n"})}),"\n",(0,a.jsx)(n.h3,{id:"validation-checklist",children:"Validation checklist"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"\u2705 System stage executes the upgrade changeUnit successfully"}),"\n",(0,a.jsx)(n.li,{children:"\u2705 Already-applied existing changeUnits from Mongock are not reapplied"}),"\n",(0,a.jsx)(n.li,{children:"\u2705 Previously unapplied existing changeUnits from Mongock execute without errors"}),"\n",(0,a.jsx)(n.li,{children:"\u2705 New Flamingock changeUnits execute as expected"}),"\n",(0,a.jsx)(n.li,{children:"\u2705 All audit logs are properly created in Flamingock format"}),"\n",(0,a.jsx)(n.li,{children:"\u2705 Database changes match the expected results"}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsx)(n.h2,{id:"why-upgrade-instead-of-removing-or-starting-fresh",children:"Why upgrade instead of removing or starting fresh?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Preserve your audit trail"})," \u2013 Every historical ChangeUnit and its execution log remains intact for compliance and debugging."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Avoid unintended re-runs"})," \u2013 Flamingock imports Mongock\u2019s history, so previously-executed ChangeUnits are never applied twice."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Keep change-as-code semantics"})," \u2013 The act of migrating the audit store itself is handled as a versioned change, reinforcing the idea that history is part of your application."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Future continuity"})," \u2013 Teams and tools that rely on Mongock\u2019s records can transition seamlessly; dashboards and reports will show an unbroken timeline."]}),"\n"]}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:["Ready to upgrade? See the ",(0,a.jsx)(n.a,{href:"/docs/flamingock-library-config/setup-and-stages",children:"pipeline & stages guide"})," and ",(0,a.jsx)(n.a,{href:"/docs/flamingock-library-config/changeunits-deep-dive",children:"ChangeUnit reference"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Complete example project"}),": ",(0,a.jsx)(n.a,{href:"https://github.com/flamingock/flamingock-examples/tree/master/import-from-mongock",children:"https://github.com/flamingock/flamingock-examples/tree/master/import-from-mongock"})]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(6540);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},9365:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var i=t(4164);const a={tabItem:"tabItem_Ymn6"};var o=t(4848);function r({children:e,hidden:n,className:t}){return(0,o.jsx)("div",{role:"tabpanel",className:(0,i.A)(a.tabItem,t),hidden:n,children:e})}}}]);