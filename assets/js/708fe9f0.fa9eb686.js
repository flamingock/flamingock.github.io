"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[276],{889:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"flamingock-library-config/transactions","title":"Transactions","description":"Smart defaults with expert control for enterprise safety","source":"@site/docs/flamingock-library-config/transactions.md","sourceDirName":"flamingock-library-config","slug":"/flamingock-library-config/transactions","permalink":"/docs/flamingock-library-config/transactions","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/flamingock-library-config/transactions.md","tags":[],"version":"current","sidebarPosition":90,"frontMatter":{"title":"Transactions","sidebar_position":90},"sidebar":"tutorialSidebar","previous":{"title":"Events","permalink":"/docs/flamingock-library-config/events"},"next":{"title":"Additional configurations","permalink":"/docs/flamingock-library-config/extra-configuration"}}');var s=a(4848),i=a(8453);const r={title:"Transactions",sidebar_position:90},o="Change-Level Transactionality",l={},c=[{value:"The Safety-First Approach",id:"the-safety-first-approach",level:2},{value:"Default Behavior: Transactional = True",id:"default-behavior-transactional--true",level:3},{value:"When You Need Non-Transactional",id:"when-you-need-non-transactional",level:3},{value:"Understanding Target System Types",id:"understanding-target-system-types",level:2},{value:"Transactional Target Systems",id:"transactional-target-systems",level:3},{value:"Non-Transactional Target Systems",id:"non-transactional-target-systems",level:3},{value:"When to Use Transactional = False",id:"when-to-use-transactional--false",level:2},{value:"DDL Operations Example",id:"ddl-operations-example",level:3},{value:"Large Bulk Operations",id:"large-bulk-operations",level:3},{value:"Recovery Strategy Integration",id:"recovery-strategy-integration",level:2},{value:"Transactional Changes + MANUAL_INTERVENTION",id:"transactional-changes--manual_intervention",level:3},{value:"Non-Transactional Changes + ALWAYS_RETRY",id:"non-transactional-changes--always_retry",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Per-Change Configuration (Recommended)",id:"per-change-configuration-recommended",level:3},{value:"Global Configuration (Less Common)",id:"global-configuration-less-common",level:3},{value:"Decision Matrix",id:"decision-matrix",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"<strong>Always Provide @RollbackExecution</strong>",id:"always-provide-rollbackexecution",level:3},{value:"<strong>Match Recovery Strategy to Operation</strong>",id:"match-recovery-strategy-to-operation",level:3},{value:"<strong>Keep Changes Focused</strong>",id:"keep-changes-focused",level:3},{value:"<strong>Use Explicit Annotations</strong>",id:"use-explicit-annotations",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"&quot;Operation Not Supported In Transaction&quot; Errors",id:"operation-not-supported-in-transaction-errors",level:3},{value:"Partial Failure Recovery",id:"partial-failure-recovery",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"change-level-transactionality",children:"Change-Level Transactionality"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"Smart defaults with expert control for enterprise safety"})}),"\n",(0,s.jsx)(n.p,{children:"Flamingock provides intelligent transactionality control that balances enterprise safety with operational flexibility. Understanding when and how to use transactional vs non-transactional changes is key to building reliable distributed system evolution."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"the-safety-first-approach",children:"The Safety-First Approach"}),"\n",(0,s.jsx)(n.h3,{id:"default-behavior-transactional--true",children:"Default Behavior: Transactional = True"}),"\n",(0,s.jsxs)(n.p,{children:["Flamingock defaults to ",(0,s.jsx)(n.code,{children:"transactional = true"})," for maximum safety:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Change execution"})," runs within a database transaction"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Audit logging"})," happens in a separate transaction for architectural safety"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic rollback"})," of the change transaction if execution fails"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Coordination mechanisms"})," ensure consistency between change and audit operations"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"when-you-need-non-transactional",children:"When You Need Non-Transactional"}),"\n",(0,s.jsx)(n.p,{children:"Some operations cannot or should not run in transactions:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"DDL operations"})," (CREATE INDEX, ALTER TABLE) in many databases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Large bulk operations"})," that would exceed transaction limits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cross-system changes"})," spanning multiple databases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Non-transactional targets"})," (Kafka, S3, REST APIs)"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"understanding-target-system-types",children:"Understanding Target System Types"}),"\n",(0,s.jsx)(n.h3,{id:"transactional-target-systems",children:"Transactional Target Systems"}),"\n",(0,s.jsx)(n.p,{children:"Systems that natively support ACID transactions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")  // PostgreSQL, MySQL, MongoDB 4.0+\n@ChangeUnit(id = "update-user-status", order = "001", author = "platform-team")\n// transactional = true (default) - leverages database transaction capabilities\npublic class UpdateUserStatus {\n    \n    @Execution\n    public void execute(MongoDatabase database) {\n        // This runs inside a transaction\n        // Automatic rollback on failure\n        database.getCollection("users")\n                .updateMany(eq("status", "pending"), set("status", "active"));\n    }\n    \n    @RollbackExecution\n    public void rollback(MongoDatabase database) {\n        // For CLI undo operations - not called on failure (transaction handles it)\n        database.getCollection("users")\n                .updateMany(eq("status", "active"), set("status", "pending"));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"non-transactional-target-systems",children:"Non-Transactional Target Systems"}),"\n",(0,s.jsx)(n.p,{children:"Systems without native transaction support:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("event-stream")  // Kafka, S3, REST APIs\n@ChangeUnit(id = "publish-user-events", order = "002", author = "platform-team", \n           transactional = false)  // Required for non-transactional systems\npublic class PublishUserEvents {\n    \n    @Execution\n    public void execute(KafkaTemplate kafka) {\n        // No transaction possible - manual safety required\n        kafka.send("user-topic", "user-status-changed", eventData);\n    }\n    \n    @RollbackExecution\n    public void rollback(KafkaTemplate kafka) {\n        // WILL be called on failure - provides manual safety\n        // Publish compensating event or cleanup logic\n        kafka.send("user-topic", "user-status-rollback", compensationData);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-transactional--false",children:"When to Use Transactional = False"}),"\n",(0,s.jsxs)(n.p,{children:["Even in transactional systems, some operations require ",(0,s.jsx)(n.code,{children:"transactional = false"}),":"]}),"\n",(0,s.jsx)(n.h3,{id:"ddl-operations-example",children:"DDL Operations Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")  // MongoDB (transactional system)\n@ChangeUnit(id = "create-user-indexes", order = "003", author = "dba-team", \n           transactional = false)  // DDL operations can\'t be in transactions\npublic class CreateUserIndexes {\n    \n    @Execution\n    public void execute(MongoDatabase database) {\n        // Index creation isn\'t transactional even in MongoDB\n        MongoCollection<Document> users = database.getCollection("users");\n        users.createIndex(ascending("email"));\n        users.createIndex(compound(ascending("status"), descending("createdAt")));\n    }\n    \n    @RollbackExecution\n    public void rollback(MongoDatabase database) {\n        // WILL be called on failure - cleanup partial index creation\n        MongoCollection<Document> users = database.getCollection("users");\n        try {\n            users.dropIndex("email_1");\n            users.dropIndex("status_1_createdAt_-1");\n        } catch (Exception e) {\n            // Handle rollback errors appropriately\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"large-bulk-operations",children:"Large Bulk Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("analytics-database")\n@ChangeUnit(id = "bulk-user-analysis", order = "004", author = "analytics-team",\n           transactional = false)  // Bulk operations for performance\npublic class BulkUserAnalysis {\n    \n    @Execution\n    public void execute(MongoDatabase database) {\n        // Process millions of records - transaction would timeout/lock\n        MongoCollection<Document> users = database.getCollection("users");\n        MongoCollection<Document> analytics = database.getCollection("user_analytics");\n        \n        // Batch processing for performance\n        users.find().forEach(user -> {\n            Document analyticsDoc = generateAnalytics(user);\n            analytics.insertOne(analyticsDoc);\n        });\n    }\n    \n    @RollbackExecution\n    public void rollback(MongoDatabase database) {\n        // Clean up partial bulk operation\n        database.getCollection("user_analytics").deleteMany(new Document());\n    }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"recovery-strategy-integration",children:"Recovery Strategy Integration"}),"\n",(0,s.jsx)(n.h3,{id:"transactional-changes--manual_intervention",children:"Transactional Changes + MANUAL_INTERVENTION"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("financial-database")\n@ChangeUnit(id = "update-account-balances", order = "005", author = "finance-team")\n// transactional = true (default) + MANUAL_INTERVENTION (default)\n// = Maximum safety for critical data\npublic class UpdateAccountBalances {\n    \n    @Execution\n    public void execute(MongoDatabase database) {\n        // Critical financial data - automatic transaction rollback on failure\n        // Manual intervention required to investigate any issues\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"non-transactional-changes--always_retry",children:"Non-Transactional Changes + ALWAYS_RETRY"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("cache-service")\n@ChangeUnit(id = "warm-user-cache", order = "006", author = "platform-team",\n           transactional = false)  // Cache operations aren\'t transactional\n@Recovery(strategy = RecoveryStrategy.ALWAYS_RETRY)  // Safe to retry\npublic class WarmUserCache {\n    \n    @Execution\n    public void execute(RedisTemplate redis) {\n        // Idempotent cache warming - safe to retry automatically\n        // No transaction needed, automatic retry on failure\n    }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,s.jsx)(n.h3,{id:"per-change-configuration-recommended",children:"Per-Change Configuration (Recommended)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Explicit control per change\n@ChangeUnit(id = "my-change", transactional = false, /* other params */)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"global-configuration-less-common",children:"Global Configuration (Less Common)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Disable transactions globally\nFlamingock.builder()\n    .disableTransaction()  // All changes become non-transactional\n    .build()\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"decision-matrix",children:"Decision Matrix"}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Change Type"}),(0,s.jsx)(n.th,{children:"Target System"}),(0,s.jsx)(n.th,{children:"Operation"}),(0,s.jsx)(n.th,{children:"Transactional Setting"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Data updates"}),(0,s.jsx)(n.td,{children:"MongoDB, PostgreSQL"}),(0,s.jsx)(n.td,{children:"DML operations"}),(0,s.jsxs)(n.td,{children:[(0,s.jsx)(n.code,{children:"true"})," (default)"]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Schema changes"}),(0,s.jsx)(n.td,{children:"MongoDB, PostgreSQL"}),(0,s.jsx)(n.td,{children:"DDL operations"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Cache updates"}),(0,s.jsx)(n.td,{children:"Redis, Memcached"}),(0,s.jsx)(n.td,{children:"Cache operations"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Event publishing"}),(0,s.jsx)(n.td,{children:"Kafka, RabbitMQ"}),(0,s.jsx)(n.td,{children:"Message sending"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"API calls"}),(0,s.jsx)(n.td,{children:"REST services"}),(0,s.jsx)(n.td,{children:"HTTP requests"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"File operations"}),(0,s.jsx)(n.td,{children:"File system, S3"}),(0,s.jsx)(n.td,{children:"File manipulation"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Bulk processing"}),(0,s.jsx)(n.td,{children:"Any database"}),(0,s.jsx)(n.td,{children:"Large datasets"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"false"})})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"always-provide-rollbackexecution",children:(0,s.jsx)(n.strong,{children:"Always Provide @RollbackExecution"})}),"\n",(0,s.jsx)(n.p,{children:"Regardless of transactionality, always implement rollback methods:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@RollbackExecution\npublic void rollback(/* dependencies */) {\n    // For transactional changes: Used in CLI undo operations\n    // For non-transactional changes: Used in automatic failure recovery\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"match-recovery-strategy-to-operation",children:(0,s.jsx)(n.strong,{children:"Match Recovery Strategy to Operation"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Transactional + Critical data"})," \u2192 MANUAL_INTERVENTION (default)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Non-transactional + Idempotent"})," \u2192 ALWAYS_RETRY"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Non-transactional + Critical"})," \u2192 MANUAL_INTERVENTION"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"keep-changes-focused",children:(0,s.jsx)(n.strong,{children:"Keep Changes Focused"})}),"\n",(0,s.jsx)(n.p,{children:"Don't mix transactional and non-transactional operations in one change:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u274c Bad - mixing concerns\n@ChangeUnit(id = "mixed-operations")\npublic class MixedOperations {\n    @Execution\n    public void execute(MongoDatabase db, KafkaTemplate kafka) {\n        // Database update (transactional) + Kafka publish (non-transactional)\n    }\n}\n\n// \u2705 Good - separate concerns\n@ChangeUnit(id = "database-update", transactional = true)\n@ChangeUnit(id = "kafka-publish", transactional = false)\n'})}),"\n",(0,s.jsx)(n.h3,{id:"use-explicit-annotations",children:(0,s.jsx)(n.strong,{children:"Use Explicit Annotations"})}),"\n",(0,s.jsx)(n.p,{children:"Be explicit about transactionality for clarity:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Clear intent\n@ChangeUnit(id = "user-update", transactional = true)   // Explicit\n@ChangeUnit(id = "index-creation", transactional = false) // Explicit\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"operation-not-supported-in-transaction-errors",children:'"Operation Not Supported In Transaction" Errors'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Error: "Cannot create index in transaction"\n@ChangeUnit(transactional = true)  // \u274c Wrong\npublic class CreateIndexes { }\n\n// Fix: Disable transactions for DDL\n@ChangeUnit(transactional = false)  // \u2705 Correct\npublic class CreateIndexes { }\n'})}),"\n",(0,s.jsx)(n.h3,{id:"partial-failure-recovery",children:"Partial Failure Recovery"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@ChangeUnit(transactional = false)\npublic class NonTransactionalChange {\n    \n    @Execution\n    public void execute() {\n        // Step 1: succeeds\n        // Step 2: fails <- Partial completion\n        // @RollbackExecution will be called automatically\n    }\n    \n    @RollbackExecution  \n    public void rollback() {\n        // Must handle cleanup of Step 1\n        // Flamingock calls this automatically on failure\n    }\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Takeaway"}),": Flamingock's transactionality control provides enterprise safety through intelligent defaults while giving you expert control when needed. Use transactions when possible, disable them when necessary, and always provide rollback logic for governance and recovery."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);