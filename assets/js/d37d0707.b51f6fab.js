"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[9089],{8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(6540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}},9735:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"change-units/anatomy-and-structure","title":"Anatomy & Structure","description":"Every ChangeUnit follows a consistent structure with required properties, optional configurations, and specific annotations. Understanding this anatomy is essential for creating reliable changes.","source":"@site/docs/change-units/anatomy-and-structure.md","sourceDirName":"change-units","slug":"/change-units/anatomy-and-structure","permalink":"/docs/change-units/anatomy-and-structure","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/change-units/anatomy-and-structure.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Anatomy & Structure","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introduction","permalink":"/docs/change-units/introduction"},"next":{"title":"Types & Implementation","permalink":"/docs/change-units/types-and-implementation"}}');var t=s(4848),a=s(8453);const r={title:"Anatomy & Structure",sidebar_position:2},o="ChangeUnit Anatomy & Structure",c={},d=[{value:"Required properties",id:"required-properties",level:2},{value:"<code>id</code> - Unique identifier",id:"id---unique-identifier",level:3},{value:"<code>order</code> - Execution sequence",id:"order---execution-sequence",level:3},{value:"<code>author</code> - Responsibility tracking",id:"author---responsibility-tracking",level:3},{value:"Optional properties",id:"optional-properties",level:2},{value:"<code>description</code> - Change explanation",id:"description---change-explanation",level:3},{value:"<code>transactional</code> - Transaction behavior",id:"transactional---transaction-behavior",level:3},{value:"Required annotations",id:"required-annotations",level:2},{value:"<code>@TargetSystem</code> - System specification",id:"targetsystem---system-specification",level:3},{value:"<code>@ChangeUnit</code> - Class marker",id:"changeunit---class-marker",level:3},{value:"Required methods",id:"required-methods",level:2},{value:"<code>@Execution</code> - Change logic",id:"execution---change-logic",level:3},{value:"<code>@RollbackExecution</code> - Undo logic",id:"rollbackexecution---undo-logic",level:3},{value:"Method parameters and dependency injection",id:"method-parameters-and-dependency-injection",level:2},{value:"File naming conventions",id:"file-naming-conventions",level:2},{value:"Complete example",id:"complete-example",level:2},{value:"Next steps",id:"next-steps",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"changeunit-anatomy--structure",children:"ChangeUnit Anatomy & Structure"})}),"\n",(0,t.jsx)(n.p,{children:"Every ChangeUnit follows a consistent structure with required properties, optional configurations, and specific annotations. Understanding this anatomy is essential for creating reliable changes."}),"\n",(0,t.jsx)(n.h2,{id:"required-properties",children:"Required properties"}),"\n",(0,t.jsx)(n.p,{children:"Every ChangeUnit must define these three properties:"}),"\n",(0,t.jsxs)(n.h3,{id:"id---unique-identifier",children:[(0,t.jsx)(n.code,{children:"id"})," - Unique identifier"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"id"})," must be unique across all ChangeUnits in your application."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ChangeUnit(id = "add-user-status", order = "0001", author = "dev-team")\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Rules:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Must be unique application-wide"}),"\n",(0,t.jsxs)(n.li,{children:["Use descriptive names (e.g., ",(0,t.jsx)(n.code,{children:"add-user-status"}),", not ",(0,t.jsx)(n.code,{children:"change1"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Cannot be modified once deployed"}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"order---execution-sequence",children:[(0,t.jsx)(n.code,{children:"order"})," - Execution sequence"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"order"})," determines when the ChangeUnit executes relative to others."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ChangeUnit(id = "create-indexes", order = "0001", author = "dev-team")\n@ChangeUnit(id = "migrate-data", order = "0002", author = "dev-team") \n@ChangeUnit(id = "cleanup-temp-data", order = "0003", author = "dev-team")\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Must use zero-padded format: ",(0,t.jsx)(n.code,{children:"0001"}),", ",(0,t.jsx)(n.code,{children:"0002"}),", ",(0,t.jsx)(n.code,{children:"0100"}),", etc."]}),"\n",(0,t.jsx)(n.li,{children:"Minimum 4 digits recommended for future expansion"}),"\n",(0,t.jsx)(n.li,{children:"Determines execution order across all target systems"}),"\n",(0,t.jsx)(n.li,{children:"Cannot be changed once deployed"}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"author---responsibility-tracking",children:[(0,t.jsx)(n.code,{children:"author"})," - Responsibility tracking"]}),"\n",(0,t.jsx)(n.p,{children:"Identifies who is responsible for this change."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ChangeUnit(id = "update-schema", order = "0001", author = "database-team")\n@ChangeUnit(id = "migrate-users", order = "0002", author = "john.doe@company.com")\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Best practices:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Use team names for shared responsibility: ",(0,t.jsx)(n.code,{children:"database-team"}),", ",(0,t.jsx)(n.code,{children:"api-team"})]}),"\n",(0,t.jsxs)(n.li,{children:["Use individual emails for personal changes: ",(0,t.jsx)(n.code,{children:"john.doe@company.com"})]}),"\n",(0,t.jsx)(n.li,{children:"Keep consistent within your organization"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"optional-properties",children:"Optional properties"}),"\n",(0,t.jsxs)(n.h3,{id:"description---change-explanation",children:[(0,t.jsx)(n.code,{children:"description"})," - Change explanation"]}),"\n",(0,t.jsx)(n.p,{children:"Briefly describes what the change does, especially useful for complex operations."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ChangeUnit(\n    id = "optimize-user-queries", \n    order = "0001", \n    author = "performance-team",\n    description = "Add composite index on user table to improve search performance"\n)\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"transactional---transaction-behavior",children:[(0,t.jsx)(n.code,{children:"transactional"})," - Transaction behavior"]}),"\n",(0,t.jsxs)(n.p,{children:["Controls whether the change runs within a transaction (default: ",(0,t.jsx)(n.code,{children:"true"}),")."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ChangeUnit(\n    id = "create-large-index", \n    order = "0001", \n    author = "db-team",\n    transactional = false  // DDL operations may require this\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsxs)(n.strong,{children:["When to set ",(0,t.jsx)(n.code,{children:"transactional = false"}),":"]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"DDL operations (CREATE INDEX, ALTER TABLE)"}),"\n",(0,t.jsx)(n.li,{children:"Large bulk operations that exceed transaction limits"}),"\n",(0,t.jsx)(n.li,{children:"Cross-system changes spanning multiple databases"}),"\n",(0,t.jsx)(n.li,{children:"Operations that don't support transactions"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important:"})," For non-transactional target systems (S3, Kafka, etc.), this flag has no effect."]}),"\n",(0,t.jsx)(n.h2,{id:"required-annotations",children:"Required annotations"}),"\n",(0,t.jsxs)(n.h3,{id:"targetsystem---system-specification",children:[(0,t.jsx)(n.code,{children:"@TargetSystem"})," - System specification"]}),"\n",(0,t.jsx)(n.p,{children:"Declares which target system this ChangeUnit affects."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")\n@ChangeUnit(id = "add-user-fields", order = "0001", author = "api-team")\npublic class _0001_AddUserFields {\n    // Implementation\n}\n'})}),"\n",(0,t.jsxs)(n.h3,{id:"changeunit---class-marker",children:[(0,t.jsx)(n.code,{children:"@ChangeUnit"})," - Class marker"]}),"\n",(0,t.jsx)(n.p,{children:"Marks the class as a ChangeUnit and contains all metadata."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@ChangeUnit(\n    id = "migrate-user-data",\n    order = "0001", \n    author = "migration-team",\n    description = "Migrate legacy user format to new schema",\n    transactional = true\n)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"required-methods",children:"Required methods"}),"\n",(0,t.jsxs)(n.h3,{id:"execution---change-logic",children:[(0,t.jsx)(n.code,{children:"@Execution"})," - Change logic"]}),"\n",(0,t.jsx)(n.p,{children:"Contains the actual change implementation."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Execution\npublic void execute(MongoDatabase database, ClientSession session) {\n    // Your change logic here\n    database.getCollection("users")\n            .insertOne(session, new Document("status", "active"));\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Method characteristics:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Must be public"}),"\n",(0,t.jsxs)(n.li,{children:["Can have any name (",(0,t.jsx)(n.code,{children:"execute"}),", ",(0,t.jsx)(n.code,{children:"run"}),", ",(0,t.jsx)(n.code,{children:"apply"}),", etc.)"]}),"\n",(0,t.jsx)(n.li,{children:"Parameters are dependency-injected by Flamingock"}),"\n",(0,t.jsx)(n.li,{children:"Should contain idempotent operations when possible"}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"rollbackexecution---undo-logic",children:[(0,t.jsx)(n.code,{children:"@RollbackExecution"})," - Undo logic"]}),"\n",(0,t.jsx)(n.p,{children:"Provides logic to reverse the change, essential for safety and CLI undo operations."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@RollbackExecution\npublic void rollback(MongoDatabase database, ClientSession session) {\n    // Undo the change\n    database.getCollection("users")\n            .deleteMany(new Document("status", "active"));\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Why rollback is required:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Non-transactional systems"}),": Used automatically if execution fails"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"All systems"}),": Required for CLI/UI undo operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Safety"}),": Ensures every change can be reversed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Governance"}),": Demonstrates you've thought through the change impact"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"method-parameters-and-dependency-injection",children:"Method parameters and dependency injection"}),"\n",(0,t.jsx)(n.p,{children:"ChangeUnits receive dependencies through method parameters, automatically injected by Flamingock from the target system's context, global context, or underlying framework context."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// MongoDB target system\n@Execution\npublic void execute(MongoDatabase database, ClientSession session) {\n    // database and session injected from target system or global context\n}\n\n// SQL target system  \n@Execution\npublic void execute(DataSource dataSource) {\n    // dataSource and connection injected from target system or  global context\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For more details on how dependency resolution works, see ",(0,t.jsx)(n.a,{href:"/docs/flamingock-library-config/context-and-dependencies",children:"Context and dependencies"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"file-naming-conventions",children:"File naming conventions"}),"\n",(0,t.jsxs)(n.p,{children:["All ChangeUnit files must follow the ",(0,t.jsx)(n.code,{children:"_XXXX_DescriptiveName"})," pattern:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"_0001_CreateUserIndexes.java\n_0002_MigrateUserData.java  \n_0003_AddUserStatusColumn.yml\n_0100_OptimizeQueries.java\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Rules:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Start with underscore and zero-padded order"}),"\n",(0,t.jsx)(n.li,{children:"Use PascalCase for descriptive names"}),"\n",(0,t.jsxs)(n.li,{children:["Match the ",(0,t.jsx)(n.code,{children:"order"})," property in the annotation"]}),"\n",(0,t.jsx)(n.li,{children:"Applies to both code (.java/.kt/.groovy) and template (.yml/.json) files"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"complete-example",children:"Complete example"}),"\n",(0,t.jsx)(n.p,{children:"Here's a complete ChangeUnit showing all elements:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")\n@ChangeUnit(\n    id = "add-user-preferences", \n    order = "0001", \n    author = "user-experience-team",\n    description = "Add preferences object to user documents with default values",\n    transactional = true\n)\npublic class _0001_AddUserPreferences {\n    \n    @Execution\n    public void execute(MongoDatabase database, ClientSession session) {\n        // Add preferences field with default values\n        Document defaultPreferences = new Document()\n            .append("notifications", true)\n            .append("theme", "light")\n            .append("language", "en");\n            \n        database.getCollection("users")\n                .updateMany(\n                    session,\n                    new Document("preferences", new Document("$exists", false)),\n                    new Document("$set", new Document("preferences", defaultPreferences))\n                );\n    }\n    \n    @RollbackExecution\n    public void rollback(MongoDatabase database, ClientSession session) {\n        // Remove the preferences field\n        database.getCollection("users")\n                .updateMany(\n                    session,\n                    new Document(),\n                    new Document("$unset", new Document("preferences", ""))\n                );\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./types-and-implementation",children:"ChangeUnit types & Implementation"})})," - Deep dive into code-based vs template-based approaches"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"./best-practices",children:"ChangeUnit best Practices"})})," - Learn proven patterns for reliable ChangeUnits"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"../target-systems/introduction",children:"Target Systems"})})," - Configure where your changes will be applied"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);