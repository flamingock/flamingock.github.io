"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[3442],{81:(e,n,a)=>{a.d(n,{A:()=>t});const t=a.p+"assets/images/Change as code-2-5ea8740aef054d5a2d455c7afe31a92a.png"},1470:(e,n,a)=>{a.d(n,{A:()=>j});var t=a(6540),s=a(4164),i=a(3104),r=a(6347),o=a(205),l=a(7485),c=a(1682),u=a(679);function d(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:n,children:a}=e;return(0,t.useMemo)(()=>{const e=n??function(e){return d(e).map(({props:{value:e,label:n,attributes:a,default:t}})=>({value:e,label:n,attributes:a,default:t}))}(a);return function(e){const n=(0,c.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,a])}function p({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const a=(0,r.W6)(),s=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,l.aZ)(s),(0,t.useCallback)(e=>{if(!s)return;const n=new URLSearchParams(a.location.search);n.set(s,e),a.replace({...a.location,search:n.toString()})},[s,a])]}function g(e){const{defaultValue:n,queryString:a=!1,groupId:s}=e,i=h(e),[r,l]=(0,t.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find(e=>e.default)??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i})),[c,d]=m({queryString:a,groupId:s}),[g,b]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[a,s]=(0,u.Dv)(n);return[a,(0,t.useCallback)(e=>{n&&s.set(e)},[n,s])]}({groupId:s}),f=(()=>{const e=c??g;return p({value:e,tabValues:i})?e:null})();(0,o.A)(()=>{f&&l(f)},[f]);return{selectedValue:r,selectValue:(0,t.useCallback)(e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),d(e),b(e)},[d,b,i]),tabValues:i}}var b=a(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=a(4848);function x({className:e,block:n,selectedValue:a,selectValue:t,tabValues:r}){const o=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),c=e=>{const n=e.currentTarget,s=o.indexOf(n),i=r[s].value;i!==a&&(l(n),t(i))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const a=o.indexOf(e.currentTarget)+1;n=o[a]??o[0];break}case"ArrowLeft":{const a=o.indexOf(e.currentTarget)-1;n=o[a]??o[o.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.A)("tabs",{"tabs--block":n},e),children:r.map(({value:e,label:n,attributes:t})=>(0,v.jsx)("li",{role:"tab",tabIndex:a===e?0:-1,"aria-selected":a===e,ref:e=>{o.push(e)},onKeyDown:u,onClick:c,...t,className:(0,s.A)("tabs__item",f.tabItem,t?.className,{"tabs__item--active":a===e}),children:n??e},e))})}function C({lazy:e,children:n,selectedValue:a}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===a);return e?(0,t.cloneElement)(e,{className:(0,s.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==a}))})}function k(e){const n=g(e);return(0,v.jsxs)("div",{className:(0,s.A)("tabs-container",f.tabList),children:[(0,v.jsx)(x,{...n,...e}),(0,v.jsx)(C,{...n,...e})]})}function j(e){const n=(0,b.A)();return(0,v.jsx)(k,{...e,children:d(e.children)},String(n))}},3598:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"overview/Change-as-Code","title":"Change-as-Code (CaC)","description":"Automate changes. Version changes. Control changes.","source":"@site/docs/overview/Change-as-Code.md","sourceDirName":"overview","slug":"/overview/Change-as-Code","permalink":"/docs/overview/Change-as-Code","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/overview/Change-as-Code.md","tags":[],"version":"current","sidebarPosition":20,"frontMatter":{"title":"Change-as-Code (CaC)","sidebar_position":20},"sidebar":"tutorialSidebar","previous":{"title":"Introduction to Flamingock","permalink":"/docs/overview/Introduction"},"next":{"title":"Key features","permalink":"/docs/overview/key-features"}}');var s=a(4848),i=a(8453),r=a(1470),o=a(9365);const l={title:"Change-as-Code (CaC)",sidebar_position:20},c=void 0,u={},d=[{value:"Why CaC matters today",id:"why-cac-matters-today",level:2},{value:"Four Pillars of Change-as-Code",id:"four-pillars-of-change-as-code",level:2},{value:"\u201cHello, CaC\u201d Code Snippet",id:"hello-cac-code-snippet",level:2},{value:"Illustration: CaC vs. IaC",id:"illustration-cac-vs-iac",level:2},{value:"Real-World Use Cases",id:"real-world-use-cases",level:2},{value:"Multi-tenant SaaS Onboarding",id:"multi-tenant-saas-onboarding",level:3},{value:"Change-as-Code Checklist",id:"change-as-code-checklist",level:2},{value:"Next Steps",id:"next-steps",level:2}];function h(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Automate changes. Version changes. Control changes."}),(0,s.jsx)(n.br,{}),"\n","Change-as-Code (CaC) means every system change\u2014whether it\u2019s an S3 bucket toggle, a new database schema, or a Kafka topic configuration\u2014is authored, versioned, and audited just like application code."]}),"\n",(0,s.jsx)(n.p,{children:"At Flamingock, we champion CaC as the foundation for truly reliable, auditable, and repeatable deployments. No more one-off shell scripts or manual \u201cclicks\u201d in a console\u2014every change is written in code, tracked in your VCS, and executed in a controlled pipeline."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"why-cac-matters-today",children:"Why CaC matters today"}),"\n",(0,s.jsx)(n.p,{children:"Modern applications increasingly span dozens of external systems\u2014ranging from relational and NoSQL databases to SaaS feature flags, message buses, and infrastructure APIs. Managing these changes manually or with ad-hoc scripts leads to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Drift and \u201csnowflake\u201d environments"}),(0,s.jsx)(n.br,{}),"\n","When teams manually tweak production configurations, environments diverge, making rollbacks or audits nearly impossible."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Lack of auditability"}),(0,s.jsx)(n.br,{}),"\n","Regulatory and security teams require a full record of \u201cwhat changed, when, and who made it.\u201d Spreadsheets and one-off commands don\u2019t cut it."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Inefficient collaboration"}),(0,s.jsx)(n.br,{}),"\n","Developers, operations, and security need a single source of truth: change definitions in code, reviewed and versioned via pull requests."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Increased risk of human error"}),(0,s.jsx)(n.br,{}),"\n","Pasting commands into a console or clicking UI checkboxes invites typos, misconfigurations, and stress during deployment windows."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Flamingock\u2019s CaC approach solves these problems by treating every external-system change as first-class code\u2014complete with version control, automated execution, and a centralized audit trail."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"four-pillars-of-change-as-code",children:"Four Pillars of Change-as-Code"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"One-Hundred-Percent Versioned"}),(0,s.jsx)(n.br,{}),"\n","All ChangeUnits live in your Git repository (or other VCS). This means you can review, diff, and roll back changes just like application code."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Automated Execution"}),(0,s.jsx)(n.br,{}),"\n","Flamingock scans and applies ChangeUnits at application startup or on-demand via the CLI. No manual intervention\u2014just code running code."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Auditable & Traceable"}),(0,s.jsx)(n.br,{}),"\n","Every ChangeUnit outcome is recorded in an audit store (your database or Flamingock Cloud). Teams can query \u201cwho ran what change, and when,\u201d ensuring full compliance."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Cross-Component Support"}),(0,s.jsx)(n.br,{}),"\n","Whether it\u2019s SQL/NoSQL DDL, S3 buckets, Kafka topics, feature-flag toggles, or REST API calls\u2014Flamingock treats them all as code. Your entire system evolves in lockstep."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"hello-cac-code-snippet",children:"\u201cHello, CaC\u201d Code Snippet"}),"\n",(0,s.jsx)(n.p,{children:"Imagine you need to toggle a feature flag in a downstream service (not a database). In Flamingock, you\u2019d write:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Change(id = "enable-autosave", order = "0005", author = "ops-team")\npublic class _0005_EnableAutoSaveFeature {\n\n  @Execution\n  public void enableAutoSave(FeatureFlagClient client) {\n    client.setFlag("autosave_feature", true);\n  }\n\n  @RollbackExecution\n  public void disableAutoSave(FeatureFlagClient client) {\n    client.setFlag("autosave_feature", false);\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Versioned"}),": This code-based or template-based ChangeUnit lives in your VCS."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automated"}),": Flamingock executes it in order (0005) at startup or via CLI."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auditable"}),": Upon success, an audit entry is written to your audit store."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cross-Component"}),": The same pattern works for a DynamoDB schema change, a Kafka topic creation, or any REST API call."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"illustration-cac-vs-iac",children:"Illustration: CaC vs. IaC"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:a(81).A+"",width:"539",height:"416"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Infrastructure as Code (IaC)"}),": Use Terraform, CloudFormation, Pulumi, etc., to provision VMs, networks, and databases (the \u201cfoundation\u201d)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Change as Code (CaC)"}),": Use Flamingock to version and apply everything that lives on that foundation\u2014database schemas, feature flags, SaaS configurations, message topics, and more."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"real-world-use-cases",children:"Real-World Use Cases"}),"\n",(0,s.jsx)(n.h3,{id:"multi-tenant-saas-onboarding",children:"Multi-tenant SaaS Onboarding"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Over the lifetime of your application, you might need to create and then later modify external resources\u2014such as an S3 bucket, Kafka topics, IAM roles, and initial database state\u2014as part of each new release. Doing this manually or with ad-hoc scripts risks drift, missing audits, and inconsistent environments.."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"CaC Solution"}),": Define a sequence of ChangeUnits that run in order on mutiple deployments, inserting audit entries and ensuring reproducible, versioned updates::"]}),"\n",(0,s.jsxs)(r.A,{groupId:"config",children:[(0,s.jsx)(o.A,{value:"code-base",label:"Code",default:!0,children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@ChangeUnit(id = "provision-bucket", order = "0001", author = "team-a", transactional = false)\npublic class _0001_ProvisionBucketChange {\n\n    @Execution\n    public void execute(S3Client s3) {\n        s3.createBucket(CreateBucketRequest.builder()\n                .bucket("flamingock-app-bucket")\n                .build());\n    }\n\n    @RollbackExecution\n    public void rollback(S3Client s3) {\n        s3.deleteBucket(DeleteBucketRequest.builder()\n                .bucket("flamingock-app-bucket")\n                .build());\n    }\n}\n\n@ChangeUnit(id = "create-kafka-topics", order = "0002", author = "devops", transactional = false)\npublic class _0002_CreateKafkaTopicsChange {\n\n    @Execution\n    public void exec(KafkaAdminClient admin) {\n        NewTopic topic1 = new NewTopic("app-events", 3, (short) 1);\n        NewTopic topic2 = new NewTopic("user-notifications", 2, (short) 1);\n        admin.createTopics(Arrays.asList(topic1, topic2));\n    }\n\n    @RollbackExecution\n    public void rollback(KafkaAdminClient admin) {\n        admin.deleteTopics(Arrays.asList("app-events", "user-notifications"));\n    }\n}\n\n@ChangeUnit(id = "setup-iam-roles", order = "0003", author = "devops", transactional = false)\npublic class _0003_SetupIamRolesChange {\n\n    @Execution\n    public void exec(IamClient iam) {\n        CreateRoleResponse response = iam.createRole(CreateRoleRequest.builder()\n                .roleName("flamingock-app-role")\n                .assumeRolePolicyDocument("{...}") // truncated for brevity\n                .build());\n    }\n\n    @RollbackExecution\n    public void rollback(IamClient iam) {\n        iam.deleteRole(DeleteRoleRequest.builder()\n                .roleName("flamingock-app-role")\n                .build());\n    }\n}\n\n@ChangeUnit(id = "seed-database", order = "0004", author = "devops", transactional = true)\npublic class _0004_SeedTenantDataChange {\n\n    @Execution\n    public void exec(DataSource ds) {\n        try (Connection conn = ds.getConnection();\n             Statement stmt = conn.createStatement()) {\n            stmt.executeUpdate(\n                    "INSERT INTO tenants (id, name, created_at) " +\n                            "VALUES (1, \'TenantA\', NOW()), (2, \'TenantB\', NOW())"\n            );\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @RollbackExecution\n    public void rollback(DataSource ds) {\n        try (Connection conn = ds.getConnection();\n             Statement stmt = conn.createStatement()) {\n            stmt.executeUpdate("DELETE FROM tenants WHERE id IN (1, 2)");\n        } catch (SQLException e) {\n            throw new RuntimeException(e);\n        }\n    }\n}\n\n@ChangeUnit(id = "update-bucket-settings", order = "0005", author = "team-a", transactional = false)\npublic class _0005_UpdateBucketSettingsChange {\n\n    @Execution\n    public void execute(S3Client s3) {\n        // Example: enable versioning on the bucket\n        s3.putBucketVersioning(PutBucketVersioningRequest.builder()\n                .bucket("flamingock-app-bucket")\n                .versioningConfiguration(VersioningConfiguration.builder()\n                        .status("Enabled")\n                        .build())\n                .build());\n    }\n\n    @RollbackExecution\n    public void rollback(S3Client s3) {\n        // Example: disable versioning on the bucket\n        s3.putBucketVersioning(PutBucketVersioningRequest.builder()\n                .bucket("flamingock-app-bucket")\n                .versioningConfiguration(VersioningConfiguration.builder()\n                        .status("Suspended")\n                        .build())\n                .build());\n    }\n}\n\n'})})}),(0,s.jsx)(o.A,{value:"template-base",label:"Template",children:(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'\n# File: _0001_provision-bucket.yaml\nid: "provision-bucket"\norder: 0001\nauthor: "team-a"\ntransactional: false\ntemplateName: aws-s3-template\ntemplateConfiguration:\n  bucketName: "flamingock-app-bucket"\n  region: "us-east-1"\n  rollbackBucketName: "flamingock-app-bucket"\n\n---\n\n# File: _0002_create-kafka-topics.yaml\nid: "create-kafka-topics"\norder: 0002\nauthor: "devops"\ntransactional: false\ntemplateName: kafka-template\ntemplateConfiguration:\n  topics:\n    - "app-events"\n    - "user-notifications"\n  configs:\n    app-events:\n      partitions: 3\n      replicationFactor: 1\n    user-notifications:\n      partitions: 2\n      replicationFactor: 1\n  rollbackTopics:\n    - "app-events"\n    - "user-notifications"\n\n---\n\n# File: _0003_setup-iam-roles.yaml\nid: "setup-iam-roles"\norder: 0003\nauthor: "devops"\ntransactional: false\ntemplateName: aws-iam-template\ntemplateConfiguration:\n  roleName: "flamingock-app-role"\n  assumeRolePolicy: |\n    {\n      "Version": "2012-10-17",\n      "Statement": [\n        {\n          "Effect": "Allow",\n          "Principal": { "Service": "ec2.amazonaws.com" },\n          "Action": "sts:AssumeRole"\n        }\n      ]\n    }\n  rollbackRoleName: "flamingock-app-role"\n\n---\n\n# File: _0004_seed-database.yaml\nid: "seed-database"\norder: 0004\nauthor: "devops"\ntransactional: true\ntemplateName: sql-template\ntemplateConfiguration:\n  executionSql: |\n    INSERT INTO tenants (id, name, created_at)\n    VALUES (1, \'TenantA\', NOW()), (2, \'TenantB\', NOW());\n  rollbackSql: |\n    DELETE FROM tenants WHERE id IN (1, 2);\n\n---\n\n# File: _0005_update-bucket-settings.yaml\nid: "update-bucket-settings"\norder: 0005\nauthor: "team-a"\ntransactional: false\ntemplateName: aws-s3-template\ntemplateConfiguration:\n  # Enable versioning on an existing bucket\n  bucketName: "flamingock-app-bucket"\n  versioningConfiguration:\n    status: "Enabled"\n  # Rollback: suspend versioning\n  rollbackVersioningConfiguration:\n    bucketName: "flamingock-app-bucket"\n    versioningConfiguration:\n      status: "Suspended"\n\n---\n\n'})})})]}),"\n",(0,s.jsx)(n.p,{children:"Flamingock ensures these four steps run in sequence\u2014never twice\u2014and logs them in your audit store for future reference."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"change-as-code-checklist",children:"Change-as-Code Checklist"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Change lives in VCS"}),": Every ChangeUnit class (or YAML template) is versioned."]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Automated pipeline"}),": Flamingock applies changes automatically at startup or via CLI."]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Audit trail"}),": Query your audit store for a complete history of applied changes."]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Rollback logic"}),": Each ChangeUnit provides ",(0,s.jsx)(n.code,{children:"@RollbackExecution"})," to undo or compensate if needed."]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Consistent ordering"}),": All ChangeUnits follow a strict, declared ordering (via the ",(0,s.jsx)(n.code,{children:"order"})," attribute)."]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Cross-component"}),": You can target databases, SaaS APIs, feature flags, message systems\u2014anything with a client API."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/getting-started/get-started",children:"Quickstart Guide"})," \u2192 Learn how to create your first ChangeUnit and run Flamingock."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/overview/core-concepts",children:"Core concepts"}),"   \u2192 Dive deeper into auditing, drivers, transactions, and distributed locking."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/docs/resources/examples",children:"Real use case examples"})," \u2192 Explore real-world code samples: MongoDB, DynamoDB, Couchbase, Kafka, and more."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>o});var t=a(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}},9365:(e,n,a)=>{a.d(n,{A:()=>r});a(6540);var t=a(4164);const s={tabItem:"tabItem_Ymn6"};var i=a(4848);function r({children:e,hidden:n,className:a}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.A)(s.tabItem,a),hidden:n,children:e})}}}]);