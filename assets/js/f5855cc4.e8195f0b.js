"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[740],{7921:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"changes/types-and-implementation","title":"Types & Implementation","description":"Flamingock supports two approaches for implementing Changes: code-based and template-based. Each serves different use cases and provides the same safety guarantees.","source":"@site/docs/changes/types-and-implementation.md","sourceDirName":"changes","slug":"/changes/types-and-implementation","permalink":"/docs/changes/types-and-implementation","draft":false,"unlisted":false,"editUrl":"https://github.com/flamingock/flamingock-java/docs/changes/types-and-implementation.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Types & Implementation","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Anatomy & Structure","permalink":"/docs/changes/anatomy-and-structure"},"next":{"title":"Best Practices","permalink":"/docs/changes/best-practices"}}');var s=n(4848),i=n(8453);const r={title:"Types & Implementation",sidebar_position:3},o="Change Types & Implementation",l={},c=[{value:"Code-based Changes",id:"code-based-changes",level:2},{value:"Basic structure",id:"basic-structure",level:3},{value:"Template-based Changes",id:"template-based-changes",level:2},{value:"Basic YAML structure",id:"basic-yaml-structure",level:3},{value:"File organization",id:"file-organization",level:2},{value:"Recommended project structure:",id:"recommended-project-structure",level:3},{value:"Best practices:",id:"best-practices",level:3},{value:"Template development",id:"template-development",level:2},{value:"Next steps",id:"next-steps",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"change-types--implementation",children:"Change Types & Implementation"})}),"\n",(0,s.jsx)(t.p,{children:"Flamingock supports two approaches for implementing Changes: code-based and template-based. Each serves different use cases and provides the same safety guarantees."}),"\n",(0,s.jsx)(t.h2,{id:"code-based-changes",children:"Code-based Changes"}),"\n",(0,s.jsx)(t.p,{children:"Code-based Changes are written in Java, Kotlin, or Groovy with annotations. They provide full programmatic control for custom logic or specific operations that don't fit existing templates."}),"\n",(0,s.jsx)(t.h3,{id:"basic-structure",children:"Basic structure"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@TargetSystem("user-database")\n@Change(id = "migrate-user-emails", order = "0001", author = "data-team")\npublic class _0001_MigrateUserEmails {\n    \n    @Apply\n    public void apply(MongoDatabase database, ClientSession session) {\n        // Custom implementation logic with full programmatic control\n        MongoCollection<Document> users = database.getCollection("users");\n        users.updateMany(session,\n            new Document("email", new Document("$exists", true)),\n            new Document("$set", new Document("emailVerified", false)));\n    }\n    \n    @Rollback\n    public void rollback(MongoDatabase database, ClientSession session) {\n        // Rollback logic\n        database.getCollection("users")\n                .updateMany(session, new Document(),\n                    new Document("$unset", new Document("emailVerified", "")));\n    }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"template-based-changes",children:"Template-based Changes"}),"\n",(0,s.jsx)(t.p,{children:"Template-based Changes use YAML or JSON files with reusable templates. Templates provide a low-code, declarative approach for common patterns and repetitive operations. Templates can be as powerful and complex as code-based Changes - the difference is that templates are developed for reusable patterns and integrations."}),"\n",(0,s.jsx)(t.h3,{id:"basic-yaml-structure",children:"Basic YAML structure"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:'# File: _0001_add_user_index.yml\nid: add_user_index\norder: "0001"\nauthor: "database-team"\ndescription: "Add index on user email field for faster lookups"\ntargetSystem: "user-database"\ntemplateName: mongodb-index\napply:\n  type: createIndex\n  collection: users\n  indexSpec:\n    email: 1\n  options:\n    unique: true\n    name: "idx_user_email"\nrollback:\n  type: removeIndex\n  collection: users\n  indexName: "idx_user_email"\n'})}),"\n",(0,s.jsxs)(t.p,{children:["For more details about available templates and creating custom templates, see ",(0,s.jsx)(t.a,{href:"../templates/templates-introduction",children:"Templates"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"file-organization",children:"File organization"}),"\n",(0,s.jsx)(t.h3,{id:"recommended-project-structure",children:"Recommended project structure:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"src/main/java/com/yourapp/changes/\n\u251c\u2500\u2500 _0001_CreateUserIndexes.java\n\u251c\u2500\u2500 _0002_add_user_status.yml\n\u251c\u2500\u2500 _0003_MigrateUserData.java\n\u251c\u2500\u2500 _0004_setup_notifications.yml\n\u2514\u2500\u2500 _0005_OptimizeQueries.java\n"})}),"\n",(0,s.jsx)(t.h3,{id:"best-practices",children:"Best practices:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Keep together"}),": Store both code and template files in the same directory"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Consistent naming"}),": Follow ",(0,s.jsx)(t.code,{children:"_XXXX_DescriptiveName"})," pattern for both types"]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"template-development",children:"Template development"}),"\n",(0,s.jsx)(t.p,{children:"Flamingock and the community provide useful templates for common operations. Organizations can also develop their own templates to standardize patterns and integrations specific to their needs."}),"\n",(0,s.jsxs)(t.p,{children:["For more information about available templates and how to create custom templates, see ",(0,s.jsx)(t.a,{href:"../templates/templates-introduction",children:"Templates"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"./best-practices",children:"Best Practices"})})," - Learn proven patterns for reliable Changes"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"../templates/templates-introduction",children:"Templates"})})," - Explore available templates and create custom ones"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.a,{href:"../target-systems/introduction",children:"Target Systems"})})," - Configure where your changes will be applied"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var a=n(6540);const s={},i=a.createContext(s);function r(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);