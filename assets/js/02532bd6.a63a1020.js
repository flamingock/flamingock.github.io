"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[2927],{2478:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"change-units/introduction","title":"Introduction","description":"1. Introduction: Understanding ChangeUnits","source":"@site/docs/change-units/introduction.md","sourceDirName":"change-units","slug":"/change-units/introduction","permalink":"/docs/change-units/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/change-units/introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Introduction","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Events","permalink":"/docs/flamingock-library-config/events"},"next":{"title":"Introduction","permalink":"/docs/target-systems/introduction"}}');var t=i(4848),r=i(8453);const a={title:"Introduction",sidebar_position:1},o="ChangeUnits",l={},c=[{value:"1. Introduction: Understanding ChangeUnits",id:"1-introduction-understanding-changeunits",level:2},{value:"2. Structure of a ChangeUnit",id:"2-structure-of-a-changeunit",level:2},{value:"Required Properties",id:"required-properties",level:3},{value:"Optional Properties",id:"optional-properties",level:3},{value:"Required Annotations and Methods",id:"required-annotations-and-methods",level:3},{value:"3. Types of ChangeUnits",id:"3-types-of-changeunits",level:2},{value:"Code-based ChangeUnits",id:"code-based-changeunits",level:3},{value:"Template-based ChangeUnits",id:"template-based-changeunits",level:3},{value:"4. Naming &amp; Discoverability",id:"4-naming--discoverability",level:2},{value:"Enforced Naming Convention",id:"enforced-naming-convention",level:3},{value:"Why This Convention?",id:"why-this-convention",level:3},{value:"File Locations",id:"file-locations",level:3},{value:"5. Transactional Behavior",id:"5-transactional-behavior",level:2},{value:"6. Default Safety &amp; Recovery",id:"6-default-safety--recovery",level:2},{value:"7. Best Practices",id:"7-best-practices",level:2},{value:"Core Principles",id:"core-principles",level:3},{value:"Technical Guidelines",id:"technical-guidelines",level:3},{value:"Organizational Best Practices",id:"organizational-best-practices",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"changeunits",children:"ChangeUnits"})}),"\n",(0,t.jsx)(n.h2,{id:"1-introduction-understanding-changeunits",children:"1. Introduction: Understanding ChangeUnits"}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"ChangeUnit"})," is the atomic, versioned, self-contained unit of change in Flamingock.",(0,t.jsx)(n.br,{}),"\n","It encapsulates logic to evolve ",(0,t.jsx)(n.a,{href:"/docs/overview/audit-store-vs-target-system",children:(0,t.jsx)(n.strong,{children:"target systems"})})," safely, deterministically, and with complete auditability."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Key characteristics:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Executed in sequence based on their ",(0,t.jsx)(n.code,{children:"order"})]}),"\n",(0,t.jsx)(n.li,{children:"Recorded in the audit store to prevent duplicate execution"}),"\n",(0,t.jsx)(n.li,{children:"Safe by default: if Flamingock is uncertain about a change's outcome, it stops and requires manual intervention"}),"\n",(0,t.jsx)(n.li,{children:"Each ChangeUnit runs exactly once per system"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"2-structure-of-a-changeunit",children:"2. Structure of a ChangeUnit"}),"\n",(0,t.jsx)(n.h3,{id:"required-properties",children:"Required Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"id"})}),": Unique identifier across all ChangeUnits in the application"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"order"})}),": Execution sequence (must use zero-padded format like ",(0,t.jsx)(n.code,{children:"0001"}),", ",(0,t.jsx)(n.code,{children:"0002"}),", ",(0,t.jsx)(n.code,{children:"_0001_ChangeName"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"author"})}),": Who is responsible for this change"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"optional-properties",children:"Optional Properties"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"description"})}),": Brief explanation of what the change does"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"transactional"})})," (default ",(0,t.jsx)(n.code,{children:"true"}),"): Only relevant if the target system supports transactions. Has no effect on non-transactional systems like S3 or Kafka."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"required-annotations-and-methods",children:"Required Annotations and Methods"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"@TargetSystem"})}),": Specifies which system this change affects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"@ChangeUnit"})}),": Marks the class as a ChangeUnit"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"@Execution"})}),": The method containing your change logic"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"@RollbackExecution"})}),": The method to undo the change (required for safety and governance)"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"})," Rollback is important because in ",(0,t.jsx)(n.strong,{children:"non-transactional systems"}),", it's be used to revert changes if execution fails. In ",(0,t.jsx)(n.strong,{children:"all systems"}),", rollback is essential for undo operations (via CLI or UI)."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"3-types-of-changeunits",children:"3. Types of ChangeUnits"}),"\n",(0,t.jsx)(n.h3,{id:"code-based-changeunits",children:"Code-based ChangeUnits"}),"\n",(0,t.jsxs)(n.p,{children:["Written in Java (or Kotlin/Groovy) with annotations. Best for ",(0,t.jsx)(n.strong,{children:"specific jobs"})," or when you need a ",(0,t.jsx)(n.strong,{children:"flexibility window"})," that isn\u2019t covered by an existing template."]}),"\n",(0,t.jsx)(n.p,{children:"This approach gives you full programmatic control, making it the fallback option when no reusable template exists for your use case."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")\n@ChangeUnit(id = "add-user-status", order = "0001", author = "dev-team")\npublic class _0001_AddUserStatus {\n    \n    @Execution\n    public void execute(MongoDatabase database) {\n        database.getCollection("users")\n                .updateMany(new Document(), \n                            new Document("$set", new Document("status", "active")));\n    }\n    \n    @RollbackExecution\n    public void rollback(MongoDatabase database) {\n        database.getCollection("users")\n                .updateMany(new Document(), \n                            new Document("$unset", new Document("status", "")));\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"template-based-changeunits",children:"Template-based ChangeUnits"}),"\n",(0,t.jsxs)(n.p,{children:["Template-based ChangeUnits use YAML or JSON definitions. They are especially useful for ",(0,t.jsx)(n.strong,{children:"repetitive or parameterized operations"}),", where the same logic can to be applied multiple times with different configurations."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The execution logic is encapsulated in a ",(0,t.jsx)(n.strong,{children:"template"})," (provided by Flamingock, a contributor, or created by you)."]}),"\n",(0,t.jsx)(n.li,{children:"Each ChangeUnit then supplies its own configuration to apply that logic consistently."}),"\n",(0,t.jsxs)(n.li,{children:["This approach ensures ",(0,t.jsx)(n.strong,{children:"immutability"})," (the YAML/JSON file itself represents the change) and makes it easier to ",(0,t.jsx)(n.strong,{children:"reuse proven patterns"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# File: _0002_add_status_column.yml\nid: add_status_column\norder: "0002"\nauthor: "db-team"\ndescription: "Add status column to orders table"\ntemplateName: sql-template\ntemplateConfiguration:\n  executionSql: |\n    ALTER TABLE orders ADD COLUMN status VARCHAR(20) DEFAULT \'pending\';\n  rollbackSql: |\n    ALTER TABLE orders DROP COLUMN status;\n'})}),"\n",(0,t.jsx)(n.p,{children:"Both types follow the same execution model and provide the same safety guarantees."}),"\n",(0,t.jsx)(n.h2,{id:"4-naming--discoverability",children:"4. Naming & Discoverability"}),"\n",(0,t.jsx)(n.h3,{id:"enforced-naming-convention",children:"Enforced Naming Convention"}),"\n",(0,t.jsxs)(n.p,{children:["All ChangeUnit files (both code and templates) ",(0,t.jsx)(n.strong,{children:"must"})," follow this pattern:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Format"}),": ",(0,t.jsx)(n.code,{children:"_XXXX_DescriptiveName"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Order"}),": Must be at least 4 digits, zero-padded (e.g., ",(0,t.jsx)(n.code,{children:"0001"}),", ",(0,t.jsx)(n.code,{children:"0002"}),", ",(0,t.jsx)(n.code,{children:"0100"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Examples"}),":","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Code: ",(0,t.jsx)(n.code,{children:"_0001_CreateUserIndexes.java"})]}),"\n",(0,t.jsxs)(n.li,{children:["Template: ",(0,t.jsx)(n.code,{children:"_0002_AddStatusColumn.yml"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"why-this-convention",children:"Why This Convention?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Visibility"}),": Easy to see execution order at a glance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Immutability"}),": Clear versioning prevents accidental modifications"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deterministic ordering"}),": Ensures consistent execution across environments"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"file-locations",children:"File Locations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Code-based"}),": Place in packages scanned by Flamingock (default: ",(0,t.jsx)(n.code,{children:"src/main/java"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Template-based"}),": Place in ",(0,t.jsx)(n.code,{children:"src/main/resources"})," or preferably alongside code-based ChangeUnits"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Recommendation"}),": Keep all ChangeUnits (code and templates) in the same package/directory for better organization"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"5-transactional-behavior",children:"5. Transactional Behavior"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Transactional target systems"})," (e.g., MongoDB, PostgreSQL): operations run within a transaction ",(0,t.jsxs)(n.strong,{children:["unless you explicitly set ",(0,t.jsx)(n.code,{children:"transactional = false"})]}),"."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Non-transactional target systems"})," (e.g., S3, Kafka): the ",(0,t.jsx)(n.code,{children:"transactional"})," flag has no effect \u2014 operations are applied without transactional guarantees."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Some operations may require setting ",(0,t.jsx)(n.code,{children:"transactional = false"})," even in databases:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"DDL operations (e.g., CREATE INDEX, ALTER TABLE)"}),"\n",(0,t.jsx)(n.li,{children:"Large bulk operations that exceed transaction limits"}),"\n",(0,t.jsx)(n.li,{children:"Cross-system changes spanning multiple databases"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["\u27a1\ufe0f To understand how to define and configure ",(0,t.jsx)(n.strong,{children:"target systems"}),", see ",(0,t.jsx)(n.a,{href:"./target-system-configuration.md",children:"Target System Configuration"})]}),"\n",(0,t.jsx)(n.h2,{id:"6-default-safety--recovery",children:"6. Default Safety & Recovery"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Flamingock's core principle"}),": If a ChangeUnit execution result is uncertain, Flamingock stops and requires manual intervention. This prevents silent data corruption."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"What this means:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"If a change fails, Flamingock halts execution"}),"\n",(0,t.jsx)(n.li,{children:"The issue is recorded in the audit store"}),"\n",(0,t.jsx)(n.li,{children:"Manual investigation and resolution is required via CLI (or Cloud UI in Cloud Edition)"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["\u27a1\ufe0f ",(0,t.jsx)(n.strong,{children:"For advanced recovery strategies"}),", see ",(0,t.jsx)(n.a,{href:"/docs/recovery-and-safety/recovery-strategies",children:"Recovery Strategies"})]}),"\n",(0,t.jsx)(n.h2,{id:"7-best-practices",children:"7. Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"core-principles",children:"Core Principles"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Treat ChangeUnits as immutable"}),": Once deployed, never modify existing ChangeUnits. Create new ones for corrections."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Always provide @RollbackExecution"}),": Important for CLI undo operations and recovery scenarios."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Keep scope focused"}),": One ChangeUnit should address one logical change."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"technical-guidelines",children:"Technical Guidelines"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Make operations idempotent when possible"}),": Try to design changes that can be safely re-run."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test both execution and rollback"}),": Include ChangeUnit testing in your CI/CD pipeline."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Follow naming conventions"}),": Use the ",(0,t.jsx)(n.code,{children:"_XXXX_DescriptiveName"})," pattern consistently."]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"organizational-best-practices",children:"Organizational Best Practices"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clear authorship"}),": Always specify the ",(0,t.jsx)(n.code,{children:"author"})," for accountability."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Version control discipline"}),": Review ChangeUnits in pull requests like any critical code."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document complex changes"}),": Use the ",(0,t.jsx)(n.code,{children:"description"})," field to explain non-obvious logic."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Maintain change logs"}),": Keep a high-level record of what changes were made when."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Next Steps:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Learn about ",(0,t.jsx)(n.a,{href:"./changeunit-dependency-injection.md",children:"dependency injection"})," in ChangeUnits"]}),"\n",(0,t.jsxs)(n.li,{children:["Configure ",(0,t.jsx)(n.a,{href:"./target-system-configuration.md",children:"target systems"})," and ",(0,t.jsx)(n.a,{href:"./audit-store-configuration.md",children:"audit store"})]}),"\n",(0,t.jsxs)(n.li,{children:["Explore ",(0,t.jsx)(n.a,{href:"/docs/templates/templates-introduction",children:"template-based ChangeUnits"})," for declarative changes"]}),"\n",(0,t.jsxs)(n.li,{children:["Understand ",(0,t.jsx)(n.a,{href:"/docs/recovery-and-safety/recovery-strategies",children:"advanced recovery strategies"})," for production scenarios"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const t={},r=s.createContext(t);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);