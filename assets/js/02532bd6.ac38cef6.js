"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[2927],{2478:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"change-units/introduction","title":"Introduction","description":"A ChangeUnit is the atomic, versioned, self-contained unit of change in Flamingock. It encapsulates logic to evolve target systems safely, deterministically, and with complete auditability.","source":"@site/docs/change-units/introduction.md","sourceDirName":"change-units","slug":"/change-units/introduction","permalink":"/docs/change-units/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/change-units/introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Introduction","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Events","permalink":"/docs/flamingock-library-config/events"},"next":{"title":"Anatomy & Structure","permalink":"/docs/change-units/anatomy-and-structure"}}');var i=t(4848),a=t(8453);const r={title:"Introduction",sidebar_position:1},o="ChangeUnits",c={},l=[{value:"Key characteristics",id:"key-characteristics",level:2},{value:"What ChangeUnits can do",id:"what-changeunits-can-do",level:2},{value:"Types of ChangeUnits",id:"types-of-changeunits",level:2},{value:"Code-based ChangeUnits",id:"code-based-changeunits",level:3},{value:"Template-based ChangeUnits",id:"template-based-changeunits",level:3},{value:"Safety and recovery",id:"safety-and-recovery",level:2},{value:"Next steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"changeunits",children:"ChangeUnits"})}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"ChangeUnit"})," is the atomic, versioned, self-contained unit of change in Flamingock. It encapsulates logic to evolve ",(0,i.jsx)(n.a,{href:"/docs/overview/audit-store-vs-target-system",children:(0,i.jsx)(n.strong,{children:"target systems"})})," safely, deterministically, and with complete auditability."]}),"\n",(0,i.jsx)(n.h2,{id:"key-characteristics",children:"Key characteristics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Atomic execution"}),": Each ChangeUnit runs exactly once"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ordered sequence"}),": Executed based on their ",(0,i.jsx)(n.code,{children:"order"})," property"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Auditable"}),": Recorded in the audit store to prevent duplicate execution"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Safe by default"}),": If Flamingock is uncertain about a change's outcome, it stops and requires manual intervention"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rollback capable"}),": Can be undone through rollback methods"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"what-changeunits-can-do",children:"What ChangeUnits can do"}),"\n",(0,i.jsx)(n.p,{children:"ChangeUnits enable you to version and track changes across your entire technology stack:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Message queue operations"}),": Topic creation, schema registry updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Object storage"}),": Bucket setup, file migrations, policy updates"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database migrations"}),": Schema changes, data transformations, index creation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"External API integrations"}),": Service configurations, webhook setups"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Infrastructure changes"}),": Feature flag updates, configuration changes"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"types-of-changeunits",children:"Types of ChangeUnits"}),"\n",(0,i.jsx)(n.h3,{id:"code-based-changeunits",children:"Code-based ChangeUnits"}),"\n",(0,i.jsx)(n.p,{children:"Written in Java, Kotlin, or Groovy with annotations. Best for complex logic or when you need full programmatic control."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")\n@ChangeUnit(id = "add-user-status", order = "0001", author = "dev-team")\npublic class _0001_AddUserStatus {\n    \n    @Execution\n    public void execute(MongoDatabase database) {\n        // Your change logic here\n    }\n    \n    @RollbackExecution\n    public void rollback(MongoDatabase database) {\n        // Your rollback logic here\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"template-based-changeunits",children:"Template-based ChangeUnits"}),"\n",(0,i.jsx)(n.p,{children:"Use YAML or JSON definitions with reusable templates. Perfect for repetitive operations and standardized patterns."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# File: _0002_add_status_column.yml\nid: add_status_column\norder: "0002"\nauthor: "db-team"\ntemplateName: sql-template\ntemplateConfiguration:\n  executionSql: "ALTER TABLE orders ADD COLUMN status VARCHAR(20);"\n  rollbackSql: "ALTER TABLE orders DROP COLUMN status;"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"safety-and-recovery",children:"Safety and recovery"}),"\n",(0,i.jsx)(n.p,{children:"Flamingock prioritizes safety over automation. If execution fails or results are uncertain, Flamingock stops and requires manual intervention rather than risking data corruption. This ensures you always know the exact state of your systems."}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,i.jsx)(n.p,{children:"Dive deeper into specific aspects of ChangeUnits:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/change-units/anatomy-and-structure",children:"Anatomy & Structure"})})," - Learn the technical structure, required properties, and annotations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/change-units/types-and-implementation",children:"Types & Implementation"})})," - Understand code-based vs template-based approaches"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/change-units/best-practices",children:"Best Practices"})})," - Follow proven patterns for reliable ChangeUnits"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Or continue to other key concepts:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"/docs/target-systems/introduction",children:"Target Systems"})})," - Configure where your changes will be applied"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"../templates/introduction.md",children:"Templates"})})," - Explore reusable change patterns"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);