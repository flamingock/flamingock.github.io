"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[2987],{415:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>r});const i=JSON.parse('{"id":"testing/integration-testing","title":"Integration Testing","description":"Introduction","source":"@site/docs/testing/integration-testing.md","sourceDirName":"testing","slug":"/testing/integration-testing","permalink":"/docs/testing/integration-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/flamingock/flamingock-java/docs/testing/integration-testing.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Integration Testing","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Unit Testing","permalink":"/docs/testing/unit-testing"},"next":{"title":"Spring Boot  Testing","permalink":"/docs/testing/springboot-integration-testing"}}');var s=t(4848),o=t(8453);const a={title:"Integration Testing",sidebar_position:3},c=void 0,l={},r=[{value:"Introduction",id:"introduction",level:2},{value:"Example: Creating an S3 bucket",id:"example-creating-an-s3-bucket",level:2},{value:"Integration test with Testcontainers",id:"integration-test-with-testcontainers",level:2},{value:"\u2705 Best practices",id:"-best-practices",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsx)(n.p,{children:"Integration tests ensure that Flamingock operates correctly in a real environment by executing changes against live systems \u2014 such as databases, cloud APIs, or internal services."}),"\n",(0,s.jsx)(n.p,{children:"These tests involve spinning up the actual backend system and running Flamingock end-to-end:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Change unit execution"}),"\n",(0,s.jsx)(n.li,{children:"Audit log persistence"}),"\n",(0,s.jsx)(n.li,{children:"Distributed lock acquisition"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Integration tests should be used to validate that the full pipeline behaves as expected \u2014 from execution to rollback."}),"\n",(0,s.jsx)(n.h2,{id:"example-creating-an-s3-bucket",children:"Example: Creating an S3 bucket"}),"\n",(0,s.jsx)(n.p,{children:"Suppose you have a change unit that creates an Amazon S3 bucket:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Change(id = "create-bucket", order = "0001", author = "dev-team")\npublic class _0001_CreateS3BucketChange {\n\n  @Apply\n  public void apply(S3Client s3Client) {\n    s3Client.createBucket(CreateBucketRequest.builder()\n        .bucket("flamingock-test-bucket")\n        .build());\n  }\n\n  @Rollback\n  public void rollback(S3Client s3Client) {\n    s3Client.deleteBucket(DeleteBucketRequest.builder()\n        .bucket("flamingock-test-bucket")\n        .build());\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"integration-test-with-testcontainers",children:"Integration test with Testcontainers"}),"\n",(0,s.jsx)(n.p,{children:"To test this change end-to-end, we will:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Spin up a ",(0,s.jsx)(n.strong,{children:"MongoDB container"})," to be used as Flamingock\u2019s audit backend"]}),"\n",(0,s.jsxs)(n.li,{children:["Inject a real ",(0,s.jsx)(n.strong,{children:"S3 client"})," (mocked, localstack, or real AWS)"]}),"\n",(0,s.jsx)(n.li,{children:"Configure Flamingock and execute it"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'class IntegrationTest {\n\n    static final MongoDBContainer mongoContainer = new MongoDBContainer("mongo:6.0");\n\n    @BeforeAll\n    static void initMongo() {\n        mongoContainer.start();\n    }\n\n    @AfterAll\n    static void tearDown() {\n        mongoContainer.stop();\n    }\n\n    @Test\n    void shouldExecuteChangeAgainstS3AndAuditToMongo() {\n        var s3Client = S3Client.builder()\n                .region(Region.EU_WEST_1)\n                .build();\n\n        var mongoClient = MongoClients.create(mongoContainer.getReplicaSetUrl());\n\n        Runner runner = Flamingock.builder()\n                .addDependency(s3Client)\n                .addDependency(mongoClient)\n                .setProperty("mongodb.databaseName", "test-db")\n                .build();\n\n        runner.execute();\n\n        // \u2705 Verify the S3 bucket was created\n        ListBucketsResponse buckets = s3Client.listBuckets();\n        boolean bucketExists = buckets.buckets().stream()\n                .anyMatch(b -> b.name().equals("flamingock-test-bucket"));\n        assertTrue(bucketExists, "Expected S3 bucket was not found");\n\n        // \u2705 Verify the change was audited in MongoDB\n        MongoDatabase db = mongoClient.getDatabase("test-db");\n        MongoCollection<Document> auditCollection = db.getCollection("flamingockAuditLogs");\n\n        var document = new Document("changeId", "create-bucket")\n                .append("state","EXECUTED");\n        Document auditEntry = auditCollection.find(document).first();\n        assertNotNull(auditEntry, "Flamingock audit log entry was not found in MongoDB");\n    }\n\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best practices"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use Testcontainers to spin up a real audit backend (e.g., MongoDB) \u2014 this avoids the need for manual test setup"}),"\n",(0,s.jsxs)(n.li,{children:["Run Flamingock fully using ",(0,s.jsx)(n.code,{children:".build().execute()"})," \u2014 don\u2019t call internal methods manually"]}),"\n",(0,s.jsx)(n.li,{children:"Clean up the backend between tests or isolate data with unique test identifiers"}),"\n",(0,s.jsx)(n.li,{children:"Validate changes by checking the actual target system or using custom assertions"}),"\n",(0,s.jsx)(n.li,{children:"Use integration tests sparingly \u2014 unit tests are faster and should cover most logic"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var i=t(6540);const s={},o=i.createContext(s);function a(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);