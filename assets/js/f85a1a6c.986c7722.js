"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[6244],{8202:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"testing/unit-testing","title":"Unit Testing","description":"Introduction","source":"@site/docs/testing/unit-testing.md","sourceDirName":"testing","slug":"/testing/unit-testing","permalink":"/docs/testing/unit-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/flamingock/flamingock-java/docs/testing/unit-testing.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Unit Testing","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Testing Flamingock","permalink":"/docs/testing/introduction"},"next":{"title":"Integration Testing","permalink":"/docs/testing/integration-testing"}}');var s=n(4848),c=n(8453);const l={title:"Unit Testing",sidebar_position:2},a=void 0,r={},o=[{value:"Introduction",id:"introduction",level:2},{value:"Example: Creating an S3 bucket",id:"example-creating-an-s3-bucket",level:2},{value:"Writing a unit test",id:"writing-a-unit-test",level:2},{value:"\u2705 Best practices",id:"-best-practices",level:2}];function d(e){const t={br:"br",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"introduction",children:"Introduction"}),"\n",(0,s.jsxs)(t.p,{children:["Unit tests focus on verifying the internal logic of a ",(0,s.jsx)(t.strong,{children:"single change unit"}),", without relying on any external system.",(0,s.jsx)(t.br,{}),"\n","They are fast, isolated, and ideal for validating:"]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["That the ",(0,s.jsx)(t.code,{children:"@Apply"})," method performs the correct logic"]}),"\n",(0,s.jsxs)(t.li,{children:["That the ",(0,s.jsx)(t.code,{children:"@Rollback"})," method compensates properly on failure"]}),"\n",(0,s.jsx)(t.li,{children:"That injected dependencies are used as expected (using mocks or fakes)"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Unit tests are most useful when your change unit contains business logic, computation, validation, or decisions."}),"\n",(0,s.jsx)(t.h2,{id:"example-creating-an-s3-bucket",children:"Example: Creating an S3 bucket"}),"\n",(0,s.jsx)(t.p,{children:"Suppose you have a change unit that creates an Amazon S3 bucket:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'@Change(id = "create-bucket", author = "dev-team")  // order extracted from filename\npublic class _0001__CreateS3BucketChange {\n\n  @Apply\n  public void apply(S3Client s3Client) {\n    s3Client.createBucket(CreateBucketRequest.builder()\n        .bucket("flamingock-test-bucket")\n        .build());\n  }\n\n  @Rollback\n  public void rollback(S3Client s3Client) {\n    s3Client.deleteBucket(DeleteBucketRequest.builder()\n        .bucket("flamingock-test-bucket")\n        .build());\n  }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"writing-a-unit-test",children:"Writing a unit test"}),"\n",(0,s.jsxs)(t.p,{children:["To unit test this class, we use JUnit and a mocking library (e.g., Mockito).",(0,s.jsx)(t.br,{}),"\n","We'll mock the ",(0,s.jsx)(t.code,{children:"S3Client"})," and verify the correct calls were made."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'class _0001__CreateS3BucketChangeTest {\n\n  private final S3Client s3Client = mock(S3Client.class);\n  private final CreateS3BucketChange change = new CreateS3BucketChange();\n\n  @Test\n  void shouldCallCreateBucketOnExecution() {\n    var s3Client = mock(S3Client.class);\n    new _0001__CreateS3BucketChange().apply(s3Client);\n\n    verify(s3Client).createBucket(argThat(req ->\n        req.bucket().equals("flamingock-test-bucket")));\n  }\n\n  @Test\n  void shouldCallDeleteBucketOnRollback() {\n    var s3Client = mock(S3Client.class);\n    new _0001__CreateS3BucketChange().rollback(s3Client);\n    \n    verify(s3Client).deleteBucket(argThat(req ->\n        req.bucket().equals("flamingock-test-bucket")));\n  }\n}\n'})}),"\n",(0,s.jsx)(t.h2,{id:"-best-practices",children:"\u2705 Best practices"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Use mocks or fakes to isolate the dependencies used in your change unit"}),"\n",(0,s.jsxs)(t.li,{children:["Focus only on the logic inside the ",(0,s.jsx)(t.code,{children:"@Apply"})," and ",(0,s.jsx)(t.code,{children:"@Rollback"})," methods"]}),"\n",(0,s.jsx)(t.li,{children:"Keep assertions specific and minimal \u2014 check that the right dependencies are called"}),"\n",(0,s.jsx)(t.li,{children:"Avoid testing Flamingock itself (e.g., locking or audit behavior \u2014 that\u2019s handled in integration tests)"}),"\n",(0,s.jsxs)(t.li,{children:["Use descriptive test names like ",(0,s.jsx)(t.code,{children:"shouldCallCreateBucketOnExecution()"})," for readability"]}),"\n"]})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>a});var i=n(6540);const s={},c=i.createContext(s);function l(e){const t=i.useContext(c);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),i.createElement(c.Provider,{value:t},e.children)}}}]);