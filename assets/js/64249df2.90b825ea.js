"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[6548],{3258:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"flamingock-library-config/target-system-configuration","title":"Target System Configuration","description":"How to define and configure target systems for your ChangeUnits","source":"@site/docs/flamingock-library-config/target-system-configuration.md","sourceDirName":"flamingock-library-config","slug":"/flamingock-library-config/target-system-configuration","permalink":"/docs/flamingock-library-config/target-system-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/flamingock-library-config/target-system-configuration.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Target System Configuration","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Platform component injection","permalink":"/docs/flamingock-library-config/platform-component-injection"},"next":{"title":"Audit Store Configuration","permalink":"/docs/flamingock-library-config/audit-store-configuration"}}');var s=t(4848),i=t(8453);const r={title:"Target System Configuration",sidebar_position:4},o="Target System Configuration",c={},l=[{value:"Basic Target System Definition",id:"basic-target-system-definition",level:2},{value:"Required: @TargetSystem Annotation",id:"required-targetsystem-annotation",level:3},{value:"Target System Naming Convention",id:"target-system-naming-convention",level:3},{value:"Transactional vs Non-Transactional Systems",id:"transactional-vs-non-transactional-systems",level:2},{value:"Transactional Target Systems",id:"transactional-target-systems",level:3},{value:"Non-Transactional Target Systems",id:"non-transactional-target-systems",level:3},{value:"Dependency Injection for Target Systems",id:"dependency-injection-for-target-systems",level:2},{value:"MongoDB Example",id:"mongodb-example",level:3},{value:"Spring Data Example",id:"spring-data-example",level:3},{value:"Multiple Dependencies Example",id:"multiple-dependencies-example",level:3},{value:"Target System Configuration in Flamingock",id:"target-system-configuration-in-flamingock",level:2},{value:"Community Edition Configuration",id:"community-edition-configuration",level:3},{value:"MongoDB Target System",id:"mongodb-target-system",level:4},{value:"Multiple Target Systems",id:"multiple-target-systems",level:4},{value:"When to Use transactional = false",id:"when-to-use-transactional--false",level:2},{value:"DDL Operations",id:"ddl-operations",level:3},{value:"Large Bulk Operations",id:"large-bulk-operations",level:3},{value:"Target System Best Practices",id:"target-system-best-practices",level:2},{value:"Naming and Organization",id:"naming-and-organization",level:3},{value:"Dependency Scoping",id:"dependency-scoping",level:3},{value:"Error Handling and Safety",id:"error-handling-and-safety",level:3},{value:"Troubleshooting Target System Issues",id:"troubleshooting-target-system-issues",level:2},{value:"Common Configuration Problems",id:"common-configuration-problems",level:3},{value:"Missing @TargetSystem Annotation",id:"missing-targetsystem-annotation",level:4},{value:"Dependency Injection Failures",id:"dependency-injection-failures",level:4},{value:"Transactional Setting Mismatch",id:"transactional-setting-mismatch",level:4},{value:"Verification Commands",id:"verification-commands",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"target-system-configuration",children:"Target System Configuration"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"How to define and configure target systems for your ChangeUnits"})}),"\n",(0,s.jsx)(n.p,{children:"Target systems are where your business changes are applied. This guide covers how to properly configure them, define their characteristics, and work with different system types."}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Conceptual Overview"}),": For architectural understanding of target systems vs audit store, see ",(0,s.jsx)(n.a,{href:"/docs/overview/audit-store-vs-target-system",children:"Target Systems vs Audit Store Architecture"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"basic-target-system-definition",children:"Basic Target System Definition"}),"\n",(0,s.jsx)(n.h3,{id:"required-targetsystem-annotation",children:"Required: @TargetSystem Annotation"}),"\n",(0,s.jsx)(n.p,{children:"Every ChangeUnit must specify which target system it affects:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")  // Required: explicitly names the target\n@ChangeUnit(id = "add-user-status", order = "0001", author = "dev-team")\npublic class _0001_AddUserStatus {\n    \n    @Execution\n    public void execute(MongoDatabase database) {\n        // Your business logic modifies the target system\n        database.getCollection("users")\n                .updateMany(new Document(), \n                           new Document("$set", new Document("status", "active")));\n    }\n    \n    @RollbackExecution\n    public void rollback(MongoDatabase database) {\n        database.getCollection("users")\n                .updateMany(new Document(), \n                           new Document("$unset", new Document("status", "")));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"target-system-naming-convention",children:"Target System Naming Convention"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use descriptive names"}),": ",(0,s.jsx)(n.code,{children:'"user-database"'}),", ",(0,s.jsx)(n.code,{children:'"payment-api"'}),", ",(0,s.jsx)(n.code,{children:'"inventory-cache"'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Be consistent"}),": Same target system name across related ChangeUnits"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Avoid generic names"}),": Not ",(0,s.jsx)(n.code,{children:'"database"'})," or ",(0,s.jsx)(n.code,{children:'"api"'})," - be specific"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"transactional-vs-non-transactional-systems",children:"Transactional vs Non-Transactional Systems"}),"\n",(0,s.jsx)(n.h3,{id:"transactional-target-systems",children:"Transactional Target Systems"}),"\n",(0,s.jsx)(n.p,{children:"Systems that support ACID transactions and can coordinate with Flamingock's audit store:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("financial-database")\n@ChangeUnit(id = "process-payments", order = "0001", author = "finance-team",\n           transactional = true)  // Default behavior for transactional systems\npublic class ProcessPayments {\n    \n    @Execution\n    public void execute(MongoDatabase financialDb) {\n        // Runs within a transaction\n        // Automatic rollback coordination with audit store\n        financialDb.getCollection("payments")\n                  .updateMany(eq("status", "pending"), \n                             combine(set("status", "processed"),\n                                   set("processedAt", new Date())));\n    }\n    \n    @RollbackExecution\n    public void rollback(MongoDatabase financialDb) {\n        financialDb.getCollection("payments")\n                  .updateMany(eq("status", "processed"),\n                             combine(set("status", "pending"),\n                                   unset("processedAt")));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Supported Transactional Systems:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MongoDB 4.0+"}),": With replica sets or sharded clusters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PostgreSQL"}),": All versions with transaction support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MySQL"}),": InnoDB engine with transaction support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SQL Server"}),": Standard transaction support"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"non-transactional-target-systems",children:"Non-Transactional Target Systems"}),"\n",(0,s.jsx)(n.p,{children:"Systems that don't support transactions but still benefit from Flamingock's safety mechanisms:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("event-stream")\n@ChangeUnit(id = "publish-user-events", order = "0002", author = "platform-team",\n           transactional = false)  // Must be false for non-transactional systems\npublic class PublishUserEvents {\n    \n    @Execution\n    public void execute(KafkaTemplate kafkaTemplate) {\n        // No transaction support, but Flamingock provides safety through:\n        // 1. Execution tracking in audit store\n        // 2. Rollback compensation via @RollbackExecution\n        List<UserEvent> events = prepareUserEvents();\n        for (UserEvent event : events) {\n            kafkaTemplate.send("user-events", event.getUserId(), event);\n        }\n    }\n    \n    @RollbackExecution\n    public void rollback(KafkaTemplate kafkaTemplate) {\n        // Manual compensation - publish rollback events\n        List<UserEvent> rollbackEvents = prepareRollbackEvents();\n        for (UserEvent event : rollbackEvents) {\n            kafkaTemplate.send("user-events", event.getUserId(), event);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Common Non-Transactional Systems:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Apache Kafka"}),": Message streaming platform"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Amazon S3"}),": Object storage service"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"REST APIs"}),": External service integrations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"File Systems"}),": Local or network file operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Redis"})," (when not using transactions)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Elasticsearch"}),": Search and analytics engine"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"dependency-injection-for-target-systems",children:"Dependency Injection for Target Systems"}),"\n",(0,s.jsx)(n.h3,{id:"mongodb-example",children:"MongoDB Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")\n@ChangeUnit(id = "update-user-schema", order = "0001", author = "dev-team")\npublic class UpdateUserSchema {\n    \n    @Execution\n    public void execute(MongoDatabase userDatabase) {\n        // MongoDatabase is injected based on target system configuration\n        userDatabase.getCollection("users")\n                   .createIndex(Indexes.ascending("email"));\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"spring-data-example",children:"Spring Data Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("product-database")\n@ChangeUnit(id = "migrate-products", order = "0002", author = "product-team")\npublic class MigrateProducts {\n    \n    @Execution\n    public void execute(ProductRepository productRepository) {\n        // Spring Data repository injected automatically\n        List<Product> products = productRepository.findAll();\n        products.forEach(product -> {\n            product.setCategory(determineCategory(product));\n            productRepository.save(product);\n        });\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"multiple-dependencies-example",children:"Multiple Dependencies Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-system")\n@ChangeUnit(id = "sync-user-data", order = "0003", author = "platform-team")\npublic class SyncUserData {\n    \n    @Execution\n    public void execute(MongoDatabase userDb, \n                       KafkaTemplate eventStream,\n                       S3Client fileStorage,\n                       UserService userService) {\n        // Multiple dependencies injected for complex operations\n        List<User> users = userService.findUsersToSync();\n        \n        for (User user : users) {\n            // Update database\n            updateUserInDatabase(userDb, user);\n            \n            // Publish event\n            publishUserEvent(eventStream, user);\n            \n            // Sync files\n            syncUserFiles(fileStorage, user);\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"target-system-configuration-in-flamingock",children:"Target System Configuration in Flamingock"}),"\n",(0,s.jsx)(n.h3,{id:"community-edition-configuration",children:"Community Edition Configuration"}),"\n",(0,s.jsx)(n.h4,{id:"mongodb-target-system",children:"MongoDB Target System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class FlamingockConfig {\n    \n    @Bean\n    public Flamingock flamingock(MongoTemplate mongoTemplate) {\n        return Flamingock.builder()\n            .setConnectionRepository(new MongoConnectionRepository(mongoTemplate))\n            .addMigrationClass(UserDatabaseChanges.class)\n            // Target system "user-database" maps to MongoDatabase from MongoTemplate\n            .build();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h4,{id:"multiple-target-systems",children:"Multiple Target Systems"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Configuration\npublic class FlamingockConfig {\n    \n    @Bean \n    public Flamingock flamingock(MongoTemplate mongoTemplate,\n                                KafkaTemplate kafkaTemplate,\n                                S3Client s3Client) {\n        return Flamingock.builder()\n            .setConnectionRepository(new MongoConnectionRepository(mongoTemplate))\n            // Register target system dependencies\n            .addDependency("userDatabase", mongoTemplate.getCollection("users"))\n            .addDependency("eventStream", kafkaTemplate)\n            .addDependency("fileStorage", s3Client)\n            .addMigrationClass(MultiSystemChanges.class)\n            .build();\n    }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"when-to-use-transactional--false",children:"When to Use transactional = false"}),"\n",(0,s.jsx)(n.h3,{id:"ddl-operations",children:"DDL Operations"}),"\n",(0,s.jsx)(n.p,{children:"Even in transactional databases, some operations require non-transactional execution:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")\n@ChangeUnit(id = "create-user-indexes", order = "0004", author = "dba-team",\n           transactional = false)  // DDL can\'t be in transactions\npublic class CreateUserIndexes {\n    \n    @Execution\n    public void execute(MongoDatabase userDb) {\n        MongoCollection<Document> users = userDb.getCollection("users");\n        // Index creation operations\n        users.createIndex(Indexes.ascending("email"));\n        users.createIndex(Indexes.compound(\n            Indexes.ascending("status"), \n            Indexes.descending("createdAt")\n        ));\n    }\n    \n    @RollbackExecution\n    public void rollback(MongoDatabase userDb) {\n        MongoCollection<Document> users = userDb.getCollection("users");\n        users.dropIndex("email_1");\n        users.dropIndex("status_1_createdAt_-1");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"large-bulk-operations",children:"Large Bulk Operations"}),"\n",(0,s.jsx)(n.p,{children:"Operations that might exceed transaction limits:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("analytics-database")  \n@ChangeUnit(id = "migrate-analytics-data", order = "0005", author = "data-team",\n           transactional = false)  // Large dataset migration\npublic class MigrateAnalyticsData {\n    \n    @Execution\n    public void execute(MongoDatabase analyticsDb) {\n        MongoCollection<Document> events = analyticsDb.getCollection("events");\n        \n        // Process in batches to avoid transaction timeouts\n        int batchSize = 10000;\n        int skip = 0;\n        \n        while (true) {\n            List<Document> batch = events.find()\n                                        .skip(skip)\n                                        .limit(batchSize)\n                                        .into(new ArrayList<>());\n            \n            if (batch.isEmpty()) break;\n            \n            // Transform and update batch\n            transformEventBatch(events, batch);\n            skip += batchSize;\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"target-system-best-practices",children:"Target System Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"naming-and-organization",children:"Naming and Organization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// \u2705 Good: Descriptive and specific\n@TargetSystem("user-profile-database")\n@TargetSystem("payment-gateway-api")  \n@TargetSystem("inventory-cache-redis")\n\n// \u274c Avoid: Generic and ambiguous\n@TargetSystem("database")\n@TargetSystem("api")\n@TargetSystem("cache")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"dependency-scoping",children:"Dependency Scoping"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("user-database")\n@ChangeUnit(id = "update-user-profiles", order = "0006", author = "dev-team")\npublic class UpdateUserProfiles {\n    \n    @Execution\n    public void execute(MongoDatabase userDb,           // \u2705 Specific database\n                       UserValidationService validator, // \u2705 Specific service\n                       EmailService emailService) {     // \u2705 Related service\n        // Good: Inject only what you need for this specific change\n    }\n    \n    // \u274c Avoid: Injecting entire application context or unrelated services\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"error-handling-and-safety",children:"Error Handling and Safety"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@TargetSystem("external-payment-api")\n@ChangeUnit(id = "update-payment-config", order = "0007", author = "finance-team")\npublic class UpdatePaymentConfig {\n    \n    @Execution\n    public void execute(PaymentApiClient paymentClient) {\n        try {\n            // Make change idempotent when possible\n            PaymentConfig currentConfig = paymentClient.getConfig();\n            if (!currentConfig.hasNewFeature()) {\n                paymentClient.updateConfig(newConfigWithFeature());\n            }\n        } catch (PaymentApiException e) {\n            // Log detailed context for troubleshooting\n            log.error("Failed to update payment config. Current state unknown. " +\n                     "Manual verification required at payment provider.", e);\n            throw e; // Re-throw to trigger Flamingock\'s safety mechanisms\n        }\n    }\n    \n    @RollbackExecution\n    public void rollback(PaymentApiClient paymentClient) {\n        // Always provide rollback, even for external APIs\n        try {\n            paymentClient.updateConfig(previousConfig());\n        } catch (PaymentApiException e) {\n            log.error("Payment API rollback failed. Manual intervention required.", e);\n            throw e;\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting-target-system-issues",children:"Troubleshooting Target System Issues"}),"\n",(0,s.jsx)(n.h3,{id:"common-configuration-problems",children:"Common Configuration Problems"}),"\n",(0,s.jsx)(n.h4,{id:"missing-targetsystem-annotation",children:"Missing @TargetSystem Annotation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'Error: ChangeUnit must specify a target system\nSolution: Add @TargetSystem("system-name") annotation to your ChangeUnit class\n'})}),"\n",(0,s.jsx)(n.h4,{id:"dependency-injection-failures",children:"Dependency Injection Failures"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Error: No bean of type 'MongoDatabase' available\nSolution: Ensure target system dependencies are properly configured in your Flamingock setup\n"})}),"\n",(0,s.jsx)(n.h4,{id:"transactional-setting-mismatch",children:"Transactional Setting Mismatch"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Error: Transaction not supported by target system\nSolution: Set transactional = false for non-transactional systems like Kafka, S3, APIs\n"})}),"\n",(0,s.jsx)(n.h3,{id:"verification-commands",children:"Verification Commands"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# Check which target systems are configured\nflamingock audit list --group-by target-system\n\n# Verify target system connectivity\nflamingock test-connection --target-system user-database\n\n# List changes for specific target system  \nflamingock audit list --target-system user-database --since "1 week ago"\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Takeaway"}),": Proper target system configuration ensures your ChangeUnits can safely and reliably apply business changes while maintaining Flamingock's safety guarantees and audit capabilities."]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);