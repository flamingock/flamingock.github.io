"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[305],{1470:(e,t,n)=>{n.d(t,{A:()=>C});var s=n(6540),a=n(4164),r=n(3104),i=n(6347),c=n(205),o=n(7485),l=n(1682),d=n(679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h(e){const{values:t,children:n}=e;return(0,s.useMemo)(()=>{const e=t??function(e){return u(e).map(({props:{value:e,label:t,attributes:n,default:s}})=>({value:e,label:t,attributes:n,default:s}))}(n);return function(e){const t=(0,l.XI)(e,(e,t)=>e.value===t.value);if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[t,n])}function p({value:e,tabValues:t}){return t.some(t=>t.value===e)}function g({queryString:e=!1,groupId:t}){const n=(0,i.W6)(),a=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,o.aZ)(a),(0,s.useCallback)(e=>{if(!a)return;const t=new URLSearchParams(n.location.search);t.set(a,e),n.replace({...n.location,search:t.toString()})},[a,n])]}function m(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=h(e),[i,o]=(0,s.useState)(()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!p({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find(e=>e.default)??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:r})),[l,u]=g({queryString:n,groupId:a}),[m,x]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,a]=(0,d.Dv)(t);return[n,(0,s.useCallback)(e=>{t&&a.set(e)},[t,a])]}({groupId:a}),b=(()=>{const e=l??m;return p({value:e,tabValues:r})?e:null})();(0,c.A)(()=>{b&&o(b)},[b]);return{selectedValue:i,selectValue:(0,s.useCallback)(e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),x(e)},[u,x,r]),tabValues:r}}var x=n(2303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=n(4848);function f({className:e,block:t,selectedValue:n,selectValue:s,tabValues:i}){const c=[],{blockElementScrollPositionUntilNextRender:o}=(0,r.a_)(),l=e=>{const t=e.currentTarget,a=c.indexOf(t),r=i[a].value;r!==n&&(o(t),s(r))},d=e=>{let t=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":t},e),children:i.map(({value:e,label:t,attributes:s})=>(0,j.jsx)("li",{role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,ref:e=>{c.push(e)},onKeyDown:d,onClick:l,...s,className:(0,a.A)("tabs__item",b.tabItem,s?.className,{"tabs__item--active":n===e}),children:t??e},e))})}function y({lazy:e,children:t,selectedValue:n}){const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const e=r.find(e=>e.props.value===n);return e?(0,s.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:r.map((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==n}))})}function v(e){const t=m(e);return(0,j.jsxs)("div",{className:(0,a.A)("tabs-container",b.tabList),children:[(0,j.jsx)(f,{...t,...e}),(0,j.jsx)(y,{...t,...e})]})}function C(e){const t=(0,x.A)();return(0,j.jsx)(v,{...e,children:u(e.children)},String(t))}},6776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"target-systems/couchbase-target-system","title":"Couchbase","description":"The Couchbase target system (CouchbaseTargetSystem) enables Flamingock to apply changes to Couchbase databases using the official Couchbase Java SDK. As a transactional target system, it supports automatic rollback through Couchbase\'s transaction capabilities.","source":"@site/docs/target-systems/couchbase-target-system.md","sourceDirName":"target-systems","slug":"/target-systems/couchbase-target-system","permalink":"/docs/target-systems/couchbase-target-system","draft":false,"unlisted":false,"editUrl":"https://github.com/flamingock/flamingock-java/docs/target-systems/couchbase-target-system.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Couchbase","sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"DynamoDB","permalink":"/docs/target-systems/dynamodb-target-system"},"next":{"title":"Introduction","permalink":"/docs/audit-stores/introduction"}}');var a=n(4848),r=n(8453),i=n(1470),c=n(9365);const o={title:"Couchbase",sidebar_position:6},l="Couchbase Target System",d={},u=[{value:"Version Compatibility",id:"version-compatibility",level:2},{value:"Installation",id:"installation",level:2},{value:"Basic setup",id:"basic-setup",level:2},{value:"Target System Configuration",id:"target-system-configuration",level:2},{value:"Constructor Dependencies (Mandatory)",id:"constructor-dependencies-mandatory",level:3},{value:"Dependencies Available to Changes",id:"dependencies-available-to-changes",level:2},{value:"Configuration example",id:"configuration-example",level:2},{value:"Transactional support",id:"transactional-support",level:2},{value:"Available dependencies in Changes",id:"available-dependencies-in-changes",level:2},{value:"Next steps",id:"next-steps",level:2}];function h(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"couchbase-target-system",children:"Couchbase Target System"})}),"\n",(0,a.jsxs)(t.p,{children:["The Couchbase target system (",(0,a.jsx)(t.code,{children:"CouchbaseTargetSystem"}),") enables Flamingock to apply changes to Couchbase databases using the official Couchbase Java SDK. As a transactional target system, it supports automatic rollback through Couchbase's transaction capabilities."]}),"\n",(0,a.jsx)(t.h2,{id:"version-compatibility",children:"Version Compatibility"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Component"}),(0,a.jsx)(t.th,{children:"Version Requirement"})]})}),(0,a.jsx)(t.tbody,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Couchbase Java Client"}),(0,a.jsx)(t.td,{children:"3.6.0+"})]})})]}),"\n",(0,a.jsx)(t.p,{children:"Couchbase Java Client 3.6.0+ is required and must be included in your project dependencies."}),"\n",(0,a.jsx)(t.h2,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(t.p,{children:"Add the Couchbase Java Client dependency to your project (version 3.6.0+ required):"}),"\n",(0,a.jsxs)(i.A,{groupId:"gradle_maven",children:[(0,a.jsx)(c.A,{value:"gradle",label:"Gradle",default:!0,children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-kotlin",children:'implementation("com.couchbase.client:java-client:3.6.0")\n'})})}),(0,a.jsx)(c.A,{value:"maven",label:"Maven",children:(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:"<dependency>\n    <groupId>com.couchbase.client</groupId>\n    <artifactId>java-client</artifactId>\n    <version>3.6.0</version> \x3c!-- 3.6.0+ supported --\x3e\n</dependency>\n"})})})]}),"\n",(0,a.jsx)(t.h2,{id:"basic-setup",children:"Basic setup"}),"\n",(0,a.jsx)(t.p,{children:"Configure the target system:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'var couchbaseTarget = new CouchbaseTargetSystem("user-database-id", cluster, bucket);\n'})}),"\n",(0,a.jsxs)(t.p,{children:["The constructor requires the target system name, Couchbase cluster, and bucket. Optional configurations can be added via ",(0,a.jsx)(t.code,{children:".withXXX()"})," methods."]}),"\n",(0,a.jsx)(t.admonition,{title:"Register Target System",type:"info",children:(0,a.jsxs)(t.p,{children:["Once created, you need to register this target system with Flamingock. See ",(0,a.jsx)(t.a,{href:"/docs/target-systems/introduction#registering-target-systems",children:"Registering target systems"})," for details."]})}),"\n",(0,a.jsx)(t.h2,{id:"target-system-configuration",children:"Target System Configuration"}),"\n",(0,a.jsxs)(t.p,{children:["The Couchbase target system uses Flamingock's ",(0,a.jsx)(t.a,{href:"/docs/target-systems/introduction#dependency-injection",children:"split dependency resolution architecture"})," with separate flows for target system configuration and change execution dependencies."]}),"\n",(0,a.jsx)(t.h3,{id:"constructor-dependencies-mandatory",children:"Constructor Dependencies (Mandatory)"}),"\n",(0,a.jsxs)(t.p,{children:["These dependencies must be provided at target system creation time with ",(0,a.jsx)(t.strong,{children:"no global context fallback"}),":"]}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Dependency"}),(0,a.jsx)(t.th,{children:"Constructor Parameter"}),(0,a.jsx)(t.th,{children:"Description"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"Cluster"})}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"cluster"})}),(0,a.jsxs)(t.td,{children:["Couchbase cluster connection - ",(0,a.jsx)(t.strong,{children:"required"})," for both target system configuration and change execution"]})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"Bucket"})}),(0,a.jsx)(t.td,{children:(0,a.jsx)(t.code,{children:"bucket"})}),(0,a.jsxs)(t.td,{children:["Target bucket instance - ",(0,a.jsx)(t.strong,{children:"required"})," for both target system configuration and change execution"]})]})]})]}),"\n",(0,a.jsx)(t.h2,{id:"dependencies-available-to-changes",children:"Dependencies Available to Changes"}),"\n",(0,a.jsxs)(t.p,{children:["Changes can access dependencies through ",(0,a.jsx)(t.a,{href:"/docs/changes/anatomy-and-structure#method-parameters-and-dependency-injection",children:"dependency injection with fallback"}),":"]}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Target system context"})," (highest priority) - ",(0,a.jsx)(t.code,{children:"Cluster"}),", ",(0,a.jsx)(t.code,{children:"Bucket"}),", ",(0,a.jsx)(t.code,{children:"TransactionAttemptContext"}),", plus any added via ",(0,a.jsx)(t.code,{children:".addDependency()"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Target system additional dependencies"})," - added via ",(0,a.jsx)(t.code,{children:".addDependency()"})," or ",(0,a.jsx)(t.code,{children:".setProperty()"})]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Global context"})," (fallback) - shared dependencies available to all target systems"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"configuration-example",children:"Configuration example"}),"\n",(0,a.jsx)(t.p,{children:"Here's a comprehensive example showing the new architecture:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'// Target system configuration (mandatory via constructor)\nvar couchbaseTarget = new CouchbaseTargetSystem("user-database", productionCluster, userBucket)\n    .addDependency(auditService);          // Additional dependency for changes\n\n// Global context with shared dependencies\nFlamingock.builder()\n    .addDependency(emailService)           // Available to all target systems\n    .addDependency(logService)             // Available to all target systems\n    .addTargetSystems(couchbaseTarget)\n    .build();\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"Target system configuration resolution:"})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Cluster"}),": Must be provided via constructor (",(0,a.jsx)(t.code,{children:"productionCluster"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Bucket"}),": Must be provided via constructor (",(0,a.jsx)(t.code,{children:"userBucket"}),")"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:'Change dependency resolution for Changes in "user-database":'})}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Cluster"}),": From target system context (",(0,a.jsx)(t.code,{children:"productionCluster"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Bucket"}),": From target system context (",(0,a.jsx)(t.code,{children:"userBucket"}),")"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"TransactionAttemptContext"}),": From target system context (created by Flamingock)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"AuditService"}),": From target system additional dependencies"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"EmailService"}),": From global context (fallback)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"LogService"}),": From global context (fallback)"]}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"This architecture ensures explicit target system configuration while providing flexible dependency access for changes."}),"\n",(0,a.jsx)(t.h2,{id:"transactional-support",children:"Transactional support"}),"\n",(0,a.jsxs)(t.p,{children:["For a Change to leverage Couchbase's transactional capabilities, it must use the ",(0,a.jsx)(t.code,{children:"TransactionAttemptContext"})," parameter. Flamingock uses the injected ",(0,a.jsx)(t.code,{children:"Cluster"})," and ",(0,a.jsx)(t.code,{children:"Bucket"})," dependencies to create and manage this context's lifecycle - creating the transaction context before execution, committing on success, and rolling back on failure."]}),"\n",(0,a.jsxs)(t.blockquote,{children:["\n",(0,a.jsxs)(t.p,{children:["For detailed information on transaction handling, see ",(0,a.jsx)(t.a,{href:"/docs/changes/transactions",children:"Transactions"}),"."]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@TargetSystem("user-database-id")\n@Change(id = "create-users", order = "001")\npublic class CreateUsers {\n    \n    @Apply\n    public void apply(Cluster cluster, Bucket bucket, TransactionAttemptContext txContext) {\n        // TransactionAttemptContext is required for transactional execution\n        // Flamingock uses the target system\'s Cluster and Bucket to handle transaction operations\n        // and manages transaction start, commit, and rollback automatically\n        Collection collection = bucket.defaultCollection();\n        \n        JsonObject user = JsonObject.create()\n            .put("name", "John Doe")\n            .put("email", "john@example.com");\n            \n        txContext.insert(collection, "user::001", user);\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"You can also work with the Cluster and Bucket directly without transactions:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-java",children:'@TargetSystem("user-database-id")\n@Change(id = "update-configs", order = "002")\npublic class UpdateConfigs {\n    \n    @Apply\n    public void apply(Cluster cluster, Bucket bucket) {\n        // Operations without TransactionAttemptContext won\'t participate in transactions\n        Collection collection = bucket.defaultCollection();\n        \n        JsonObject config = JsonObject.create()\n            .put("version", "2.0")\n            .put("updated", Instant.now().toString());\n            \n        collection.upsert("config::app", config);\n    }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.strong,{children:"How transactions work:"})}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Context creation"}),": Flamingock uses the target system's ",(0,a.jsx)(t.code,{children:"Cluster"})," to create an ",(0,a.jsx)(t.code,{children:"TransactionAttemptContext"})," for transaction management"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Transaction management"}),": The same ",(0,a.jsx)(t.code,{children:"Cluster"})," and ",(0,a.jsx)(t.code,{children:"Bucket"})," handle transaction operations and coordinate with the context"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.strong,{children:"Lifecycle"}),": Flamingock automatically creates the transaction context, commits on success, or rolls back on failure"]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Without the ",(0,a.jsx)(t.code,{children:"TransactionAttemptContext"})," parameter, operations will execute but won't participate in transactions."]}),"\n",(0,a.jsx)(t.h2,{id:"available-dependencies-in-changes",children:"Available dependencies in Changes"}),"\n",(0,a.jsxs)(t.p,{children:["Your Changes can inject Couchbase-specific dependencies like ",(0,a.jsx)(t.code,{children:"Cluster"}),", ",(0,a.jsx)(t.code,{children:"Bucket"}),", and ",(0,a.jsx)(t.code,{children:"TransactionAttemptContext"})," (for transactions), but are not limited to these. The target system provides these dependencies through its context, and you can add additional dependencies via ",(0,a.jsx)(t.code,{children:".addDependency()"})," that take precedence over global dependencies."]}),"\n",(0,a.jsxs)(t.p,{children:["For comprehensive details on change dependency resolution, see ",(0,a.jsx)(t.a,{href:"/docs/changes/anatomy-and-structure",children:"Change Anatomy & Structure"}),"."]}),"\n",(0,a.jsx)(t.h2,{id:"next-steps",children:"Next steps"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["Learn about ",(0,a.jsx)(t.a,{href:"/docs/target-systems/introduction",children:"Target systems"})]}),"\n",(0,a.jsxs)(t.li,{children:["Explore ",(0,a.jsx)(t.a,{href:"/docs/changes/introduction",children:"Changes"})]}),"\n",(0,a.jsxs)(t.li,{children:["See ",(0,a.jsx)(t.a,{href:"https://github.com/flamingock/flamingock-examples/tree/master/couchbase",children:"Couchbase examples"})]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var s=n(6540);const a={},r=s.createContext(a);function i(e){const t=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(r.Provider,{value:t},e.children)}},9365:(e,t,n)=>{n.d(t,{A:()=>i});n(6540);var s=n(4164);const a={tabItem:"tabItem_Ymn6"};var r=n(4848);function i({children:e,hidden:t,className:n}){return(0,r.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,n),hidden:t,children:e})}}}]);