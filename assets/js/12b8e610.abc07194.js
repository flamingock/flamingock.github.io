"use strict";(self.webpackChunkflamingock=self.webpackChunkflamingock||[]).push([[9662],{4044:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"testing/introduction","title":"Testing Flamingock","description":"Introduction","source":"@site/docs/testing/introduction.md","sourceDirName":"testing","slug":"/testing/introduction","permalink":"/testing/introduction","draft":false,"unlisted":false,"editUrl":"https://github.com/flamingock/flamingock-java/docs/testing/introduction.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"title":"Testing Flamingock","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"GraalVM","permalink":"/frameworks/graalvm"},"next":{"title":"Unit Testing","permalink":"/testing/unit-testing"}}');var o=t(4848),s=t(8453);const r={title:"Testing Flamingock",sidebar_position:1},l=void 0,c={},a=[{value:"Introduction",id:"introduction",level:2},{value:"What to test",id:"what-to-test",level:2},{value:"1. Unit test: Change logic",id:"1-unit-test-change-logic",level:3},{value:"2. Integration test: Flamingock execution",id:"2-integration-test-flamingock-execution",level:3},{value:"3. Spring Boot integration",id:"3-spring-boot-integration",level:3}];function d(n){const e={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(e.p,{children:["This section provides guidance on how to test applications that use ",(0,o.jsx)(e.strong,{children:"Flamingock"}),", including strategies for validating your change logic, ensuring proper execution coordination, and maintaining audit and rollback guarantees."]}),"\n",(0,o.jsx)(e.p,{children:"Whether you are running Flamingock in a local development environment, as part of CI pipelines, or through framework integrations like Spring Boot, testing is a key part of ensuring consistency and reliability across deployments."}),"\n",(0,o.jsx)(e.p,{children:"Flamingock is not limited to database systems \u2014 it supports a wide range of targets (e.g., message brokers, file systems, APIs). Your testing strategy should reflect the behavior of the underlying systems you integrate with."}),"\n",(0,o.jsx)(e.h2,{id:"what-to-test",children:"What to test"}),"\n",(0,o.jsxs)(e.p,{children:["There are ",(0,o.jsx)(e.strong,{children:"three primary levels"})," at which Flamingock-related functionality can be tested:"]}),"\n",(0,o.jsx)(e.h3,{id:"1-unit-test-change-logic",children:"1. Unit test: Change logic"}),"\n",(0,o.jsxs)(e.p,{children:["Isolate and test the logic inside your ",(0,o.jsx)(e.code,{children:"@Apply"})," and ",(0,o.jsx)(e.code,{children:"@Rollback"})," methods without involving Flamingock\u2019s runtime or audit mechanism."]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Use mocks for dependencies (e.g., ",(0,o.jsx)(e.code,{children:"MongoTemplate"}),", ",(0,o.jsx)(e.code,{children:"DynamoDbClient"}),", ",(0,o.jsx)(e.code,{children:"S3Client"}),")"]}),"\n",(0,o.jsx)(e.li,{children:"Focus on business correctness and expected side effects"}),"\n",(0,o.jsx)(e.li,{children:"No audit logs or locking are involved"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["\ud83d\udc49 See ",(0,o.jsx)(e.a,{href:"/testing/unit-testing",children:"Unit testing your change units"})]}),"\n",(0,o.jsx)(e.h3,{id:"2-integration-test-flamingock-execution",children:"2. Integration test: Flamingock execution"}),"\n",(0,o.jsx)(e.p,{children:"Run Flamingock end-to-end in a controlled environment to verify:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Execution of the ",(0,o.jsx)(e.code,{children:"@Apply"})," method"]}),"\n",(0,o.jsx)(e.li,{children:"Audit log persistence"}),"\n",(0,o.jsx)(e.li,{children:"Rollback behavior on failure"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["This usually requires a real or containerized backend system (e.g., using ",(0,o.jsx)(e.strong,{children:"Testcontainers"}),")."]}),"\n",(0,o.jsxs)(e.p,{children:["\ud83d\udc49 See ",(0,o.jsx)(e.a,{href:"/testing/integration-testing",children:"Integration testing Flamingock"})]}),"\n",(0,o.jsx)(e.h3,{id:"3-spring-boot-integration",children:"3. Spring Boot integration"}),"\n",(0,o.jsxs)(e.p,{children:["For applications using ",(0,o.jsx)(e.strong,{children:"Spring Boot"}),", test how Flamingock integrates with your app lifecycle:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Use ",(0,o.jsx)(e.code,{children:"@SpringBootTest"})," to validate full configuration"]}),"\n",(0,o.jsx)(e.li,{children:"Confirm that changes run on startup"}),"\n",(0,o.jsx)(e.li,{children:"Optionally inject mocks to verify execution paths"}),"\n"]}),"\n",(0,o.jsxs)(e.p,{children:["\ud83d\udc49 See ",(0,o.jsx)(e.a,{href:"/testing/springboot-integration-testing",children:"Testing with Spring Boot"})]})]})}function g(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>l});var i=t(6540);const o={},s=i.createContext(o);function r(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);