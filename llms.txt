// File: cli/cli

# CLI (Coming Soon)

Flamingock‚Äôs Command-Line Interface (CLI) will enable operational and maintenance tasks outside your application‚Äôs normal startup cycle. You‚Äôll be able to run change units, inspect or repair the audit log, and manage locks‚Äîall from a standalone command.

:::info **Status:** UNDER DEVELOPMENT
 The CLI is under development and will be released soon. This page provides a high-level overview of expected upcoming features.
:::

---

## Why a CLI?

- **Operational control**  
  Execute change units, perform dry-runs, or trigger rollbacks without launching the full application.

- **Maintenance tasks**  
  Inspect or fix inconsistencies in the audit log, manage stale locks, and run integrity checks.

- **Automation & scripting**  
  Integrate Flamingock operations into CI/CD pipelines, cron jobs, or custom scripts.

---

## Planned Features

When first released, the Flamingock CLI will support:

- **Run change units**  
  Execute any pending change units defined in your application‚Äôs code base.  
  _(Requires passing your application JAR so the CLI can load the `@ChangeUnit` classes, but only if a change unit depends on code inside that JAR.)_

- **Dry-run mode**  
  Preview which change units would run and in what order‚Äîwithout making any changes or writing to the audit store.

- **Rollback / Undo**  
  Revert one or more change units that have already executed (by specifying change ID, date, or tag).  
  _(Requires the application JAR if the change unit‚Äôs logic depends on application-specific classes.)_

- **Audit inspection**  
  List executed change units from the audit store and filter by criteria such as author, date range, or status.  
  _(Does *not* require your application JAR, since it only reads from the audit backend.)_

- **Lock management**  
  View or clear distributed locks that may have been left behind by interrupted processes.

- **Consistency checks**  
  Compare the change-unit definitions in your code against entries in the audit log to detect mismatches or missing entries.

---

## Example Usage

Below are illustrative commands using the `fcli` (Flamingock CLI) binary. If a command needs to load your change-unit classes, it must be pointed at your application JAR. Other commands (like audit inspection) work without a JAR.

```bash
# 1. Run all pending change units in 'development' profile
fcli run \
  --app-jar /path/to/your-app.jar \
  --config application.yaml \
  --profile development

# 2. Preview pending changes (no JAR required)
fcli dry-run \
  --config application.yaml \
  --profile development

# 3. Roll back a specific change by ID (requires the JAR only if rollback logic uses application classes)
fcli rollback \
  --app-jar /path/to/your-app.jar \
  --change-id 0005_add_users_table \
  --config application.yaml

# 4. List audit log entries, filter by author (no JAR required)
fcli audit-list \
  --config application.yaml \
  --filter author=dev-team

# 5. Clear any stale locks (no JAR required)
fcli clear-locks \
  --config application.yaml

--app-jar: Path to your compiled application JAR containing @ChangeUnit classes. Required only for commands that execute or roll back change units whose logic depends on code inside your application.

--config: Flamingock configuration file (e.g., application.yaml or flamingock.properties).

--profile: Spring-style profile or environment name (the CLI will pass this to Flamingock to select the right changes).

```

## Getting Started 

**Install the CLI**  
Download and install the platform-specific `fcli` binary for Linux, macOS, or Windows.

**Prepare your application JAR**  
Build your project so that all `@ChangeUnit` classes are packaged into a single runnable JAR.

**Run CLI commands**  
Use the commands shown above‚Äîsupplying `--app-jar` only when running or rolling back change units that depend on application-specific classes.

## Feedback & contributions

We welcome your feedback on the CLI design. As the CLI nears release, feel free to open issues or submit pull requests to the Flamingock CLI repository.

---

// File: cloud-edition/cloud-edition

# Cloud Edition
:::warning[**Cloud Edition Coming Soon**]
The Cloud Edition is currently under development and not yet publicly available.

**If you'd like to participate in early testing or be notified when Cloud Edition is available, email us at [support@flamingock.io](mailto:support@flamingock.io)**

üîî Stay tuned ‚Äî it‚Äôs launching very soon!


:::
Flamingock Cloud Edition is a **fully managed SaaS platform** that brings advanced features, collaboration, and visibility to your change management workflow.

While the Community Edition offers core functionality with local storage and self-managed execution, the Cloud Edition extends that with powerful enterprise-grade capabilities.

## What the Cloud Edition will offer

Once released, the Cloud Edition will enable:

- **Centralized dashboards** to track and visualize changes across services and environments
- **Built-in user and team management** with Role-Based Access Control (RBAC)
- **Cross-environment visibility** for staging, production, and everything in between
- **Advanced template and extension support** for faster integration and reuse
- **Governance, auditability, and compliance** built into every change lifecycle
- **Multi-tenant and multi-service support**, ready for real-world deployment complexity

:::note
The Cloud Edition still relies on the Flamingock client library to run within your application.  
:::

## What's coming in this section

This section will guide you through:

- How to set up your **Cloud Edition environment**
- How to configure the Flamingock **client for Cloud Edition**
- How to use the **dashboard**, explore audits, and manage services
- Best practices for working with **multi-environment** and **multi-team** setups

---

// File: community-edition/Introduction

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Community Edition
The **Community Edition** is Flamingock's free, open-source offering where you provide and manage your own database as the **audit store**‚Äîthe dedicated location where Flamingock records which changes have been executed, when, and by whom.

Unlike the Cloud Edition (which uses Flamingock's managed backend as the audit store and provides advanced features), the Community Edition requires you to set up and maintain your own audit store. This makes it suitable for getting started with Flamingock, experimenting with change-as-code concepts, or for projects that need basic change management capabilities.

The **audit store** is separate from your **target systems** (the resources your ChangeUnits modify). For example, you might use MongoDB as your audit store while your ChangeUnits create S3 buckets, update Kafka topics, or modify database schemas. As the Cloud Edition, the Community edition provides transactional consistency guarantees to ensure changes and audit records remain synchronized.

To learn more about the distinction between audit stores and target systems, see [Audit Store vs. Target System](../overview/audit-store-vs-target-system.md).

The Community Edition supports several database technologies for your audit store: **MongoDB**, **DynamoDB**, **CosmosDB**, and **Couchbase**. Each provides the same core Flamingock functionality while premium features are available in the Cloud and Self-hosted editions.

## Available editions

Below is a summary of the available editions in the Flamingock Community Edition:

| Edition   | Database         | Supported Versions | Transactions | Locking Support | Notes                                                                                                                      |
|-----------|------------------|--------------------|--------------|-----------------|----------------------------------------------------------------------------------------------------------------------------|
| MongoDB   | MongoDB          | >=4.0              | ‚úÖ Yes        | ‚úÖ Yes           | Flamingock provides support for both low-level native drivers and high-level abstractions through Spring Data integration. |
| DynamoDB  | AWS DynamoDB     | >=2.25.29          | ‚úÖ Yes        | ‚úÖ Yes           |                                                                                                                            |
| CosmosDB  | Azure Cosmos DB  | Mongo API 3.6/4.0  | ‚úÖ Yes        | ‚úÖ Yes           |                                                                                                                            |
| Couchbase | Couchbase Server | >=3.4.3            | ‚ùå No         | ‚úÖ Yes           |                                                                                                                            |

---
## Features
Community editions support the core Flamingock feature set, including:

- Ordered and versioned change execution
- Support for concurrent, distributed deployments
- Optional transactional execution (if supported by the MongoDB server)

:::info
It includes limited access to premium features, which are fully available in the Cloud and Self-Hosted editions.
:::

---

Each edition has its own documentation page with setup instructions, configuration parameters, and usage examples. Use the sidebar or links below to navigate to a specific edition.

---

// File: community-edition/ce-mongodb-java-driver

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

## Introduction

This section explains how to configure and use the **Flamingock Community Edition for MongoDB** in applications that interact directly with MongoDB using the **official Java driver** (`mongodb-driver-sync`).

This edition is designed for use cases where the application provides its own MongoDB connection via `MongoClient`, and Flamingock operates directly over that connection to manage changes. It does not rely on any external framework or abstraction layer.

Flamingock persists a minimal set of metadata in your MongoDB database to support its execution model:

- **Audit logs** ‚Äì to track which changes have been executed  
- **Distributed locks** ‚Äì to ensure safe and coordinated execution across multiple application instances

It is particularly suited to teams working in **framework-agnostic** or low-level environments, where integration is done directly at the driver level, and fine-grained control over MongoDB configuration is required.

Flamingock supports `mongodb-driver-sync` versions from **4.0.0 up to 5.x.x**.

---

## Supported versions

| Flamingock Module                 | MongoDB Driver                   | MongoDB Compatibility       |
|----------------------------------|----------------------------------|-----------------------------|
| `flamingock-ce-mongodb-sync`     | `org.mongodb:mongodb-driver-sync` (4.0.0 - 5.x.x) | MongoDB 3.x to 5.x           |

---

## Get started

To get started with the Flamingock Community Edition for MongoDB, follow these basic steps:

### 1. Add the required dependencies

You must include the **Flamingock MongoDB sync edition** and a compatible **MongoDB Java driver** in your project.

<Tabs groupId="build_tool">

<TabItem value="gradle" label="Gradle">

```kotlin
// MongoDB v4
implementation(platform("io.flamingock:flamingock-ce-bom:$flamingockVersion"))
implementation("io.flamingock:flamingock-ce-mongodb-sync")
implementation("org.mongodb:mongodb-driver-sync:4.x.x")
```

</TabItem> <TabItem value="maven" label="Maven">

```xml
<dependency>
  <groupId>io.flamingock</groupId>
  <artifactId>flamingock-ce-mongodb-sync</artifactId>
  <version>${flamingock.version}</version>
</dependency>
<dependency>
  <groupId>org.mongodb</groupId>
  <artifactId>mongodb-driver-sync</artifactId>
  <version>5.5.1</version> <!-- or any version between 4.0.0 and 5.x.x -->
</dependency>
```

</TabItem> </Tabs>

### 2. Enable Flamingock runner

At minimum, you must provide:
- A MongoDatabase (as a **dependency**)
- A MongoClient instance (as a **dependency**)

```java
MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
MongoDatabase mongoDatabase = mongoClient.getDatabase("YOUR_DATABASE");

Runner runner = Flamingock.builder()
          .addDependency(mongoDatabase)
          .addDependency(mongoClient)
          // other optional configurations
          .build();
```
For production, we strongly recommend using the default MongoDB configuration values unless you fully understand the implications.
### 3. Execute Flamingock
Once the Flamingock runner is configured and built, you can trigger Flamingock‚Äôs execution:
```java
runner.execute();
```

---

## Configuration overview

Flamingock requires both dependencies and configuration properties, set via the builder.

### Dependencies

| Type                               | Required | Description                                   |
|------------------------------------|:--------:|-----------------------------------------------|
| `com.mongodb.client.MongoDatabase` |   Yes    | Required to connect to your MongoDB database. |
| `com.mongodb.client.MongoClient`   |   Yes    | Required for transactional support.           |

### Properties

These must be set using `.setProperty(...)`

| Property                         | Type                   | Default Value                  | Required | Description                                                                                                           |
|----------------------------------|------------------------|--------------------------------|:--------:|-----------------------------------------------------------------------------------------------------------------------|
| `mongodb.autoCreate`             | `boolean`              | `true`                         |    No    | Whether Flamingock should automatically create required collections and indexes.                                      |
| `mongodb.readConcern`            | `String`               | `"MAJORITY"`                   |    No    | Controls the isolation level for read operations.                                                                     |
| `mongodb. writeConcern.w`        | `String or int`        | `"MAJORITY"`                   |    No    | Write acknowledgment level. Specifies how many MongoDB nodes must confirm the write for it to succeed.                |
| `mongodb. writeConcern.journal`  | `boolean`              | `true`                         |    No    | Whether the write must be committed to the journal before acknowledgment.                                             |
| `mongodb. writeConcern.wTimeout` | `Duration`             | `Duration .ofSeconds(1)`       |    No    | Maximum time to wait for the write concern to be fulfilled.                                                           |
| `mongodb. readPreference`        | `ReadPreference Level` | `ReadPreferenceLevel .PRIMARY` |    No    | Defines which MongoDB node to read from.                                                                              |
| `mongodb. auditRepositoryName`   | `String`               | `"flamingockAuditLogs"`        |    No    | Name of the collection for storing the audit log. Overrides the default. Most users should keep the default value.    |
| `mongodb. lockRepositoryName`    | `String`               | `"flamingockLock"`             |    No    | Name of the collection used for distributed locking. Overrides the default. Most users should keep the default value. |

:::warning
We strongly recommend keeping the default configuration values in production environments. They are optimized for **consistency, durability, and safety**, ensuring Flamingock‚Äôs audit and rollback guarantees.
:::
Overriding them is only appropriate in limited cases (e.g., testing or local development). If you choose to modify these settings, you assume full responsibility for maintaining the integrity and consistency of your system.

### Full configuration example
The following example shows how to configure Flamingock with both required and optional properties. It demonstrates how to override  index creation, and read/write behaviour. This level of configuration is useful when you need to customise Flamingock's behaviour to match the consistency and durability requirements of your deployment.

```java
MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
MongoDatabase mongoDatabase = mongoClient.getDatabase("YOUR_DATABASE");

FlamingockBuilder builder = Flamingock.builder()
          .addDependency(mongoDatabase)
          .addDependency(mongoClient)
          .setProperty("mongodb.autoCreate", true)
          .setProperty("mongodb.readConcern", "MAJORITY")
          .setProperty("mongodb.writeConcern.w", "MAJORITY")
          .setProperty("mongodb.writeConcern.journal", true)
          .setProperty("mongodb.writeConcern.wTimeout", Duration.ofSeconds(1))
          .setProperty("mongodb.readPreference", ReadPreferenceLevel.PRIMARY");
```

---

## Transaction support

Flamingock supports transactions via `ClientSession` when used with a compatible MongoDB deployment. Simply include it as a parameter in your change unit:

```java
@Execution
public void execute(ClientSession session, MongoDatabase db) {
  db.getCollection("clients")
    .insertOne(session, new Document("name", "test"));
}
```
The session lifecycle is managed automatically by Flamingock.  If you omit the ClientSession parameter, the change will still execute, but it won't participate in a transaction.

> See the [Transactions](../flamingock-library-config/transactions.md) page for guidance on when and how to disable transactions (e.g., `transactional = false`).

---

## Examples

You can find practical examples in the official GitHub repository:  
üëâ [Flamingock MongoDB example](https://github.com/flamingock/flamingock-examples/tree/master/mongodb)

---

## ‚úÖ Best practices

- **Use Flamingock‚Äôs default consistency settings (`writeConcern`, `readConcern`, `readPreference`) in production**  
  These values guarantee strong consistency, durability, and fault tolerance. Overriding them is discouraged unless absolutely necessary.

- **Use the default collection names (`flamingockAuditLogs`, `flamingockLock`)**  
  These help avoid collisions and simplify debugging.

- **Enable automatic index creation unless your environment prohibits it**  
  This ensures that Flamingock can enforce audit and locking guarantees. If disabled, manage indexes manually.

- **Ensure your MongoDB Java driver version is between 4.0.0 and 5.x.x**  
  This range is tested and supported by Flamingock.

---

// File: community-edition/ce-mongodb-springdata

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

## Introduction

This section explains how to use the **Flamingock Community Edition for MongoDB** in applications that rely on **Spring Data MongoDB**.

This edition is designed for teams that already use Spring Data to manage their database access and want to include Flamingock as part of their change tracking and execution model. It integrates with **Spring Boot** and **MongoTemplate**, handling auditing, distributed locking, and transactional coordination.

Flamingock persists a minimal set of metadata in your MongoDB database:

- **Audit logs** ‚Äî track which changes have been applied
- **Distributed locks** ‚Äî prevent concurrent modifications in distributed deployments

---

## Editions

Flamingock provides two editions for Spring Data.

### Why are there two MongoDB Spring Data Community-Edition artifacts?

The only difference is the Java version they target:

- `flamingock-ce-mongodb-springdata` ‚Äî built for the current Spring Data MongoDB 4.x line, which itself requires JDK 17 or newer.
- `flamingock-ce-mongodb-springdata-v3-legacy` ‚Äî kept for teams still on Spring Data 3.x (Spring Boot 2) who must stay on JDK 8 ‚Äì 11.

Choose the artifact that matches the JDK level of your application today; switching later is as simple as changing the dependency.

| Edition Name                                  | Spring Data Version       |
|-----------------------------------------------|---------------------------|
| `flamingock-ce-mongodb-springdata-v3-legacy`  | [3.1.4, 4.0.0)            |
| `flamingock-ce-mongodb-springdata`            | [4.0.0, 5.0.0)            |


---

## Get Started

If you're using **Spring Boot**, the recommended approach is the **automatic setup** with `@EnableFlamingock`.

By annotating your main class with `@EnableFlamingock`, Flamingock will:

- Automatically detect and inject Spring components (`ApplicationContext`, `ApplicationEventPublisher`, etc.)
- Pick up configuration from the native Spring Boot config file
- Create and register a runner bean (either `ApplicationRunner` or `InitializingBean`)
- Process the setup configuration from the annotation

### 1. Add the required dependencies

<Tabs groupId="build_enable">
<TabItem value="gradle" label="Gradle">

```kotlin
implementation(platform("io.flamingock:flamingock-ce-bom:$flamingockVersion"))
implementation("io.flamingock:flamingock-ce-mongodb-springdata")
```

</TabItem>
<TabItem value="maven" label="Maven">

```xml
<dependency>
  <groupId>io.flamingock</groupId>
  <artifactId>flamingock-ce-mongodb-springdata</artifactId>
  <version>${flamingock.version}</version>
</dependency>
<dependency>
  <groupId>io.flamingock</groupId>
  <artifactId>springboot-integration-v3</artifactId>
  <version>${flamingock.version}</version>
</dependency>
```

</TabItem>
</Tabs>

:::info Legacy Support
If your project uses **Spring Data 3.x** and **Spring Boot 2.x**, use the `flamingock-ce-mongodb-springdata-v3-legacy` edition instead.
:::

### 2. Configure setup and enable Flamingock runner
Choose one of the following options based on your preferred integration style:
- **Automatic setup** (recommended): Annotate your main class with `@EnableFlamingock`
- **Manual builder-based setup**: Use `@EnableFlamingock` with `setup = SetupType.BUILDER` and manually register the Flamingock runner bean

<Tabs groupId="automatic_builder">
<TabItem value="automatic" label="Automatic">

```java
@EnableFlamingock(
    stages = {
        @Stage(location = "com.yourapp.changes")
    }
)
@SpringBootApplication
public class MyApp {
  public static void main(String[] args) {
    SpringApplication.run(MyApp.class, args);
  }
}
```

</TabItem>
<TabItem value="builder" label="Builder">

```java
@EnableFlamingock(
    setup = SetupType.BUILDER,
    stages = {
        @Stage(location = "com.yourapp.changes")
    }
)
@Configuration
public class FlamingockConfig {

    @Bean
    public ApplicationRunner flamingockRunner(ApplicationContext context,
                                               ApplicationEventPublisher publisher,
                                               MongoTemplate template) {
        FlamingockBuilder builder = Flamingock.builder()
            .addDependency(context)
            .addDependency(publisher)
            .addDependency(template)
            .setProperty("mongodb.databaseName", "flamingock-db");
        return SpringbootUtil.toApplicationRunner(builder.build());
    }
}
```

</TabItem>
</Tabs>

---

## Configuration overview

Flamingock‚Äôs MongoDB Spring Data edition requires two types of inputs:
- **Dependencies**: These are required runtime components, such as `MongoTemplate`
- **Properties**: These configure Flamingock‚Äôs internal behavior and are typically declared in the Spring configuration file or via the builder.

### Dependencies

These must be available in the Spring context (when using automatic setup with `@Flamingock`) or registered via `.addDependency(...)` when using the builder setup.

| Type                                                    | Required | Notes                                                                                                              |
|---------------------------------------------------------|:--------:|--------------------------------------------------------------------------------------------------------------------|
| `org.springframework.data.mongodb.core.MongoTemplate`   |   Yes    | Must be declared as a Spring bean.                                                                                 |
| `org.springframework.context.ApplicationContext`        |   Yes    | Auto-injected by Spring Boot.                                                                                      |
| `org.springframework.context.ApplicationEventPublisher` |   Yes    | Auto-injected by Spring Boot.                                                                                      |

:::info
Spring Boot will typically auto-configure `MongoTemplate` for you.
:::

### Properties

| Property                         | Type                   | Default Value                  | Required | Description                                                                                     |
|----------------------------------|------------------------|--------------------------------|:--------:|-------------------------------------------------------------------------------------------------|
| `mongodb.autoCreate`             | `boolean`              | `true`                         |    No    | Whether Flamingock should automatically create required collections and indexes.                |
| `mongodb.readConcern`            | `String`               | `"MAJORITY"`                   |    No    | Controls the level of isolation for read operations.                                            |
| `mongodb. writeConcern.w`        | `String or int`        | `"MAJORITY"`                   |    No    | Write acknowledgment. Specifies how many MongoDB nodes must confirm the write.                  |
| `mongodb. writeConcern.journal`  | `boolean`              | `true`                         |    No    | Whether the write must be written to the on-disk journal before acknowledgment.                 |
| `mongodb. writeConcern.wTimeout` | `Duration`             | `Duration. ofSeconds(1)`       |    No    | Maximum time to wait for the write concern to be fulfilled.                                     |
| `mongodb. readPreference`        | `ReadPreference Level` | `ReadPreferenceLevel. PRIMARY` |    No    | Specifies which MongoDB node to read from.                                                      |
| `mongodb. auditRepositoryName`   | `String`               | `"flamingockAuditLogs"`        |    No    | Name of the collection used to store applied changes. Most users should keep the default value. |
| `mongodb. lockRepositoryName`    | `String`               | `"flamingockLock"`             |    No    | Name of the collection used for distributed locking. Most users should keep the default value.  |                                                    |

:::warning
It's **strongly recommended keeping the default MongoDB configuration values provided by Flamingock** ‚Äî especially in production environments. These defaults are carefully chosen to guarantee **maximum consistency, durability, and safety**, which are fundamental to Flamingock‚Äôs audit and rollback guarantees.
:::
Overriding them is only appropriate in limited cases (e.g., testing or local development). If you choose to modify these settings, you assume full responsibility for maintaining the integrity and consistency of your system.

---

### Full configuration example
The following example shows how to configure Flamingock with both required and optional properties. It demonstrates how to override index creation, and read/write behaviour. This level of configuration is useful when you need to customise Flamingock's behaviour to match the consistency and durability requirements of your deployment.

<Tabs groupId="automatic_builder">
<TabItem value="automatic" label="Automatic">

```yaml
flamingock:
  mongodb:
    databaseName: flamingock-db
    autoCreate: true
    readConcern: MAJORITY
    writeConcern:
      w: MAJORITY
      journal: true
      wTimeout: 1s
    readPreference: PRIMARY
```

</TabItem>
<TabItem value="builder" label="Builder">

```java
FlamingockBuilder builder = Flamingock.builder()
    .addDependency(applicationContext)
    .addDependency(applicationEventPublisher)
    .addDependency(mongoTemplate)
    .setProperty("mongodb.databaseName", "flamingock-db")
    .setProperty("mongodb.autoCreate", true)
    .setProperty("mongodb.readConcern", "MAJORITY")
    .setProperty("mongodb.writeConcern.w", "MAJORITY")
    .setProperty("mongodb.writeConcern.journal", true)
    .setProperty("mongodb.writeConcern.wTimeout", Duration.ofSeconds(1))
    .setProperty("mongodb.readPreference", ReadPreferenceLevel.PRIMARY);
```

</TabItem>
</Tabs>

---

## Transaction support

If your MongoDB deployment supports transactions, Flamingock can execute Spring Data operations within a transactional session ‚Äî **as long as the underlying MongoDB driver and Spring Data version allow it**.

To benefit from transactional execution, simply declare your `@Execution` method to receive a `MongoTemplate`:

```java
@Execution
public void change(MongoTemplate mongoTemplate) {
    // This will run inside a transaction
}
```
Internally, Flamingock will manage the transaction lifecycle and ensure all operations performed through `MongoTemplate` are part of a single, atomic transaction. If anything fails, the changes and the audit log will be rolled back.

There is no need to manually manage a `ClientSession` when using Spring Data.
Flamingock integrates with Spring‚Äôs transaction management infrastructure to coordinate the session for you.

> See the [Transactions](../flamingock-library-config/transactions.md) page for general behavior and when to use `transactional = false`.
---

## Examples

You can find practical examples in the official GitHub repository:  
üëâ [github.com/flamingock/flamingock-examples/mongodb](https://github.com/flamingock/flamingock-examples/mongodb)

---

## ‚úÖ Best practices

- **Use Flamingock‚Äôs default consistency settings (`writeConcern`, `readConcern`, `readPreference`) in production**  
  These defaults are **strictly selected to guarantee strong consistency, durability, and fault-tolerance**, which are fundamental to Flamingock‚Äôs execution guarantees.  
  Overriding them is **strongly discouraged in production environments**, as it can compromise the integrity of audit logs and distributed coordination.

- **Use the default repository names (`flamingockAuditLogs`, `flamingockLock`) unless you have a strong reason to change them**  
  The default names are chosen to avoid collisions and clearly identify Flamingock-managed collections. Overriding them is supported but rarely necessary.

- **Keep `indexCreation` enabled unless your deployment restricts index creation at runtime**  
  This setting ensures that Flamingock creates and maintains the required indexes to enforce audit integrity and locking guarantees.  
  Disable this only if your application does not have the necessary permissions to create indexes ‚Äî and only if you manage the required indexes manually.
- **Always match the edition to your Spring Data / MongoDB driver version**

---

// File: community-edition/ce-dynamodb

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

## Introduction

This section explains how to configure and use the **Flamingock Community Edition for DynamoDB** in applications that interact with Amazon DynamoDB using the **official AWS SDK for Java**.

This edition is designed for use cases where the application provides its own DynamoDB client via `DynamoDbClient`, and Flamingock operates directly over that connection to manage changes. It does not require any framework-level integration.

Flamingock persists a minimal set of metadata in your DynamoDB tables to support its execution model:

- **Audit records** ‚Äì to track which changes have been applied  
- **Distributed locks** ‚Äì to coordinate executions across multiple instances

---

## Edition

This is a single edition for DynamoDB, provided as a standalone artifact.

| Edition Name             | Java Client                       | DynamoDB Compatibility |
|--------------------------|-----------------------------------|:----------------------:|
| `flamingock-ce-dynamodb` | `software.amazon.awssdk:dynamodb` |      >= `2.25.29`      |

---

## Get started

To get started with the Flamingock Community Edition for DynamoDB, follow these steps:

---

### 1. Add the required dependencies

You must include both the **Flamingock DynamoDB edition** and the **AWS SDK v2 for DynamoDB** in your project.

<Tabs groupId="build_tool">

<TabItem value="gradle" label="Gradle">

```kotlin
implementation(platform("io.flamingock:flamingock-ce-bom:$flamingockVersion"))
implementation("io.flamingock:flamingock-ce-dynamodb")
implementation("software.amazon.awssdk:dynamodb-enhanced:2.x.x")
implementation("software.amazon.awssdk:url-connection-client:2.x.x")
```

</TabItem> <TabItem value="maven" label="Maven">

```xml
<dependency>
  <groupId>io.flamingock</groupId>
  <artifactId>flamingock-ce-dynamodb</artifactId>
  <version>${flamingock.version}</version>
</dependency>
<dependency>
  <groupId>software.amazon.awssdk</groupId>
  <artifactId>dynamodb-enhanced</artifactId>
  <version>2.x.x</version>
</dependency>
<dependency>
  <groupId>software.amazon.awssdk</groupId>
  <artifactId>url-connection-client</artifactId>
  <version>2.x.x</version>
</dependency>
```

</TabItem> </Tabs>

---

### 2. Enable Flamingock runner

At minimum, you must provide a `DynamoDbClient` instance (as a **dependency**)
```java 
DynamoDbClient dynamoClient = DynamoDbClient.builder()
        .region(Region.US_EAST_1)
        .build();

Runner runner = Flamingock.builder()
        .addDependency(dynamoClient)
        .build();

```

### 3. Execute Flamingock
Once the Flamingock runner is configured and built, you can trigger Flamingock‚Äôs execution:

```java
runner.execute();
```


---
## Configuration overview

Flamingock‚Äôs DynamoDB Community Edition requires both:
- A `DynamoDbClient` dependency
- A set of configuration properties

### Dependencies

These must be registered using `.addDependency(...)`

| Type                                                      | Required | Description                                    |
|-----------------------------------------------------------|:--------:|------------------------------------------------|
| `software.amazon.awssdk.services.dynamodb.DynamoDbClient` |   Yes    | Required to access and modify DynamoDB tables. |

### Properties

These must be set using `.setProperty(...)`

| Property                        | Type      | Required | Default Value         | Description                                                                  |
|---------------------------------|-----------|:--------:|-----------------------|------------------------------------------------------------------------------|
| `dynamodb. readCapacityUnits`   | `Long`    |    No    | `5L`                  | Read capacity units (for **PROVISIONED** billing mode only).                 |
| `dynamodb. writeCapacityUnits`  | `Long`    |    No    | `5L`                  | Write capacity units (for **PROVISIONED** billing mode only).                |
| `dynamodb.autoCreate`           | `Boolean` |    No    | `true`                | Automatically creates the required tables if they do not exist.              |
| `dynamodb. auditRepositoryName` | `String`  |    No    | `flamingockAuditLogs` | Table used to store audit records. Most users should keep the default name.  |
| `dynamodb. lockRepositoryName`  | `String`  |    No    | `flamingockLock`      | Table used for distributed locking. Most users should keep the default name. |

:::warning
In production environments, we strongly recommend keeping the default configuration values unless you fully understand the implications.  
These defaults ensure consistency, safety, and compatibility with Flamingock‚Äôs locking and audit mechanisms.
:::




---


## Full configuration example
The following example shows how to configure Flamingock with both required and optional properties. 
It demonstrates how to override index creation, and read/write behaviour. 
This level of configuration is useful when you need to customise Flamingock's behaviour to match the consistency and 
durability requirements of your deployment.
```java
DynamoDbClient dynamoClient = DynamoDbClient.builder()
        .region(Region.US_EAST_1)
        .build();

FlamingockBuilder builder = Flamingock.builder()
        .addDependency(dynamoClient)
        .setProperty("autoCreate", true)
        .setProperty("readCapacityUnits", 5L)
        .setProperty("writeCapacityUnits", 5L);

```


---

## Transaction support


Flamingock supports transactional execution on DynamoDB using the enhanced client‚Äôs `TransactWriteItemsEnhancedRequest.Builder`.

If a change unit is marked as transactional (which is the default), Flamingock will:

- Create a **fresh transactional builder** (`TransactWriteItemsEnhancedRequest.Builder`) for that change
- Inject it into the `@Execution` method
- Execute the transaction **only if the change completes successfully** ‚Äî including Flamingock‚Äôs internal audit write as part of the same transaction

This ensures **atomicity**: either all operations defined in the change unit ‚Äî including the audit log ‚Äî are applied together, or none are.

:::warning
If you mark a change unit as transactional but do **not** add any operations to the builder, Flamingock will still execute the transaction ‚Äî but it will contain **only the audit log entry**.

Make sure your change unit populates the `TransactWriteItemsEnhancedRequest.Builder` appropriately.
:::

> See the [Transactions](../flamingock-library-config/transactions.md) page for general guidance and best practices around transactional vs non-transactional change units.



### Example

```java
@Execution
public void execute(@NonLockGuarded DynamoDbClient client,
                    TransactWriteItemsEnhancedRequest.Builder builder) {

  DynamoDbEnhancedClient enhancedClient = DynamoDbEnhancedClient.builder()
      .dynamoDbClient(client)
      .build();

  DynamoDbTable<UserEntity> table = enhancedClient.table("users", TableSchema.fromBean(UserEntity.class));

  builder.addPutItem(table, new UserEntity("Alice", "Anderson"));
  builder.addPutItem(table, new UserEntity("Bob", "Bennett"));
}

```

:::tip
You can add as many operations as needed to the builder: `putItem`, `updateItem`, `deleteItem`, etc.  
These operations will be executed **in a single atomic transaction**, together with Flamingock‚Äôs internal audit log update.
:::

You can find more practical examples in the official GitHub repository:  
üëâ [Flamingock DynamoDB example](https://github.com/flamingock/flamingock-examples/tree/master/dynamodb)




---

---

// File: community-edition/ce-couchbase

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

## Introduction

This section explains how to configure and use the **Flamingock Community Edition for Couchbase** in applications that interact directly with Couchbase using the **official Couchbase Java SDK**.

This edition is intended for scenarios where your application provides a `Cluster` instance and its associated connection. Flamingock will work directly on this connection to track and execute database changes. It does not rely on any framework abstraction or integration.

Flamingock persists a small set of metadata documents in Couchbase to support its execution model:

- **Audit logs** ‚Äì to track the execution history of each change
- **Distributed locks** ‚Äì to coordinate execution across multiple application nodes

---

## Edition

This edition supports Couchbase through a dedicated artifact:

| Edition Name              | Java SDK                           | Couchbase Compatibility |
|---------------------------|------------------------------------|-------------------------|
| `flamingock-ce-couchbase` | `com.couchbase.client:java-client` | >= `3.4.3`              |

---

## Get started

To get started with the Flamingock Community Edition for Couchbase, follow these steps:

### 1. Add the required dependencies

<Tabs groupId="build_tool">

<TabItem value="gradle" label="Gradle">

```kotlin
implementation(platform("io.flamingock:flamingock-ce-bom:$flamingockVersion"))
implementation("io.flamingock:flamingock-ce-couchbase")
implementation("com.couchbase.client:java-client:3.x.x")
```

</TabItem> <TabItem value="maven" label="Maven">

```xml
<dependency>
  <groupId>io.flamingock</groupId>
  <artifactId>flamingock-ce-couchbase</artifactId>
  <version>${flamingock.version}</version>
</dependency>
<dependency>
  <groupId>com.couchbase.client</groupId>
  <artifactId>java-client</artifactId>
  <version>3.x.x</version>
</dependency>
```

</TabItem> </Tabs>

---

### 2. Enable Flamingock runner

At minimum, you must provide a `Cluster` instance (as a **dependency**):

```java
Cluster cluster = Cluster.connect("localhost", "username", "password");

Runner runner = Flamingock.builder()
    .addDependency(cluster)
    .build();
```

### 3. Execute Flamingock

Once the Flamingock runner is configured and built, you can trigger Flamingock‚Äôs execution:

```java
runner.execute();
```

---

## Configuration overview

Flamingock‚Äôs Couchbase Community Edition requires both:

- A `Cluster` dependency
- A set of configuration properties

### Dependencies

These must be registered using `.addDependency(...)`

| Type                                | Required | Description                                        |
|-------------------------------------|:--------:|----------------------------------------------------|
| `com.couchbase.client.java.Cluster` |   Yes    | Required to connect and execute against Couchbase. |

### Properties

These must be set using `.setProperty(...)`

| Property      | Type      | Required | Default Value | Description                                                              |
|---------------|-----------|:--------:|---------------|--------------------------------------------------------------------------|
| `autoCreate`  | `boolean` |    No    | `true`        | Whether Flamingock should auto-create required buckets and indexes.      |

:::warning
In production environments, we strongly recommend keeping the default configuration values unless you fully understand the implications.  
These defaults ensure consistency, safety, and compatibility with Flamingock‚Äôs locking and audit mechanisms.
:::

---

## Full configuration example

The following example shows how to configure Flamingock with both required and optional properties. It demonstrates how to override `autoCreate`, which can be useful in lower environments or when managing schema manually.

```java
Cluster cluster = Cluster.connect("localhost", "username", "password");

FlamingockBuilder builder = Flamingock.builder()
    // mandatory dependency
    .addDependency(cluster)
    // optional configuration
    .setProperty("autoCreate", true);
```

> You can add additional dependencies and properties based on your custom setup (e.g., metrics, listeners, or cloud-specific settings).

---

## Transaction support

> ‚ö†Ô∏è Couchbase transactions are not currently managed automatically by Flamingock.  
> However, Flamingock guarantees safe, idempotent changes through internal locking, auditing, and execution guarantees.


You can find some practical examples in the official GitHub repository:  
üëâ [Flamingock Couchbase example](https://github.com/flamingock/flamingock-examples/tree/master/couchbase)

---

// File: flamingock-library-config/introduction

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Flamingock library configuration

Flamingock provides flexible configuration options to support a variety of environments and workflows ‚Äî from local setups to cloud-native distributed systems.

Configuration is divided into two distinct scopes:

- **Setup configuration** defines how Flamingock discovers and organizes change units. This is configured using the `@Flamingock` annotation.

- **Runtime configuration** includes optional parameters such as locking, metadata, author, etc., and can be provided via builder or (depending on the environment) a file.

---

## What you can configure

| Area                             | Description                                         |
|----------------------------------|-----------------------------------------------------|
| Setup & Stages                   | Organize changes into ordered stages                |
| ChangeUnits dependency injection | Dependency injection to changeUnits and environment |
| Platform component injection     | Platform-level components injection                 |
| Lock                             | Distributed locking and timing options              |
| Extra                            | Metadata, default author, enable/disable            |
| Cloud Edition                    | Cloud-specific setup: token, env, service           |
| Community Edition                | Driver-specific config for MongoDB, DynamoDB...     |


Each of these topics is explained in its own section.

---

## Configuration scopes and layers

Flamingock configuration is organized in two main scopes:
### Core configuration (shared by all editions)
Includes:
- Setup and stages definition
- Lock settings
- Metadata
- Default author
- Enable/disable flag
- Dependency injection via addDependency(...) for ChangeUnits and framework components
- etc.

### Edition-specific configuration
Based on the edition of Flamingock you import:
- **Cloud Edition**: Related settings to configure Flamingock Cloud.
- **Community Edition**: MongoDB, DynamoDB, Couchbase drivers and related settings.

Each of these can be used in two runtime environments:
- **Standalone** (default) ‚Äî direct usage with builder (file-based config will be supported soon)
- **Spring Boot** ‚Äî supports both setups; builder and integration with Spring‚Äôs lifecycle and properties (covered in a separate section)

---

## Setup and stages configuration

Stages are configured using the `@EnableFlamingock` annotation on any class in your application:

```java
@EnableFlamingock(
    stages = {
        @Stage(location = "com.yourapp.changes")
    }
)
public class FlamingockConfig {
    // Configuration class
}
```

Alternatively, you can use a dedicated file by specifying `pipelineFile` in the annotation:
```java
@EnableFlamingock(pipelineFile = "config/pipeline.yaml")
public class FlamingockConfig {}
```

The annotation should contain **only** the pipeline and stage definitions ‚Äî no runtime configuration should be placed here.

:::info
- The `@EnableFlamingock` annotation is required for all runners and all environments.
- The pipeline definition should remain the same across environments.
- To conditionally include or exclude changes, Flamingock supports [profiles](../frameworks/springboot-integration/profiles.md).
- Profile support for stages is planned but not yet available.
:::

See the [Pipeline & stages](setup-and-stages.md) page for full details and examples.


---

## Applying runtime configuration
Runtime configuration (everything except the pipeline) can be applied in the following ways:

| Runtime environment |  Builder  |         File          |
|---------------------|:---------:|:---------------------:|
| Standalone          |     ‚úÖ     |    ‚ùå (coming soon)    |
| Springboot          |     ‚úÖ     |  ‚úÖ(framework native)  |

:::info
You can combine both approaches. If a property is defined in both, the builder value takes precedence.
:::

---

## Next steps

Explore the rest of the configuration section to tune Flamingock for your system:

### Shared configuration
- [Setup & Stages](./setup-and-stages.md)
- [Lock Configuration](./lock-configuration.md)
- [Extra Configuration](./extra-configuration.md)
- [Dependency wiring](./changeunit-dependency-injection.md)

### Pick an edition
- [‚òÅÔ∏è Cloud Edition(Fully-featured)](../cloud-edition/cloud-edition.md)
- üß™ Community Edition(feature-limited)

---

// File: flamingock-library-config/setup-and-stages

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';


# Setup & Stages

The Flamingock **setup** organizes and executes your changes using **stages**. By default, you'll use a single stage that groups all your changes and executes them sequentially.

Changes within a stage are executed sequentially with order guaranteed. However, execution order between stages is not guaranteed - Flamingock handles system and legacy stages appropriately to ensure correctness.

---

## Setup configuration

Flamingock is configured using the `@EnableFlamingock` annotation on any class in your application. This annotation is required for all environments ‚Äî whether you're using the standalone runner or Spring Boot integration.

The annotation is **only** used for defining the setup (stages and their sources). No runtime configuration should be placed here.

---

## Defining the setup

Here's the default single-stage configuration:

```java
@EnableFlamingock(
    stages = {
        @Stage(location = "com.yourcompany.changes")
    }
)
public class FlamingockConfig {
    // Configuration class
}
```

Alternatively, using a YAML file:

```java
@EnableFlamingock(pipelineFile = "config/setup.yaml")
public class FlamingockConfig {}
```

Where `config/setup.yaml` contains:
```yaml
pipeline:
  stages:
    - name: main
      location: com.yourcompany.changes
```

:::info Advanced options:
- **Multiple stages**: For complex scenarios requiring independent change sets go to the [stage section below](#multiple-stages-advanced)
- **File-based configuration**: Use `pipelineFile` parameter for YAML configuration
- **Explicit naming**: Use `@Stage(name = "custom", location = "com.yourcompany.changes")`
:::

---

## Stage Types

Flamingock supports two families of stages:

### Standard Stages (default)
The default stage type where users place their changes. This is where you'll put all your application changes (Kafka, MongoDB, SQL, S3, etc.). Standard stages execute changeUnits in order and provide predictable, sequential execution.

```java
@EnableFlamingock(
    stages = {
        @Stage(location = "com.yourcompany.changes")  // Standard stage (default type)
    }
)
```

### Special Stages
For specific scenarios, Flamingock provides special stage types that require explicitly specifying a `type` parameter. Examples include `SYSTEM` and `LEGACY` stage types, which are used in particular contexts such as the Mongock upgrade process.

```java
@EnableFlamingock(
        stages = {
                @Stage(type = SYSTEM, location = "com.yourapp.system"),
                @Stage(type = LEGACY, location = "com.yourapp.mongock"),
                @Stage(location = "com.yourcompany.changes")  // Standard stage (default type)
        }
)
```

To see these special stages in action, refer to the [Upgrade from Mongock guide](../resources/upgrade-from-mongock) which demonstrates their practical usage.

---

## Multiple Stages (Advanced)

Most applications will naturally fit into a single stage, which keeps things simple and ensures a clear, deterministic execution order. 
However, if you prefer to organize changes into multiple stages‚Äîfor example, to separate concerns or enforce isolated execution 
flows‚ÄîFlamingock fully supports that as well. We‚Äôll explain how it works and what to consider when taking that approach.

:::tip Default approach:
Most applications use a single stage: `@Stage(location = "com.yourcompany.changes")`. The name is auto-derived ("changes") and this is the recommended default setup.
:::


### When to Use Multiple Stages

Multiple stages are beneficial in specific scenarios:

#### Multi-module Applications
In monolithic applications with well-defined module boundaries, you can give each module its own stage for full autonomy:

```java
@EnableFlamingock(
    stages = {
        @Stage(name = "user-module", location = "com.yourapp.users.changes"),
        @Stage(name = "billing-module", location = "com.yourapp.billing.changes"),
        @Stage(name = "notification-module", location = "com.yourapp.notifications.changes")
    }
)
```

This approach allows:
- Independent change management across modules
- Different release cycles for different modules
- Clear separation of concerns and responsibilities

#### Functional Separation
You might want to separate changes by function or lifecycle:

```java
@EnableFlamingock(
    stages = {
        @Stage(name = "core-setup", location = "com.yourapp.setup.changes"),
        @Stage(name = "business-logic", location = "com.yourapp.business.changes"),
        @Stage(name = "monitoring-setup", location = "com.yourapp.monitoring.changes")
    }
)
```

### Restrictions and Important Considerations

#### No Execution Order Guarantees
**Critical limitation**: Flamingock does not guarantee execution order between stages. This means:

- Stage A might execute before, after, or concurrently with Stage B
- You cannot rely on changes in one stage being applied before another stage starts
- Each stage should be completely independent from others

#### Why This Matters
Consider this problematic scenario:
```java
// ‚ùå PROBLEMATIC: Relies on execution order
@EnableFlamingock(
    stages = {
        @Stage(name = "create-tables", location = "com.yourapp.schema"),     // Creates tables
        @Stage(name = "seed-data", location = "com.yourapp.data")           // Inserts data - DEPENDS on tables existing!
    }
)
```

The `seed-data` stage might execute before `create-tables`, causing failures.

#### Correct Approach
Instead, group dependent changes in the same stage:
```java
// ‚úÖ CORRECT: All related changes in one stage
@EnableFlamingock(
    stages = {
        @Stage(location = "com.yourapp.changes")  // Contains both table creation AND data seeding in order
    }
)
```


### When NOT to Use Multiple Stages

Avoid multiple stages when:
- **You need execution order across different change types** - Use a single stage instead
- **Changes are logically related** - Keep them together for easier maintenance
- **Simple applications** - The complexity isn't worth the overhead
- **Cross-cutting concerns** - Changes that affect multiple areas should be in one stage

:::info Future Enhancements
Conditional stage execution based on dependencies or conditions is planned for future releases, which would allow:
- Running stages based on success/failure of other stages
- Defining explicit dependencies between stages
- More sophisticated stage orchestration patterns
:::
---

## Required fields

Each stage must define:
- `name` (optional): A unique identifier - if not provided, it will be auto-derived from the location
- `location`: The package or directory where changes are located

---

## Stage fields

| Field            | Required            | Description                                                                 |
|------------------|---------------------|-----------------------------------------------------------------------------|
| `location`       | :white_check_mark:  | Package or directory scanned for both code-based and template-based changes |
| `name`           | :x:                 | Unique identifier for the stage (auto-derived from location if not provided) |
| `description`    | :x:                 | Optional text explaining the stage's purpose                                |

---

## Where Changes are located

- **`location`** refers to a source package (e.g., `com.company.changes`), a relative(e.g., `my/path/changes`) or absolute(e.g., `/my/path/changes`) resources directory.  
  - Template-based and code-based changes can co-exist if location is a source package.
  - If location references a resource directory, it only accepts template-based changeUnits.
  - Default source roots: `src/main/java`, `src/main/kotlin`, `src/main/scala`, `src/main/groovy`. 
  - Source root can be customized via the `sources` compiler option.
  - Resource root can be customized via the `resources` compiler option.
  
- Customizing Source and Resource Root Paths
<Tabs groupId="gradle_maven">
    <TabItem value="gradle" label="Gradle" default>
```kotlin
tasks.withType<JavaCompile> {
    options.compilerArgs.addAll(listOf(
        "-Asources=custom/src",
        "-Aresources=custom/resources"
    ))
}
```
    </TabItem>
    <TabItem value="maven" label="Maven">
```xml
<build>
  <plugins>
    <plugin>
      <artifactId>maven-compiler-plugin</artifactId>
      <configuration>
        <compilerArgs>
          <arg>-Asources=custom/src</arg>
          <arg>-Aresources=custom/resources</arg>
        </compilerArgs>
      </configuration>
    </plugin>
  </plugins>
</build>
```
    </TabItem>
</Tabs>


---

## Example Pipeline

```yaml
pipeline:
  stages:
    - name: user-setup
      description: User-related DB setup
      location: com.yourapp.flamingock.users
```

Folder view:

```
src/
  main/
    java/
      com/
        yourapp/
          flamingock/
            users/
              _0001_CREATE_USERS_TABLE.java
              _0002_ADD_INDEX.yaml
```

---

## Best Practices

### Single Stage Execution (default and recommended)

In most applications, **changes that require a specific, deterministic execution order** should be grouped into a **single stage**. This ensures they are applied sequentially and in the exact order they are defined.

```java
@EnableFlamingock(
    stages = {
        @Stage(location = "com.yourcompany.changes")
    }
)
```

Grouping related changes into a single stage:
- Ensures **predictable, sequential execution**
- Avoids ambiguity from cross-stage execution timing
- Eliminates the need to manage inter-stage dependencies
- Keeps setup simple and easier to maintain
- Supports mixing all types of changes (Kafka, MongoDB, SQL, S3, etc.) in a well-defined order

:::info Advanced scenarios
If your application benefits from separating changes‚Äîfor example, by module or lifecycle‚Äîyou can define [Multiple Stages (Advanced)](#multiple-stages-advanced). Just remember: deterministic execution is guaranteed only within a stage, not across them.
:::

### Placing your changes
We strongly recommend placing all your changes ‚Äî code-based and template-based ‚Äî in a **single location** defined by the `@Stage` annotation.
  - Ensures changes are always scanned, regardless of type
  - Avoids needing two locations if one template-based change requires fallback to code
  - Keeps everything in one logical location

---

### Naming Convention for Changes
To ensure clarity and enforce ordering, we recommend naming changes using the following format:

```
_0001_CREATE_CLIENTS_TABLE.java
_0002_ADD_INDEX_TO_EMAIL.yaml
```

- `XXXX`: The execution order of the change
- `CHANGE_NAME`: Descriptive name of what the change does

This convention:
- Works across both code-based and template-based formats
- Makes the execution order obvious at a glance
- Ensures consistent naming and project hygiene

:::tip
While Java typically avoids underscores and leading digits, change units are not traditional classes. Prioritizing **readability and order** is more valuable in this context.
:::



## üõ† Troubleshooting

### My stage isn't picked up
- Make sure the stage has a `location` field defined
- Check the file path is correct and uses `/` as a separator, not `.` in YAML
- If using resource directory paths, make sure the file is placed under `src/main/resources/your-dir`

### No changes found in stage
- Verify that the class or YAML file is located in the expected package/directory
- For code-based changes, ensure the class is annotated with `@Change` or `@ChangeUnit`
- For template-based changes, check file names and YAML formatting

---

---

// File: flamingock-library-config/changeunits-deep-dive

## Clarifying changeUnits

A **ChangeUnit** is the atomic, versioned unit of change in Flamingock. It encapsulates logic to modify an external system (the [**target system**](../overview/audit-store-vs-target-system.md)) and provides metadata and rollback capability. ChangeUnits are discovered and executed in a defined order to ensure deterministic, auditable changes.

### What a changeUnit Is
- **Self-contained change**  
  Each ChangeUnit includes:
  - A unique `id` (unique across the entire application)
  - An `order` determining execution sequence
  - An optional `author` and `description`
  - An `@Execution` method (or template) with the change logic
  - A `@RollbackExecution` method (or template) with compensating logic
  - A `transactional` flag (default `true`) indicating if Flamingock will attempt to wrap execution and audit in a single transaction

- **Versioned and Auditable**  
  ChangeUnits live in your source code or resources, and their execution is recorded in the [**audit store**](../overview/audit-store-vs-target-system.md) to:
  - Prevent duplicate executions
  - Track history (who ran which change and when)
  - Drive rollbacks and ‚Äúundo‚Äù operations

### What a changeUnit is not
- **Not a long-running job**  
  ChangeUnits should complete promptly. Flamingock needs to know the result (success or failure) before proceeding. Long-running or asynchronous operations can lead to unexpected behavior or retries.
- **Not a general-purpose script**  
  While ChangeUnits run code, they are not intended for arbitrary scripting. Their role is to apply deterministic, idempotent changes that evolve your target systems in sync with your application.

---

## ChangeUnit properties

Every ChangeUnit must define:
- `id` (String): Unique across all ChangeUnits in the application.
- `order` (String or numeric): Defines execution order (evaluated lexicographically or numerically).
- `author` (String): Who is responsible for the change.
- `description` (String, optional): Brief explanation of the change.
- `transactional` (boolean, default `true`): Whether Flamingock will attempt to wrap the change and audit insert in one transaction (if the target system and audit store support transactions).

---

## Types of changeUnits

ChangeUnits can be defined based on two approaches: code-based and [template-based](../templates/templates-introduction.md)

### Code-based changeUnits
Code-based ChangeUnits are written in Java (or Kotlin/Groovy) with annotations:

```java
@ChangeUnit(
        id = "create_s3_bucket", 
        order = "0001", 
        author = "dev-team", 
        transactional = false,
        description = "Create my-app-bucket S3 bucket")
public class _0001_CreateS3BucketChange {

  @Execution
  public void execute(S3Client s3Client) {
    s3Client.createBucket("my-app-bucket");
  }

  @RollbackExecution
  public void rollback(S3Client s3Client) {
    s3Client.deleteBucket("my-app-bucket");
  }
}
```

#### Discoverability & execution
- **Location**: Files must reside in a source package scanned by Flamingock (default: `src/main/java`).
- **Naming**: Class names should match `_ORDER_name` (e.g., `_0001_CreateS3BucketChange`) to simplify ordering and visibility.
- **Dependencies**: Flamingock injects dependencies (e.g., `S3Client`, `MongoClient`) via Spring or builder-based DI.

### Template-based changeUnits
Template-based ChangeUnits use YAML or JSON definitions. Example (SQL DDL):

```yaml
# /src/main/resources/_0003_add_status_column.yml
id: add_status_column
order: 0003
author: "db-team"
description: "Add 'status' column to 'orders' table"
templateName: sql-template
templateConfiguration:
  executionSql: |
    ALTER TABLE orders ADD COLUMN status VARCHAR(20);
  rollbackSql: |
    ALTER TABLE orders DROP COLUMN status;
```

#### Discoverability & execution
- **Location**: While Flamingock will scan src/main/resources by default, we **strongly recommend** placing template files in the same code‚Äêpackage/directory as your code‚Äêbased ChangeUnits.
    - This ensures that both code‚Äêbased and template‚Äêbased ChangeUnits live side by side for visibility and immutability.
- **Naming**: File names should follow `_ORDER_name.yml` or `_ORDER_name.json`.
- **Advantages**:
  - Easier immutability: The YAML/JSON file itself represents the change, avoiding modifications in code.
  - Better for simple, repeatable tasks (e.g., SQL DDL).

---

[//]: # (## How ChangeUnits Are Discovered & Executed)

[//]: # ()
[//]: # (Flamingock uses **classpath scanning** to locate ChangeUnits:)

[//]: # ()
[//]: # (- **Code-based**: Scans specified packages for classes annotated with `@ChangeUnit` or `@Change`.)

[//]: # (- **Template-based**: Scans specified resource directories for YAML/JSON files matching pattern `_.*\.&#40;yml|json&#41;`.)

[//]: # ()
[//]: # (Flamingock builds a **pipeline** of stages and executes ChangeUnits in ascending order based on `order`.)

[//]: # ()
[//]: # (---)

## Considerations

### Transactional behavior
- **Transactional changes (default)**: When the target system and audit store share a transactional context (e.g., MongoDB CE), Flamingock wraps both in a single transaction.
- **Non-transactional changes**: `transactional = false`. Flamingock executes `@Execution` and, upon success, writes to the audit store. If `@Execution` fails, Flamingock invokes `@RollbackExecution`. See [transactions page](../flamingock-library-config/transactions.md)
    

### Immutability
- **Code-based**: Once committed and possibly executed, avoid modifying the class. Instead, introduce a new ChangeUnit for evolution.
- **Template-based**: Treat the file as immutable. Modifying an existing template breaks history ordering ‚Äî use new template files for new changes.

### Audit store constraints
- **Single audit store per application**: All ChangeUnits in one application write to the same audit store.
- **Audit store integrity**: Do not manually modify audit records in the audit store; this can corrupt Flamingock‚Äôs state. Use CLI/UI for supported modifications.

### Idempotency
- ChangeUnits should be idempotent or safe to re-run. Flamingock retries failed ChangeUnits on next startup. If a non-transactional ChangeUnit partially succeeded, ensure it can handle multiple executions or include appropriate guards.

---

## Best practices

**Name and location conventions***  
  - Place both code-based and template-based ChangeUnits in the same source package/directory for visibility and immutability.  
  - Use filenames or class names prefixed with the zero-padded order (e.g., `_0001_create_s3_bucket.java` or `_0001_create_s3_bucket.yaml`).

- **Always provide rollback**  
  Even for transactional ChangeUnits, implement `@RollbackExecution` so CLI ‚Äúundo‚Äù operations work smoothly.

- **Template-based changeUnits for simplicity and immutability**  
  Favor templated ChangeUnits (YAML/JSON) for routine, repeatable tasks‚Äîsuch as SQL DDL, configuration toggles, or small API calls. Templates are inherently immutable (being a static file), making it easier to adhere to versioning best practices.

- **Use Flamingock‚Äôs batching feature for long-running operations**(coming soon)  
  For ChangeUnits that process large workloads (e.g., migrating millions of rows), leverage Flamingock‚Äôs built-in batching mechanism. Define a single ChangeUnit that iterates through data in batches; Flamingock will mark it as complete only when all batches succeed, and will resume from the last processed batch on retry.

- **Inject minimal dependencies**  
  Only inject what you need (e.g., clients, DAOs). Avoid injecting large application contexts within ChangeUnits.

- **Write clear descriptions**  
  Use the `description` property to explain the purpose and impact of each ChangeUnit.

- **Implement idempotency**  
  For non-transactional operations (e.g., deleting an S3 bucket), wrap calls in checks (e.g., ‚Äúif exists‚Äù) to handle re-runs gracefully.

- **Immutable operations**  
  Once a ChangeUnit is applied to any environment, treat its code or template as immutable. For corrections, create new ChangeUnits rather than editing old ones.

- **Explicit ordering**  
  Declare a clear, numeric `order` for each ChangeUnit. Relying on implicit or alphabetical ordering can introduce hidden dependencies and make debugging deployment issues difficult.

- **Audit store hygiene**  
  Never manually edit or delete records in the audit store. Direct modifications can corrupt Flamingock‚Äôs internal state and lead to unpredictable behavior or data loss. If you need to correct audit data, use Flamingock‚Äôs supported operations (CLI or UI) or follow documented recovery procedures.

- **Documentation and metadata**  
  Use the `author` and `description` (if available) fields to document the intent of each ChangeUnit. This metadata helps teams understand why a change was made and by whom‚Äîcritical for code reviews and compliance audits.

---

// File: flamingock-library-config/changeunit-dependency-injection

Flamingock allows you to inject dependencies into your change units so they can use services, clients, or utilities during execution. This is especially useful for **standalone applications**, where no dependency injection framework (like Spring) is present.

If you're using **Spring Boot**, Flamingock can integrate with the Spring context to resolve dependencies automatically ‚Äî Please refer to the [Spring Boot Integration](../frameworks/springboot-integration/introduction.md) section for details.

This injection is handled via the **Flamingock builder** ‚Äî not via YAML ‚Äî and supports:

| Feature                                                    |  Supported?  |
|------------------------------------------------------------|:------------:|
| Injection by type                                          |      ‚úÖ       |
| Injection by name                                          |      ‚úÖ       |
| Constructor-level injection                                |      ‚úÖ       |
| Method-level injection(`@Execution`, `@RollbackExecution`) |      ‚úÖ       |
| Nullable parameters                                        |      ‚úÖ       |
| Lock-safe proxying                                         |      ‚úÖ       |
| Opt-out via `@NonLockGuarded` for non-critical components  |      ‚úÖ       |

---

## Registering dependencies

Platform changeUnit dependencies  are registered using the method `addDependency(...)` :
```java
builder
  .addDependency(clientService);                         
```
Once registered, Flamingock can inject the requested dependency into your change unit methods or constructors.
```java
@Execution
public void execute(ClientService clientService) {
    // ChangeUnit's logic
}
```
### Using name and explicit type
Let‚Äôs say you have a base class `PaymentProcessor`, with two implementations: `StripePaymentProcessor` and `PaypalPaymentProcessor`.

Now imagine you're injecting both implementations like this:
```java
addDependency(new StripePaymentProcessor());
addDependency(new PaypalPaymentProcessor());
```

If a change unit method requests either `StripePaymentProcessor` or `PaypalPaymentProcessor` specifically, Flamingock will inject the correct one.

But if the method requests the general type `PaymentProcessor`, Flamingock cannot guarantee which of the two will be used.

To solve this, Flamingock provides two mechanisms:

#### Named dependency
You can register each implementation with a name:
```java
builder
  .addDependency("stripe", new StripePaymentProcessor())
  .addDependency("paypal", new PaypalPaymentProcessor());
```

Then use the `javax.inject.@Named` annotation in your method:
```java
@Execution
public void execute(@Named("stripe") PaymentProcessor processor) {
  processor.charge(...);
}
```

#### Explicit typing the dependency
Alternatively, you can register a specific instance for the general type, to ensure the right one is used by default:
```java
builder.addDependency(PaymentProcessor.class, new StripePaymentProcessor());
```
Now, any method requesting a `PaymentProcessor` will receive the Stripe implementation ‚Äî unless a named one is requested instead.


---

## Injection targets

### Method injection

You can declare dependencies as parameters of `@Execution`, `@RollbackExecution`, etc.

```java
@Execution
public void run(ClientService clientService) {
  clientService.doSomething();
}
```

### Constructor injection

You can inject dependencies through constructors:

```java
public class CreateClientsTable {

  private final ClientService clientService;

  @FlamingockConstructor
  public CreateClientsTable(ClientService clientService) {
    this.clientService = clientService;
  }

  @Execution
  public void run() {
    clientService.doSomething();
  }
}
```

:::note 
If the class has only one constructor, the `@FlamingockConstructor` annotation is optional.
:::
---

## What happens if a dependency isn‚Äôt found?

By default, Flamingock will throw a clear exception if it cannot resolve a dependency.

You can override this by marking the parameter as `@Nullable`:

```java
import io.flamingock.core.api.annotations.Nullable;

@Execution
public void run(@Nullable OptionalLogger logger) {
  if (logger != null) {
    logger.log("Change started");
  }
}
```

---

## Skipping lock verification

By default, injected dependencies are **proxy-wrapped** to check that the lock is still held before each call ‚Äî this prevents unsafe execution if the lock expires.

If you're injecting something that doesn't perform critical side effects (like a local list or utility), you can opt out of this check:

```java
@Execution
public void run(@NonLockGuarded SomeHelper helper) {
  helper.doLocalStuff();
}
```
---

## :white_check_mark: Best practices

- Only inject what you need for the current change unit
- Prefer constructor injection when dependencies are shared across multiple methods
- Use `@NonLockGuarded` only when you're certain no side effects are involved
- Document your dependencies to avoid confusion in large pipelines

---

// File: flamingock-library-config/platform-component-injection

# Platform component injection

In addition to injecting dependencies into your change units, Flamingock allows you to register **platform-level components**. These are required for Flamingock's internal operations, such as framework integration, driver setup, or future extensions like observability.

These components are not part of the change unit logic ‚Äî they help Flamingock integrate and operate effectively within your application's runtime environment.

---

## When is this needed?

You may need to register platform components when:

- **Framework integration** is required  
  For example, when integrating with Spring Boot, you must provide `ApplicationContext` and `ApplicationEventPublisher` so Flamingock can hook into the application lifecycle.

- **Database access in Community Edition drivers**  
  Some drivers (like MongoDB or DynamoDB) require the database client to be explicitly provided.

- **System integrations like logging or observability** *(coming soon)*  
  Future features like OpenTelemetry or event monitoring may rely on externally provided components.

- **Custom modules or platform bridges**  
  If you're building your own Flamingock modules or integrating with external systems, you might need to provide platform services explicitly.

:::info
  Each integration (e.g., Spring Boot, database integration, etc.) will clearly document if and how platform components need to be registered. You don‚Äôt need to guess ‚Äî check the relevant integration section for guidance.
:::

---

## Registering platform dependencies

Platform components are registered using the same `addDependency(...)` API used for change unit dependencies:

```java
builder
  .addDependency(applicationContext)
  .addDependency(applicationEventPublisher);
```
:::tip
If a component is relevant for both Flamingock internal operations and for injection into change units, you only need to register it once.
:::


---

## See also

- [ChangeUnit dependency injection](changeunit-dependency-injection.md) ‚Äî for injecting services directly into change units  
- [Spring Boot integration](../frameworks/springboot-integration/introduction.md) ‚Äî for automated platform wiring in Spring apps

---

// File: flamingock-library-config/lock-configuration

# Distributed lock configuration

Flamingock uses a distributed lock to ensure that changes are only applied **once and only once**, even when multiple instances of your application start simultaneously in a distributed system.

This mechanism is **mandatory** and applies in both Cloud and Community editions:

- In **Cloud Edition**, the lock is managed by Flamingock‚Äôs backend
- In **Community Edition**, the lock is stored in your configured database (e.g., MongoDB, DynamoDB)

---

## Configurable properties

| Property                             | Default          | Description                                                                         |
|--------------------------------------|------------------|-------------------------------------------------------------------------------------|
| `lockAcquiredForMillis`              | `60000` (1 min)  | Time the lock remains valid once acquired. Automatically released if not refreshed. |
| `lockQuitTryingAfterMillis`          | `180000` (3 min) | How long to retry acquiring the lock if another instance holds it.                  |
| `lockTryFrequencyMillis`             | `1000` (1 sec)   | Interval between attempts while waiting for the lock.                               |
| `throwExceptionIfCannotObtainLock`   | `true`           | Whether Flamingock should fail if the lock can't be acquired.                       |
| `enableRefreshDaemon`                | `true`           | Whether to run a background thread that periodically extends the lock.              |

---

## Why locking matters

In distributed systems, multiple app instances may start simultaneously ‚Äî but only **one** should apply pending changes. Flamingock uses locking to:

- Prevent race conditions
- Ensure consistent and safe state transitions
- Guarantee single execution of each change

:::info
If no pending changes exist, the lock is not acquired and startup proceeds normally.
:::
---

## Refresh Daemon (safety net)

The **refresh daemon** is a background thread that extends the lock before it expires.  
It‚Äôs critical for **long-running changes** that might exceed the lock duration.

Without the daemon:

- A long-running change (e.g., 90s) could outlive a default lock (e.g., 60s)
- Another instance might acquire the lock prematurely, causing conflict

:::note
By default, Flamingock uses proxy-based injection guards. Before executing any injected dependency, Flamingock verifies that the lock is still valid.
:::

If you're injecting **non-critical components** (e.g., a local list or stateless helper), you can annotate them with `@NonLockGuarded` to avoid the proxy overhead.

---

## Configuration Examples

### Builder
```java
FlamingockStandalone
  .setLockAcquiredForMillis(120000)
  .setLockQuitTryingAfterMillis(300000)
  .setLockTryFrequencyMillis(2000)
  .setThrowExceptionIfCannotObtainLock(true)
  .setEnableRefreshDaemon(true)
  ...
```

---

## When to tweak Lock settings

Most projects can use the default configuration. You may need to adjust values if:

- You expect **long-running changes** (increase `lockAcquiredForMillis`)
- You run **many app instances** and want to reduce startup wait (decrease `lockTryFrequencyMillis`)
- You want Flamingock to **fail fast** if it can't acquire a lock (keep `throwExceptionIfCannotObtainLock` as `true`)

---

## ‚úÖ Best Practices

- Keep the refresh daemon **enabled**, especially for distributed or slow-processing environments
- Avoid setting `lockAcquiredForMillis` too short if any changes might run longer
- Use `@NonLockGuarded` sparingly ‚Äî only when you're sure no side-effects will occur

[//]: # (TODO: Add "üõ† Troubleshooting" section)

---

// File: flamingock-library-config/events

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Events

This guide provides a comprehensive explanation of how Flamingock events function.

## Introduction

Flamingock utilizes events to notify the main application about the current state of the Flamingock process, as well as the eventual outcome of its execution.

The event-handling approach differs significantly depending on the type of runner being used:

- For Spring-based applications, Flamingock leverages the ```ApplicationEventPublisher```, which is provided during the build process.
- For standalone applications, Flamingock requires an explicit event handler to be defined at build time.

Flamingock offers event handling capabilities for both Pipelines and Stages.

## Type of events

Flamingock emits three types of events:

- **Start Event**: Triggered just before the migration process begins, following successful validation.
- **Success Event**: Emitted upon successful completion of the migration. This indicates that no unhandled exceptions occurred, or that any errors were either properly handled or associated changeLogs were marked with 'Fail' as false.
- **Failure Event**: Emitted when a change log fails and the failure is not handled, as described above.

:::warning
The Success and Failure events are mutually exclusive, only one of them will be raised for a given migration execution.
:::

## Get started

Each runner's documentation page provides the necessary information for using events in accordance with that runner's specific implementation.

## Standalone basic example

In the Flamingock builder, you must configure the events you intend to use and implement the corresponding listeners.

### Builder

<Tabs groupId="languages">
  <TabItem value="java" label="Java" default>
  ```java
      FlamingockStandalone.local()
          .setPipelineStartedListener(new PipelineStartedListener())
          .setPipelineCompletedListener(new PipelineCompletedListener())
          .setPipelineFailedListener(new PipelineFailedListener())
          .setStageStartedListener(new StageStartedListener())
          .setStageCompletedListener(new StageCompletedListener())
          .setStageFailedListener(new StageFailedListener())
          .build()
          .run();
  ```
  </TabItem>
  <TabItem value="kotlin" label="Kotlin">
  ```kotlin
      FlamingockStandalone.local()
          .setPipelineStartedListener(PipelineStartedListener())
          .setPipelineCompletedListener(PipelineCompletedListener())
          .setPipelineFailedListener(PipelineFailedListener())
          .setStageStartedListener(StageStartedListener())
          .setStageCompletedListener(StageCompletedListener())
          .setStageFailedListener(StageFailedListener())
          .build()
          .run()
  ```
  </TabItem>
</Tabs>
  
### Listener

<Tabs groupId="languages">
  <TabItem value="java" label="Java" default>
  ```java
    public class StageCompletedListener implements Consumer<IStageCompletedEvent> {

    public static int executed = 0;
    @Override
    public void accept(IStageCompletedEvent iStageCompletedEvent) {
        executed++;
    }
    }
  ```
  </TabItem>
  <TabItem value="kotlin" label="Kotlin">
  ```kotlin
class StageCompletedListener : (IStageCompletedEvent) -> Unit {

    companion object {
        var executed = 0
    }

    override fun invoke(iStageCompletedEvent: IStageCompletedEvent) {
        executed++
    }
}
  ```
  </TabItem>
</Tabs>

## Spring-based basic example

### Listeners

<Tabs groupId="languages">
  <TabItem value="java" label="Java" default>
    ```java
      @Bean
      public PipelineStartedListener startFlamingockListener() {
          return new PipelineStartedListener();
      }

      @Bean
      public PipelineCompletedListener successFlamingockListener() {
          return new PipelineCompletedListener();
      }

      @Bean
      public PipelineFailedListener sailedFlamingockListener() {
          return new PipelineFailedListener();
      }

      @Bean
      public StageStartedListener stageStartedListener() {return new StageStartedListener();}

      @Bean
      public StageCompletedListener stageCompletedListener() {return new StageCompletedListener();}

      @Bean
      public StageFailedListener stageFailedListener() {return new StageFailedListener();}
    ```
  </TabItem>
  <TabItem value="kotlin" label="Kotlin" default>
    ```kotlin
        import org.springframework.context.annotation.Bean

        @Bean
        fun startFlamingockListener(): PipelineStartedListener {
            return PipelineStartedListener()
        }

        @Bean
        fun successFlamingockListener(): PipelineCompletedListener {
            return PipelineCompletedListener()
        }

        @Bean
        fun sailedFlamingockListener(): PipelineFailedListener {
            return PipelineFailedListener()
        }

        @Bean
        fun stageStartedListener(): StageStartedListener {
            return StageStartedListener()
        }

        @Bean
        fun stageCompletedListener(): StageCompletedListener {
            return StageCompletedListener()
        }

        @Bean
        fun stageFailedListener(): StageFailedListener {
            return StageFailedListener()
        }
    ```
  </TabItem>
</Tabs>

---

// File: flamingock-library-config/transactions

# Transactions

Flamingock supports transactional execution for change units **when the underlying system and configuration allow it**.

In this context, **transactional execution means wrapping both the user-defined change and the corresponding audit record** in a single, atomic operation. This ensures that either both the change and the audit log are committed together, or neither are.

Flamingock logs each change unit execution in an audit store. In transactional scenarios, the change and the audit record are persisted together.

This page explains:
- What Flamingock considers transactional
- When transactions apply and when they don‚Äôt
- How Flamingock handles failure and rollback when transactions aren‚Äôt available

---

## What Flamingock considers transactional

A change unit is considered transactional when:

- The change targets a system that supports transactions (e.g., a modern database)
- The Flamingock **Community Edition** driver in use supports transactions
- The change unit is marked as `transactional = true` (default behavior)

If these conditions are met, Flamingock wraps the execution of:
- The `@Execution` method of the change unit
- The audit log record creation

...**within the same transaction**. If anything fails, the entire operation is rolled back and not recorded as executed.

---

## When transactions don‚Äôt apply

Transactions do **not** apply in the following scenarios:

- The change targets a **non-transactional system** (e.g., Kafka, S3, external APIs)
- The change targets a **different database** than the one used for Flamingock‚Äôs audit log
- The change performs **operations that are not allowed in transactions** (e.g., DDL operations in Mysql or MongoDB)
- The driver or underlying **database doesn‚Äôt support transactions**

:::tip
In all these cases, mark the change unit with `@ChangeUnit(transactional = false)` to disable transaction wrapping.
<!--  To ensure Flamingock performs rollback properly, see the [Manual rollback](#manual-rollback) section. -->
:::


:::warning
If a change unit is marked as transactional (`transactional = false` not applied) but targets a system or operation that doesn‚Äôt support transactions, Flamingock assumes the database rolled back the change, and skips the `@RollbackExecution` method in case of failure. This can result in partial updates and loss of consistency.
:::

---

## Disabling transactions

### Per change unit (recommended)

Transactions are **enabled by default**. You can disable them explicitly for a given change unit:

```java
@ChangeUnit(id = "provision-bucket", order = "004", author = "team-a", transactional = false)
public class S3ProvisioningChange {

  @Execution
  public void execute(S3Client s3) {
    s3.createBucket(...);
  }

  @RollbackExecution
  public void rollback(S3Client s3) {
    s3.deleteBucket(...);
  }
}
```

This tells Flamingock:
- Not to use a transaction for the execution and audit
- To call `@RollbackExecution` if something goes wrong

### Globally (less common)

You can also disable transactions across all change units in the builder:

```java
Flamingock
  .builder()
  .disableTransaction()
  .build()
  .run();
```

---

## Manual rollback

When `transactional = false`, Flamingock cannot rely on the underlying system to roll back failed operations. Instead, it will attempt a **manual rollback** by calling your `@RollbackExecution` method if execution fails.

This fallback allows Flamingock to support non-transactional systems like:

- Message brokers (e.g., Kafka, RabbitMQ)
- External APIs
- Cloud infrastructure

:::info
You are responsible for writing reliable rollback logic. Flamingock cannot guarantee full recovery unless your rollback method safely restores the previous state.
:::

---

## When to use `transactional = false`

| Type of change                                                                      | `transactional = false`? |
|-------------------------------------------------------------------------------------|:------------------------:|
| Operation allowed in transaction - same DB as audit log (transactional)             |            ‚ùå             |
| Operation not allowed inside transaction (e.g., DDL operations in Mysql or MongoDB) |            ‚úÖ             |
| ChangeUnit targets different DB than audit log                                      |            ‚úÖ             |
| ChangeUnit targets non-database system or a non-transactional                       |            ‚úÖ             |

---

## Flamingock Cloud Edition

:::info
Flamingock Cloud Edition will support transactions through its own internal coordination mechanism.  
Documentation will be added when this feature is released.
:::

---

## Edition-specific transaction behavior
The examples and recommendations on this page apply to Flamingock generally, but each Community Edition (CE) driver has its own transactional capabilities and constraints.

Refer to the relevant edition page for detailed behavior, including:
- Whether transactions are supported
- How they are initiated and managed
- Known limitations (e.g., unsupported operations)

**Supported transactional CE editions:**
- [flamingock-ce-mongodb-sync](../community-edition/ce-mongodb-java-driver.md)
- [flamingock-ce-mongodb-springdata](../community-edition/ce-mongodb-springdata.md)
- [flamingock-ce-dynamodb](../community-edition/ce-dynamodb.md)
- [flamingock-ce-couchbase](../community-edition/ce-couchbase.md)

:::info
Cloud Edition transactional support will be explained in its own section once released.
:::

---

## :white_check_mark: Best practices

-  **Use `transactional = false` for changes that cannot run in a transaction**

Some database drivers (e.g., MongoDB Sync) don‚Äôt support all operations inside transactions (such as DDL or index creation). In those cases, explicitly set `transactional = false` to avoid runtime errors.

- **Always set `transactional = false` for non-database change units**

If your change interacts with a message queue, API, file system, or another external system, it should **not** be marked as transactional. Flamingock will treat it as non-transactional and enable manual rollback instead.

-  **Keep change unit scope narrow and isolated**

Avoid combining transactional and non-transactional logic within the same change unit. If part of the logic targets a non-transactional system, isolate that logic in a dedicated change unit and mark it appropriately.

- **Prefer automatic rollback (via transaction) when available**

Transactional change units offer stronger guarantees. Use them when the system supports them to ensure atomic execution and safe rollback on failure.

---

// File: flamingock-library-config/extra-configuration

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

#  Additional Configuration

This section includes additional settings for customizing defaults and adding contextual information to your Flamingock setup. 

| Setting         | Purpose                                      | Default            |
|-----------------|-----------------------------------------------|--------------------|
| `metadata`      | Attach tags and labels for audit tracking     | _empty map_        |
| `defaultAuthor` | Used when no author is specified in a change  | `"default_author"` |
| `enabled`       | Globally enable/disable Flamingock            | `true`             |

:::note
These options can currently be defined using the Flamingock builder. Support for config file (outside Spring Boot) will be added in a future release
:::
---

## Metadata

Flamingock provides a Metadata object - which is a flexible `Map<String, Object>` that allows you to attach custom information to your Flamingock process.

The metadata is stored as part of the **audit log**, and can be used for labeling, traceability, and future reporting.

### Use Cases
You can use metadata to:
- Tag executions by **team**, **service**, or **region**
- Include a **deployment ID**, **build number**, or **triggering user**
- Attach **comments** or **labels** for easier traceability

### Example

<Tabs groupId="config">
    <TabItem value="file" label="YAML" default>
```yaml
metadata:
  owner: platform-team
  triggeredBy: ci-cd-pipeline
  notes: initial deployment setup
```
    </TabItem>
    <TabItem value="builder" label="Builder">
```java
Map<String, Object> metadata = new HashMap<>();
metadata.put("owner", "platform-team");
metadata.put("triggeredBy", "ci-cd-pipeline");

FlamingockStandalone
.setMetadata(metadata)
...
```
    </TabItem>
</Tabs>

---

### Default Author

If a change unit does not specify an `author`, Flamingock will use this value as the fallback.

- Applies to both **code-based** and **template-based** changes
- Default value: `"default_author"`
- Ignored if the change itself defines an explicit author

### Example

<Tabs groupId="config">
    <TabItem value="file" label="YAML" default>
```yaml
defaultAuthor: antonio
```
    </TabItem>
    <TabItem value="builder" label="Builder">
```java
FlamingockStandalone
        .setDefaultAuthor("antonio")
```
    </TabItem>
</Tabs>

---

## Disable flamingock process

This global toggle allows you to enable or disable Flamingock.

- If set to `false`, Flamingock will **not run**
- A log message will appear in the **application logs**, indicating that Flamingock is disabled
- No changes will be applied and no audit entries will be created

:::note 
Useful in test environments, local runs, or cases where you want to conditionally skip changes.
:::

### Example

<Tabs groupId="config">
    <TabItem value="file" label="YAML" default>
```yaml
enabled: false
```
    </TabItem>
    <TabItem value="builder" label="Builder">
```java
FlamingockStandalone
  .setEnabled(false)
```
    </TabItem>
</Tabs>

---

// File: frameworks/graalvm

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# GraalVM support

Flamingock provides **first-class support for GraalVM native images**, enabling your application to compile into fast, self-contained executables without sacrificing change tracking, rollback, or template support.

This page explains how to generate a GraalVM native image for a Flamingock-enabled application, using the **reflection metadata** produced by the **annotation processor** and Flamingock‚Äôs built-in GraalVM **registration feature**.

---

## How it works

When building your application, Flamingock's annotation processor:

- Scans for all annotated code-based changes (`@ChangeUnit`)
- Discovers template-based changes from `sourcesPackage` and `resourcesDir`
- Generates metadata files containing all required classes for reflection

At native image generation time, Flamingock‚Äôs **GraalVM feature** picks up these files and registers the required types with GraalVM, so they‚Äôre available at runtime.

:::tip
Learn more about the basics of GraalVM native image compilation in the [GraalVM Native Image basics guide](https://www.graalvm.org/latest/reference-manual/native-image/basics/).
:::

---

## Step-by-step setup

### 1. Add Flamingock GraalVM dependency

<Tabs groupId="gradle_maven">
<TabItem value="gradle" label="Gradle" default>

```kotlin
implementation("io.flamingock:flamingock-graalvm:$flamingockVersion")
```

</TabItem>
<TabItem value="maven" label="Maven">

```xml
<dependencies>
  <dependency>
    <groupId>io.flamingock</groupId>
    <artifactId>flamingock-graalvm</artifactId>
    <version>${flamingock.version}</version>
  </dependency>
</dependencies>
```

</TabItem>
</Tabs>

---

### 2. Add plugin management (only for Gradle)

If using Gradle, ensure your `settings.gradle.kts` includes:

```kotlin
pluginManagement {
    repositories {
        mavenLocal()
        gradlePluginPortal()
        mavenCentral()
    }
}
```

---

### 3. Add GraalVM resource config

Create a file named `resource-config.json` in your project root:

```json
{
  "resources": {
    "includes": [
      { "pattern": "META-INF/flamingock/metadata.json" }
    ]
  }
}
```

:::info
This file declares which resource files should be accessible to your native image. You can add other application-specific resources here as needed.

See the [GraalVM resource configuration documentation](https://www.graalvm.org/latest/reference-manual/native-image/metadata/#resources) for more details.
:::

---

### 4. Build the application

```bash
./gradlew clean build
```

#### Expected build output

During the build process, Flamingock will emit logs similar to the following ‚Äî indicating successful annotation processing and metadata generation.

<details>
<summary>Click to see the expected logs</summary>
<Tabs groupId="gradle_maven">
<TabItem value="gradle" label="Gradle" default>

```bash
> Task :compileJava
Note:    [Flamingock] Starting Flamingock annotation processor initialization.
Note:    [Flamingock] 'resources' parameter NOT passed. Using default 'src/main/resources'
Note:    [Flamingock] 'sources' parameter NOT passed. Searching in: '[src/main/java, src/main/kotlin, src/main/scala, src/main/groovy]'
Note:    [Flamingock] Reading flamingock pipeline from file: 'src/main/resources/flamingock/pipeline.yaml'
Note:    [Flamingock] Initialization completed. Processed templated-based changes.
Note:    [Flamingock] Searching for code-based changes (Java classes annotated with @Change or legacy @ChangeUnit annotations)
Note:    [Flamingock] Reading flamingock pipeline from file: 'src/main/resources/flamingock/pipeline.yaml'
Note:    [Flamingock] Finished processing annotated classes and generating metadata.
Note:    [Flamingock] Final processing round detected - skipping execution.
```

</TabItem>
<TabItem value="maven" label="Maven">

```bash
[INFO]   [Flamingock] Starting Flamingock annotation processor initialization.
[INFO]   [Flamingock] 'resources' parameter NOT passed. Using default 'src/main/resources'
[INFO]   [Flamingock] 'sources' parameter NOT passed. Searching in: '[src/main/java, src/main/kotlin, src/main/scala, src/main/groovy]'
[INFO]   [Flamingock] Reading flamingock pipeline from file: 'src/main/resources/flamingock/pipeline.yaml'
[INFO]   [Flamingock] Initialization completed. Processed templated-based changes.
[INFO]   [Flamingock] Searching for code-based changes (Java classes annotated with @Change or legacy @ChangeUnit annotations)
[INFO]   [Flamingock] Reading flamingock pipeline from file: 'src/main/resources/flamingock/pipeline.yaml'
[INFO]   [Flamingock] Finished processing annotated classes and generating metadata.
[INFO]   [Flamingock] Final processing round detected - skipping execution.
```

</TabItem>
</Tabs>
</details>


---

### 5. Create the native image

```bash
native-image \
  --no-fallback \
  --features=io.flamingock.graalvm.RegistrationFeature \
  -H:ResourceConfigurationFiles=resource-config.json \
  -H:+ReportExceptionStackTraces \
  --initialize-at-build-time=org.slf4j.simple \
  -jar build/libs/your-app.jar
```

#### What these options do:

- `--features=io.flamingock.graalvm.RegistrationFeature`: Registers all Flamingock-related classes for reflection using metadata gathered during build time.
- `-H:ResourceConfigurationFiles=resource-config.json`: Informs GraalVM of required static resource files to include.
- `--initialize-at-build-time`: ‚Äì **Optional**. Build‚Äëtime init for listed classes/packages (freeze static state; faster start; avoids early reflection/I/O). Flamingock does not require specific entries. Use only if a library benefits (e.g., logging). Example: --initialize-at-build-time=org.slf4j.impl,org.slf4j.simple. Omit if unsure.

#### Expected native image output

When creating the native image, you should see log output from Flamingock's GraalVM `RegistrationFeature`, confirming that Flamingock successfully scanned and registered internal classes, templates, system modules, and user-defined change units. 

The actual output may differ slightly depending on the modules you‚Äôve included, but it should look similar to the following:
<details>
<summary>Click to see the expected logs</summary>
```
 - io.flamingock.graalvm.RegistrationFeature
[Flamingock] Starting GraalVM classes registration
[Flamingock] Starting registration of internal classes
    Registering class: io.flamingock.core.task.TaskDescriptor 
    Registering class: io.flamingock.core.task.AbstractTaskDescriptor 
    Registering class: io.flamingock.core.preview.PreviewPipeline 
    Registering class: io.flamingock.core.preview.PreviewStage 
    Registering class: io.flamingock.core.preview.CodePreviewChangeUnit 
    Registering class: io.flamingock.core.preview.CodePreviewLegacyChangeUnit 
    Registering class: io.flamingock.core.preview.PreviewMethod 
    Registering class: io.flamingock.core.api.template.ChangeTemplateConfig 
    Registering class: io.flamingock.core.preview.TemplatePreviewChangeUnit 
    Registering class: io.flamingock.core.pipeline.Pipeline 
    Registering class: io.flamingock.core.pipeline.LoadedStage 
    Registering class: io.flamingock.core.task.loaded.AbstractLoadedTask 
    Registering class: io.flamingock.core.task.loaded.AbstractReflectionLoadedTask 
    Registering class: io.flamingock.core.task.loaded.AbstractLoadedChangeUnit 
    Registering class: io.flamingock.core.task.loaded.CodeLoadedChangeUnit 
    Registering class: io.flamingock.core.task.loaded.TemplateLoadedChangeUnit 
    Registering class: java.nio.charset.CoderResult 
[Flamingock] Completed internal classes
[Flamingock] Starting registration of templates
    Registering class: io.flamingock.core.api.template.TemplateFactory 
    Registering class: io.flamingock.core.api.template.ChangeTemplate 
    Registering class: io.flamingock.core.api.template.AbstractChangeTemplate 
    Registering class: io.flamingock.template.mongodb.MongoChangeTemplate 
    Registering class: io.flamingock.template.mongodb.model.MongoOperation 
    Registering class: io.flamingock.template.mongodb.MongoChangeTemplateConfig 
[Flamingock] Completed templates
[Flamingock] Starting registration of system modules
    Registering class: io.flamingock.core.engine.audit.importer.changeunit.MongockImporterChangeUnit 
    Registering class: io.flamingock.core.engine.audit.importer.ImporterModule 
[Flamingock] Completed system modules
[Flamingock] Starting registration of user classes
    Registering class: io.flamingock.changes._1_create_clients_collection_change 
    Registering class: io.flamingock.changes._2_insertClientFederico_change 
    Registering class: io.flamingock.changes._3_insert_client_jorge 
[Flamingock] Completed user classes
[Flamingock] Completed GraalVM classes registration
```
</details>

:::tip
For more information on image creation and options, refer to the [GraalVM build overview documentation](https://www.graalvm.org/latest/reference-manual/native-image/overview/Build-Overview/).
:::

---

### 6. Run the native image

```bash
./your-app
```

---

## Example project

We have built a [complete example project for GraalVM](https://github.com/flamingock/flamingock-examples/tree/master/graalvm) that demonstrates:
- A working Flamingock configuration with GraalVM
- Sample change units
- Proper resource configuration
- Native image generation process

You can use this example as a reference implementation while following the steps in this guide.

---

// File: frameworks/kubernetes

# How does Flamingock work within a k8s ecosystem? (to-do)

---

// File: frameworks/springboot-integration/introduction

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Spring Boot integration

Flamingock integrates seamlessly with Spring Boot, offering a powerful and flexible setup for managing your change units in Spring-based applications.

This integration leverages Spring Boot‚Äôs features‚Äîsuch as dependency injection, profiles, event publishing, and property configuration‚Äîto provide a streamlined and production-ready experience.

---

## Why integrate Flamingock with Spring Boot?

Using Flamingock with Spring Boot allows you to:

- Inject Spring-managed beans directly into change units
- Configure Flamingock via Spring Boot's native configuration files
- Use Spring profiles to control when specific change units run
- Receive execution lifecycle events using `ApplicationEventPublisher`
- Choose between Spring Boot lifecycle hooks (`ApplicationRunner` or `InitializingBean`) to run Flamingock.

---

## Two setup approaches

Flamingock offers **two ways to integrate with Spring Boot**, depending on how much control you want over the configuration and lifecycle.

### Builder-based setup (manual)

This approach gives you full control and uses the standard Flamingock builder with `@EnableFlamingock(setup = SetupType.BUILDER)`.  
You manually inject the required Spring Boot components(ApplicationContext and ApplicationEventPublisher) as well as any Flamingock core configuration.

In addition, you can register other dependencies manually ‚Äî these will take precedence over beans from the Spring context when resolving what to inject into change units.

This is recommended for advanced users or highly customized environments.

> See: [Builder-based setup](./builder-based-setup.md)

---

### Automatic setup

This is the simplest way to enable Flamingock in Spring Boot.  
Just annotate any class with `@EnableFlamingock` (commonly your main application class), and Flamingock will:

- Auto-detect the application context and event publisher
- Read configuration from Spring Boot config files
- Automatically wire the `FlamingockRunner` bean
- Process the setup configuration from the annotation

Ideal for most users who prefer convention over configuration.

> See: [Automatic setup](./enable-flamingock-setup.md)

---

## Runner strategy: ApplicationRunner vs InitializingBean

Flamingock supports two strategies for executing its process during Spring Boot startup. You can control this via the `runnerType` property in your Spring configuration (`flamingock.runnerType`), or programmatically if using the manual builder.

### Comparison

|                                            | `ApplicationRunner`                                                        | `InitializingBean`                                                |
|--------------------------------------------|----------------------------------------------------------------------------|-------------------------------------------------------------------|
| **Phase**                                  | After all beans are initialized ‚Äî just before the app is marked as started | During bean initialization ‚Äî before the app is considered started |
| **Context availability**                   | ‚úÖ Full ‚Äî all Spring beans and profiles available                           | ‚ö†Ô∏è Limited ‚Äî not all beans may be available                       |
| **Typical use case**                       | Most common ‚Äî recommended for production environments                      | For lightweight internal logic or strict startup ordering         |
| **Events fully supported?**                | ‚úÖ Yes                                                                      | ‚ö†Ô∏è Risky ‚Äî context may not be fully ready                         |
| **Spring beans available in change units** | ‚úÖ Yes                                                                      | ‚ö†Ô∏è May fail or be incomplete                                      |

### Startup failure behavior

If Flamingock encounters an error during execution ‚Äî whether using `ApplicationRunner` or `InitializingBean` ‚Äî the Spring Boot application **will fail to start**.

This is intentional: Flamingock runs before the application is marked as ready. In deployment platforms such as **Kubernetes**, a failure at this stage will:

- Prevent the container from reaching a *Ready* state
- Trigger restart policies, health checks, or rollbacks as configured
- Ensure that the system is never exposed in a partially initialized or inconsistent state

This behavior ensures your application only starts when all change units have been applied successfully.

---

## Dependency

To use the Spring Boot integration, add the appropriate module for your version:

<Tabs groupId="gradle_maven">
  <TabItem value="gradle" label="Gradle">
```kotlin
// For Spring Boot 3.x
implementation("io.flamingock:flamingock-springboot-integration:$flamingockVersion")

// For Spring Boot 2.x (legacy)
implementation("io.flamingock:flamingock-springboot-integration-v2-legacy:$flamingockVersion")
```
  </TabItem>
  <TabItem value="maven" label="Maven">
```xml
<!-- For Spring Boot 3.x -->
<dependency>
    <groupId>io.flamingock</groupId>
    <artifactId>flamingock-springboot-integration</artifactId>
    <version>${flamingock.version}</version>
</dependency>

<!-- For Spring Boot 2.x (legacy) -->
<dependency>
    <groupId>io.flamingock</groupId>
    <artifactId>flamingock-springboot-integration-v2-legacy</artifactId>
    <version>${flamingock.version}</version>
</dependency>
```
  </TabItem>
</Tabs>

### Version Compatibility

Flamingock provides two editions for Spring Boot integration.

### Why are there two Spring Boot integration Community-Edition artifacts?

The only difference is the Java version they target:

- `flamingock-springboot-integration` ‚Äî requires JDK 17 or newer.
- `flamingock-springboot-integration-v2-legacy` ‚Äî kept for teams still on Spring Boot 2 who must stay on JDK 8 ‚Äì 11.

Choose the artifact that matches the JDK level of your application today; switching later is as simple as changing the dependency.

| Package Name                                   | Spring Boot Version  |
|------------------------------------------------|----------------------|
| `flamingock-springboot-integration`            | [3.0.0, 4.0.0)       |
| `flamingock-springboot-integration-v2-legacy`  | [2.0.0, 3.0.0)       |

---

## :white_check_mark: Best practices

Consider the following recommendations to get the most out of Flamingock‚Äôs Spring Boot integration:

- **Prefer `ApplicationRunner` as your runner strategy**  
  It ensures Flamingock runs after the application context is fully initialized, giving it access to all beans, profiles, and configuration. It also integrates more safely with event publishing and external monitoring tools like Actuator or Prometheus.

- **Use automatic setup (`@EnableFlamingock`) for simpler setups**  
  Unless you have advanced needs (such as injecting non-Spring-managed dependencies), the automatic setup provides a clean and reliable integration path.

- **Use Spring profiles to scope change units**  
  Profiles let you control when specific change units execute, avoiding the need for environment-specific pipelines.

- **Avoid manual execution unless absolutely necessary**  
  Letting Spring handle the execution via `ApplicationRunner` or `InitializingBean` ensures Flamingock runs at the appropriate time in your application lifecycle.

- **Register custom platform components using `.addDependency(...)` only when required**  
  Most applications using automatic setup will not need to register components manually.

---

// File: frameworks/springboot-integration/enable-flamingock-setup

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Automatic Setup

Flamingock provides a convenient automatic integration with Spring Boot using the `@Flamingock` annotation. This setup is ideal when you want Flamingock to automatically detect and wire required components without writing explicit builder logic.

---

## Import the springboot integration library

Add the appropriate Flamingock Spring Boot integration dependency, depending on your version:

<Tabs groupId="gradle_maven">
  <TabItem value="gradle" label="Gradle">
```kotlin
// For Spring Boot 3.x (Spring 6.x)
implementation("io.flamingock:flamingock-springboot-integration:$flamingockVersion")

// For Spring Boot 2.x (Spring 5.x, legacy)
implementation("io.flamingock:flamingock-springboot-integration-v2-legacy:$flamingockVersion")
```
  </TabItem>
  <TabItem value="maven" label="Maven">
```xml
<!-- For Spring Boot 3.x (Spring 6.x) -->
<dependency>
    <groupId>io.flamingock</groupId>
    <artifactId>flamingock-springboot-integration</artifactId>
    <version>${flamingock.version}</version>
</dependency>

<!-- For Spring Boot 2.x (Spring 5.x, legacy) -->
<dependency>
    <groupId>io.flamingock</groupId>
    <artifactId>flamingock-springboot-integration-v2-legacy</artifactId>
    <version>${flamingock.version}</version>
</dependency>
```
  </TabItem>
</Tabs>

### Version Compatibility

Check [Version Compatibility](introduction.md#version-compatibility)

## Configure setup and activate integration

To activate the integration, add `@EnableFlamingock` to any class in your application (commonly on your main class or a configuration class):

```java
import io.flamingock.core.api.annotations.EnableFlamingock;
import io.flamingock.core.api.annotations.Stage;

@EnableFlamingock(
    stages = {
        @Stage(location = "com.yourapp.changes")
    }
)
@SpringBootApplication
public class MyApplication {
  public static void main(String[] args) {
    SpringApplication.run(MyApplication.class, args);
  }
}
```

The `@EnableFlamingock` annotation enables automatic Spring Boot integration, which:

- Detect and use Spring‚Äôs `ApplicationContext` and `ApplicationEventPublisher`
- Loads Flamingock configuration directly from your Spring Boot config file
- Automatically configures the runner (e.g., ApplicationRunner or InitializingBean)
- Processes the setup configuration from the annotation

---

## Providing configuration

Runtime configuration is defined using standard Spring Boot configuration files. Use the `flamingock` section for all core and edition-specific options.

```yaml
flamingock:
  lockAcquiredForMillis: 1200
  runnerType: InitializingBean
  # other configuration...
```

:::info
If the `runnerType` property is not provided, Flamingock defaults to using `ApplicationRunner`.
:::

---

## Next steps

- Want full control over the builder? See [Builder-based setup](builder-based-setup.md)
- Explore [Spring Boot profile support](profiles.md)
- Learn about [Flamingock lifecycle events](../../flamingock-library-config/events.md)

---

// File: frameworks/springboot-integration/builder-based-setup

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

Flamingock supports manual integration with Spring Boot using the same builder API shared with standalone setups. 

This unified approach makes it easy to switch between environments without changing your integration logic, while giving you full control over how Flamingock is initialized and executed within your application.

It‚Äôs especially useful when integrating Flamingock alongside other frameworks, when you need fine-grained control over the setup process, or when you want to override or prioritize specific dependencies manually.

---

## Import the springboot integration library

Add the appropriate Flamingock Spring Boot integration dependency, depending on your version:

<Tabs groupId="gradle_maven">
  <TabItem value="gradle" label="Gradle">
```kotlin
// For Spring Boot 3.x
implementation("io.flamingock:flamingock-springboot-integration:$flamingockVersion")

// For Spring Boot 2.x (legacy)
implementation("io.flamingock:flamingock-springboot-integration-v2-legacy:$flamingockVersion")
```
  </TabItem>
  <TabItem value="maven" label="Maven">
```xml
<!-- For Spring Boot 3.x -->
<dependency>
    <groupId>io.flamingock</groupId>
    <artifactId>flamingock-springboot-integration</artifactId>
    <version>${flamingock.version}</version>
</dependency>

<!-- For Spring Boot 2.x (legacy) -->
<dependency>
    <groupId>io.flamingock</groupId>
    <artifactId>flamingock-springboot-integration-v2-legacy</artifactId>
    <version>${flamingock.version}</version>
</dependency>
```
  </TabItem>
</Tabs>

### Version Compatibility

Check [Version Compatibility](introduction.md#version-compatibility)

## Configure setup and build Flamingock manually

With the manual setup, you first need to configure Flamingock using `@EnableFlamingock` annotation with `setup = SetupType.BUILDER`, then manually configure and run Flamingock using the builder API.

### 1. Configure the annotation

```java
@EnableFlamingock(
    setup = SetupType.BUILDER,
    stages = {
        @Stage(location = "com.yourapp.changes")
    }
)
@Configuration
public class FlamingockConfig {
    // Configuration class
}
```

### 2. Manual builder configuration

With the manual setup, you are responsible for configuring and running Flamingock using the builder API. This includes:

- Providing your configuration (e.g., lock settings, metadata) directly via the builder
- Registering the required **platform components** using `.addDependency(...)`
- `ApplicationContext`
- `ApplicationEventPublisher`

```java
FlamingockBuilder builder = Flamingock
    .setLockAcquiredForMillis(120000) // example config
    .addDependency(applicationContext)
    .addDependency(applicationEventPublisher);
```

:::info
Platform components are registered using the same `.addDependency(...)` method used for change unit dependencies.  
For details, see the [Platform component injection](../../flamingock-library-config/platform-component-injection.md) page.
:::
---
## Overriding Spring-provided dependencies
When using the builder-based setup, Flamingock will attempt to resolve dependencies using the Spring context.

However, if you manually register a dependency via `.addDependency(...)`, that dependency will take precedence over anything resolved from the Spring context. This gives you fine-grained control when you want to:

- Override a Spring-managed bean with a custom instance
- Inject mock or test-specific versions of services
- Provide external or non-Spring-managed components directly

```java
builder
  .addDependency(customClientService) // Overrides Spring's bean of same type
  .addDependency(applicationContext); // Registers Spring context for base dependency injection
```
In a nutshell, Flamingock resolves dependencies using the following order:
- Manually added dependencies via .addDependency(...)
- Beans from the Spring context (if ApplicationContext was registered)

---

## Running Flamingock

Once you've configured the builder, you can choose how to execute Flamingock:

### Option 1: Run manually

You can run Flamingock manually:

```java
builder.build().run();
```

### Option 2: Expose as a Spring Bean

Alternatively, you can integrate Flamingock into the Spring Boot lifecycle by exposing it as an `ApplicationRunner` or `InitializingBean`:

```java
@Bean
public ApplicationRunner flamingockRunner() {
  return SpringbootUtil.toApplicationRunner(builder.build());
}
```

Or:

```java
@Bean
public InitializingBean flamingockRunner() {
  return SpringbootUtil.toInitializingBean(builder.build());
}
```

This ensures Flamingock executes automatically as part of the Spring Boot startup sequence.

---

## Next steps

**Want to avoid manual setup?** Explore the [Automatic Setup](./enable-flamingock-setup.md) for automatic integration with minimal code.

---

// File: frameworks/springboot-integration/profiles

# Spring Boot profiles

Flamingock supports **Spring Boot profiles** out of the box. This allows you to conditionally run specific change units depending on which profile(s) are active in your application.

This is useful for managing environment-specific changes, such as different initialization data for `dev`, `staging`, or `prod` environments.

---

## What is a Spring profile?

Spring profiles provide a way to segregate parts of your application configuration and behavior based on the active environment.

You can define profiles like `dev`, `test`, `staging`, or `prod`, and activate **one or more** of them using any of the following methods:

- Inside `application.yml` or `application.properties`:
  ```yaml
  spring:
    profiles:
      active: dev,staging
  ```

- Using profile-specific configuration files like `application-dev.yml` or `application-prod.yml`

- As command-line arguments:
  ```bash
  --spring.profiles.active=dev,staging
  ```

- Through environment variables:
  ```bash
  SPRING_PROFILES_ACTIVE=dev,staging
  ```

When multiple profiles are active, Flamingock evaluates each change unit against **all active profiles**, and includes it if any match.

---

## How Flamingock uses profiles

Flamingock automatically retrieves the active profiles from Spring‚Äôs `ApplicationContext`. You don‚Äôt need to manually provide them.

You can then annotate any change unit with Spring‚Äôs native `@Profile` annotation to control whether it runs:

```java
@ChangeUnit(id = "add-test-data", order = "001")
@Profile("dev")
public class AddTestDataChangeUnit {
  // will only run if "dev" profile is active
}
```

Flamingock applies the same logic as Spring Boot when evaluating whether a change unit should run.

---

## Multiple profiles

You can declare multiple profiles in a single `@Profile` expression:

```java
@Profile({"dev", "staging"})
```

This change unit will run if **any** of the listed profiles is active.

---

## Excluding profiles

To exclude a change unit from a specific profile, you can use Spring Expression Language (SpEL):

```java
@Profile("!prod")
```

This will run the change unit in **all environments except `prod`**.

---

## ‚úÖ Best practices

- Use profiles to isolate test data, preview features, or tenant-specific migrations
- Avoid mixing profile-specific logic inside a single change unit ‚Äî split them into separate classes
- Keep profile names consistent across your team and environments (e.g., use `dev` everywhere, not `development`, `dev-env`, etc.)
- Consider grouping related change units under a shared profile for easier activation

---

// File: getting-started/get-started

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Get started

This guide will walk you through the basics of using Flamingock with a step-by-step example, so you can get up and running quickly‚Äîwhether you're using the **Cloud Edition** or one of the **Community Edition** variants.

## 1. Add Flamingock client dependency

To begin, add the Flamingock client library to your project. You can use either:

- Cloud Edition (compatible with all systems)
- Community Edition (you need to choose the specific storage: MongoDB, DynamoDB, etc.)

Flamingock supports BOM (Bill of Materials), which simplifies dependency management by allowing you to declare the version once and avoid mismatches across related modules. This is especially useful when working with multiple Flamingock artifacts.

Example for **Cloud Edition**:
<Tabs groupId="gradle_maven">
    <TabItem value="gradle" label="Gradle" default>
        ```kotlin
        implementation(platform("io.flamingock:flamingock-cloud-bom:$flamingockVersion"))
        implementation("io.flamingock:flamingock-cloud")
        ```
    </TabItem>
    <TabItem value="maven" label="Maven">
        ```xml
        <dependency>
            <groupId>io.flamingock</groupId>
            <artifactId>flamingock-cloud</artifactId>
            <version>${flamingockVersion}</version>
        </dependency>
        ```
    </TabItem>
</Tabs>

Example for **Community Edition** using MongoDB Sync4:
<Tabs groupId="gradle_maven">
    <TabItem value="gradle" label="Gradle" default>
        ```kotlin
        implementation(platform("io.flamingock:flamingock-ce-bom:$flamingockVersion"))
        implementation("io.flamingock:flamingock-ce-mongodb-sync")
        ```
    </TabItem>
    <TabItem value="maven" label="Maven">
        ```xml
        <dependency>
        <groupId>io.flamingock</groupId>
        <artifactId>flamingock-ce-mongodb-sync</artifactId>
        <version>${flamingockVersion}</version>
        </dependency>
        ```
    </TabItem>
</Tabs>


All Community Editions:

- **flamingock-ce-mongodb-sync**
- **flamingock-ce-mongodb-springdata**
- **flamingock-ce-mongodb-springdata-v3-legacy**
- **flamingock-ce-dynamodb**
- **flamingock-ce-couchbase**

:::note
For configuration details specific to the Community Edition, see the [community edition section](../community-edition/Introduction.md)
:::
---

## 2. Add Flamingock annotation processor

Flamingock uses an annotation processor to scan and collect metadata from your changes‚Äîwhether defined through code or templates.

This is required at **build time** and supports:

- **Code-based** with`@ChangeUnit` 
- **Template-based** (declarative YAML)

<Tabs groupId="gradle_maven">
    <TabItem value="gradle" label="Gradle" default>
        ```kotlin
        annotationProcessor("io.flamingock:flamingock-processor:$flamingockVersion")
        ```
    </TabItem>
    <TabItem value="maven" label="Maven">
        ```xml
        <build>
          <plugins>
            <plugin>
              <groupId>org.apache.maven.plugins</groupId>
              <artifactId>maven-compiler-plugin</artifactId>
              <version>3.11.0</version>
              <configuration>
                <annotationProcessorPaths>
                  <path>
                    <groupId>io.flamingock</groupId>
                    <artifactId>flamingock-processor</artifactId>
                    <version>${flamingockVersion}</version>
                  </path>
                </annotationProcessorPaths>
              </configuration>
            </plugin>
          </plugins>
        </build>
        ```
    </TabItem>
</Tabs>

---

## 3. Define a ChangeUnit

A **ChangeUnit** is a unit of logic that Flamingock will execute during your application's startup.

Changes can be defined in a **code-based** or **template-based** style, depending on your preferred approach.
For a deeper understanding of how changes work and **when to choose one approach over the other**, check out the [Concepts ‚Üí ChangeUnits](../overview/core-concepts.md#-changeunits) section.

 
<Tabs groupId="change">
    <TabItem value="code_based" label="Code Based" default>
```java
@Change(id = "create-table", order = "1", author = "antonio", transactional = false)
public class CreateTableChange {
    @Execution
    public void execute(Connection connection) throws SQLException {
        connection.createStatement().executeUpdate("CREATE TABLE clients (id INT, name VARCHAR(255))");
    }

    @RollbackExecution
    public void rollback(Connection connection) throws SQLException {
        connection.createStatement().executeUpdate("DROP TABLE clients");
    }
}
```
    </TabItem>
    <TabItem value="template_based" label="Template Based">
        ```yaml
            id: create-table
            author: antonio
            order: 1
            transactional: false #DDL are not transactional in Mysql, so it won't be rolled back
            template: sql-template
            templateConfiguration:
                executionSql: CREATE TABLE clients (id INT, name VARCHAR(255))
                rollbackSql: DROP TABLE IF EXISTS clients
        ```
    </TabItem>
</Tabs>

:::info
You can combine both styles in the same project. See our [Examples](../resources/examples.md)  to see these in action.
:::

---

## 4. Configure the Setup

Flamingock organizes and executes your changes using **stages**. By default, you'll use a single stage that groups all your changes and executes them sequentially.

Configure Flamingock using the `@EnableFlamingock` annotation on any class in your application:

Here‚Äôs a basic structure:

```java
@EnableFlamingock(
    stages = {
        @Stage(location = "com.yourcompany.changes")
    }
)
public class App {
}
```

### Stage configuration:
- `location`: Location where changes are found (mandatory)
  - **Package**: `"com.yourcompany.changes"` - scans for code and templates
  - **Resource directory**: `"flamingock/templates"` - scans for templates only(in the resources folder by default)
- `name`: (Optional) Stage name - auto-derived from location if not provided

:::tip Default approach:
Most applications use a single stage: `@Stage(location = "com.yourcompany.changes")`. The name is auto-derived ("changes") and this is the recommended default setup.
:::

:::info Advanced options:
For advance options, visit our [stage section](../flamingock-library-config/setup-and-stages.md)
:::

---

## 5. Configure Flamingock

Before running your application, make sure Flamingock is properly configured, depending on the [edition](../overview/Editions.md) and setup you are using:

- **Cloud Edition**: Set your API token, service name, and environment.
- **Community Edition**: Provide connection details for your storage system (e.g., connection for MongoDB, DynamoDB, CouchBase, etc.).

This configuration is applied through the Flamingock builder.

```java
public class App {
  public static void main(String[] args) {
    FlamingockStandalone
      .setApiToken("your-flamingock-api-token") 
      .setEnvironment("dev")
      .setService("inventory-service")
      .build()
      .run();
  }
}
```

:::info 
If you're using some frameworks, like Spring Boot, Flamingock may run automatically on application startup (if properly configured).
:::
---

## 6. Compile the project

Now that you‚Äôve defined your changes and configured Flamingock, it‚Äôs time to compile your project.

If everything is correctly set up, Flamingock‚Äôs annotation processor will kick in and you‚Äôll see diagnostic messages during compilation:

<details>
<summary>Click to see the expected logs</summary>
<Tabs groupId="gradle_maven">
<TabItem value="gradle" label="Gradle" default>

```bash
> Task :compileJava
Note:    [Flamingock] Starting Flamingock annotation processor initialization.
Note:    [Flamingock] 'resources' parameter NOT passed. Using default 'src/main/resources'
Note:    [Flamingock] 'sources' parameter NOT passed. Searching in: '[src/main/java, src/main/kotlin, src/main/scala, src/main/groovy]'
Note:    [Flamingock] Reading flamingock setup from annotation configuration
Note:    [Flamingock] Initialization completed. Processed templated-based changes.
Note:    [Flamingock] Searching for code-based changes (Java classes annotated with @Change or legacy @ChangeUnit annotations)
Note:    [Flamingock] Reading flamingock setup from annotation configuration
Note:    [Flamingock] Finished processing annotated classes and generating metadata.
Note:    [Flamingock] Final processing round detected - skipping execution.
```

</TabItem>
<TabItem value="maven" label="Maven">

```bash
[INFO]   [Flamingock] Starting Flamingock annotation processor initialization.
[INFO]   [Flamingock] 'resources' parameter NOT passed. Using default 'src/main/resources'
[INFO]   [Flamingock] 'sources' parameter NOT passed. Searching in: '[src/main/java, src/main/kotlin, src/main/scala, src/main/groovy]'
[INFO]   [Flamingock] Reading flamingock setup from annotation configuration
[INFO]   [Flamingock] Initialization completed. Processed templated-based changes.
[INFO]   [Flamingock] Searching for code-based changes (Java classes annotated with @Change or legacy @ChangeUnit annotations)
[INFO]   [Flamingock] Reading flamingock setup from annotation configuration
[INFO]   [Flamingock] Finished processing annotated classes and generating metadata.
[INFO]   [Flamingock] Final processing round detected - skipping execution.
```

</TabItem>
</Tabs>
</details>

:::note 
The exact output may vary depending on your compiler settings, project layout, and whether you've customized the sources or resources paths using compiler options.
:::

These logs confirm that:
- Flamingock found your pipeline
- Template and code-based changes were processed
- Metadata was generated for execution

:::tip
If you don‚Äôt see this output, ensure the annotation processor is correctly included in your dependencies and that your @Flamingock annotation is properly configured.
:::

---

## 7. Run your Application ‚Äî Flamingock handles the changes!
Once your project is compiled and Flamingock is configured, you're ready to run the application.

When your application starts, Flamingock will be executed as part of the startup process:
- Load the setup configuration (actually the metadata generated from the annotation configuration during the compilation)
- Evaluate pending changes
- Execute the changes
- Audit the execution status

### Example Output

You should see logs like the following:
```bash
[main] INFO io.flamingock.core.runner.PipelineRunner - Starting Flamingock migration
Stage: mysql_stage
  1) id: create-table
     Started              ‚úÖ - OK
     Executed             ‚úÖ - OK
     Audited[execution]   ‚úÖ - OK
[main] INFO io.flamingock.core.runner.PipelineRunner - Finished Flamingock process successfully

```
---
## Next Steps

- Dive into [Spring Boot Integration](../frameworks/springboot-integration/introduction.md)
- Learn more about [Configuration Options](../flamingock-library-config/introduction.md)
- Understand [Rollback & Auditing](../overview/core-concepts.md#-rollbacks)

---

// File: getting-started/how-it-works

# How it works?

Flamingock provides a structured, auditable, and version-controlled approach to managing changes across your systems, services, and configurations ‚Äî simplifying the release process and reducing the risk of failure.

At a high level, here‚Äôs how Flamingock works:

```mermaid
flowchart LR
    A[1: Define Changes as ChangeUnits] --> B[2: Organize into Workflows]
    B --> C[3: Execute at Startup or On Demand]
    C --> D[4: Acquire Distributed Lock]
    D --> E[5: Apply ChangeUnits Sequentially]
    E --> F[6: Audit Changes]
    F --> G{Success?}
    G -- Yes --> H[Finish Deployment]
    G -- No --> I[Invoke Rollback Logic]
    I --> H
```
:::tip Flamingock helps development teams **release faster**, **with confidence**, and **without surprises**. It provides an auditable traceable system where all Changes are centrally managed.
:::

---

## 1. Define your changes as ChangeUnits

Every change ‚Äî whether it‚Äôs a database migration, a feature flag update, or a third-party API configuration ‚Äî is encapsulated into a **ChangeUnit**.

- Each ChangeUnit is uniquely identified, versioned, and optionally includes rollback logic.
- Changes can be defined in code (Java/Kotlin) or declaratively (YAML/JSON) via reusable templates [**templates**](../templates/templates-introduction.md).

---

## 2. Organize changes into Workflows

ChangeUnits are grouped into stages and structured into a [**Workflow**](../overview/core-concepts.md?#-workflows) pipeline to represent a coordinated sequence of changes.

- Workflows allow you to define how changes should be applied: sequentially or (in future releases) in parallel or conditionally.
- This logical grouping simplifies the orchestration and order of changes across systems / services / components.

---

## 3. Execute at startup (or on demand)

When your application starts, Flamingock automatically:

- Scans for pending ChangeUnits
- Applies them in the defined workflow order
- Ensures **idempotency** so the same changes aren't applied twice

Flamingock can also run in standalone mode, ideal for setups that don't use an underlying framework (ie. Spring).

---

## 4. Locking for safety in distributed environments

Using **distributed locking**, Flamingock ensures only one instance (or one node) applies changes at a time ‚Äî preventing race conditions or duplicate executions.

- Works across microservices and distributed system setups
- Supports multiple store types:
  - Flamingock Community Edition, with native driver compatibility with MongoDB, Couchbase, DynamoDB
  - Flamingock SaaS or Flamingock self-hosted options to leverage Flamingock's provisioned storage.

---

## 5. Audit everything, rollback when needed

Every change applied is **fully audited**:

- When, by whom, and what was changed
- Status of execution (success/failure)
- And a provisioned optional rollback strategy for non-transactional integrations.

In case of failure or rollback scenario, Flamingock uses defined compensating logic to revert changes and restore consistency.

---

## Example Use Cases

### Example 1: Versioning made simple

Imagine a developer needs to introduce the following system changes as part of a release:

1. Add a new field to the user collection in MongoDB  
2. Enable a feature flag in a SaaS dashboard via REST API  
3. Update an environment variable in a remote configuration store

![Example 1](../../static/img/Flamingock%20Example%20use%20case%201.png)

Here‚Äôs how Flamingock helps:

- The developer defines each change as an individual **ChangeUnit**, with rollback logic included.
- These ChangeUnits are grouped into stages and a embedded into a **workflow**, ensuring they run in the correct order.
- On the next application startup, Flamingock:
  - Detects that these changes haven‚Äôt been applied yet
  - Acquires a distributed lock
  - Executes all ChangeUnits safely and atomically
  - Logs every detail in the audit system

Flamingock rolls back automatically in case of failure(if defined), ensuring the system doesn‚Äôt end up in a partial state.

The result? Faster deployments, consistent environments, and complete traceability.

---

### Example 2: Synchronizing Changes across domain services

In a Domain-Driven Design (DDD) environment, a change to a domain model often requires updates across several components:

1. Update to the Database and API specification (e.g., OpenAPI/Swagger)
2. Modify the Kafka event schema and topic configuration
3. Adjust the API Gateway routing and validation rules

![Example 2](../../static/img/Flamingock%20Example%20use%20case%202.png)

Here‚Äôs how Flamingock makes this seamless:

- The team creates **ChangeUnits** for:
  - Updating the Database and  API specification
  - Reconfiguring Kafka topics and event schema
  - Updating API Gateway specs
- All related *ChangeUnits* are grouped into a single **workflow** to ensure coordinated application.
- During deployment, Flamingock:
  - Applies all changes atomically, respecting dependencies
  - Acquires a distributed lock to avoid concurrent modifications
  - Audits the entire process for traceability and compliance

This ensures that changes in the Database, messaging, and APIs exposed in the gateway are synchronized, reducing integration errors and deployment friction across microservices.

---

---

// File: overview/Introduction

# Introducing Flamingock
*The evolution of Mongock ‚Äî reimagined for the modern enterprise*

![Flamingock logo](../../static/img/Flamingock-04.png)

Managing change across today‚Äôs distributed systems is complex ‚Äî from database migrations to API evolution and SaaS configuration updates.

**Flamingock** provides a unified, auditable, and version-controlled approach to managing these changes with confidence.

Built on the principles of **Change-as-Code**, Flamingock enables your teams to:

- Version and document system changes  
- Maintain compliance with full traceability  
- Accelerate deployments with safe, coordinated rollouts

Flamingock ensures your systems changes evolve reliably ‚Äî at scale.

**Ready to modernize your change management?**  
[Get started](../getting-started/get-started.md) and see how Flamingock can power your release lifecycle.


![Flamingock gif](../../static/img/Flamingock%20process%20animation%20(1).gif)

## Why Flamingock?
Our objective is to reduce software release overhead by providing a tool that can be enable tracking configuration changes  programatically (change-as-code), with the language of choice of the Application developer.  This reduces the dependency on infrastructure engineers to maintain configuration changes that are led/introduced by the Application developer, simplifying the release process, reducing risk during deployments, and reducing time to market and skills required for developing and maintaining Configuration changes.

With multiple deployment model offerings, Flamingock provides helps teams by:

**Centralising services, systems & environment changes**
Version and ship your system changes with your application and store them centrally. Flamingock allows operations to manage your changes (Execution, Rollback, Undo, Audit, etc.)

**Reduce team & skills dependencies**
Empower Developers to have full control over the Application, external configuration, and database changes. Allow to manage stateful and stateless changes in distributed systems in a safe and reliable manner.

**Achieve Configuration automation of all Systems**
Synchronise system dependency changes with your Application changes, as they ship together. The deployment of the Application will execute a System changes to the required state, achieving immutable deployments in any environment.


## Some example use cases

Some examples of these use cases (but not limited to) are:

- Persistent storage management
- Manage deployment dependencies
- Configuration of external cloud SaaS providers
- Database migrations - supported by our legacy Mongock engine, but extended to any Database (NoSQL and SQL).
- API Gateway configurations
- Message broker configurations + *many more!*

Our tool offers managing configuration changes to any system/component in a safe and audited manner within the Application context.


#### What is Flamingock not suitable for?

We are not an Infrastructure provider (neither intend to be). We believe that there are multiple good widely adopted solutions within the infrastrucuture space. 

We provide Application developers the ability to configure Application domain-specific resources within those infrastructure components. This enables following a Domain-driven ownership for Application developers, provisioning them with self-serve capabilities and autonomy for configuring their resources within the boundaries of an existing infrastructure.

# How Flamingock works?

**‚öôÔ∏è Code It. Deploy It. Forget It.**  

With Flamingock, developers define any component changes (database, system changes, SaaS, etc. )  **directly in application code** using familiar programming constructs such as classes and annotations, or template-based formats like YAML. The Flamingock client library then:  

- **Automatically executes** changes during application startup  
- **Generates audit trails** for full transparency and compliance  
- **Keeps changes version-locked** to your application releases  

**Benefits:**  
- **No more out-of-band scripts** - Changes travel with your app code  
- **Cluster-safe execution** - Designed for distributed systems from the ground up  
- **Native version control** - Every change is code-reviewed alongside feature development  

*Built for the modern deployment pipeline where infrastructure should be as agile as your code.*  

üëâ **Dive deeper:** | [How it works?](../getting-started/how-it-works.md)  | [Technical Overview](technical-overview.md) | [Quickstart Guide](../getting-started/get-started.md)

---

// File: overview/Change-as-Code

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

**Automate changes. Version changes. Control changes.**  
Change-as-Code (CaC) means every system change‚Äîwhether it‚Äôs an S3 bucket toggle, a new database schema, or a Kafka topic configuration‚Äîis authored, versioned, and audited just like application code.

At Flamingock, we champion CaC as the foundation for truly reliable, auditable, and repeatable deployments. No more one-off shell scripts or manual ‚Äúclicks‚Äù in a console‚Äîevery change is written in code, tracked in your VCS, and executed in a controlled pipeline.

---

## Why CaC matters today

Modern applications increasingly span dozens of external systems‚Äîranging from relational and NoSQL databases to SaaS feature flags, message buses, and infrastructure APIs. Managing these changes manually or with ad-hoc scripts leads to:

- **Drift and ‚Äúsnowflake‚Äù environments**  
  When teams manually tweak production configurations, environments diverge, making rollbacks or audits nearly impossible.

- **Lack of auditability**  
  Regulatory and security teams require a full record of ‚Äúwhat changed, when, and who made it.‚Äù Spreadsheets and one-off commands don‚Äôt cut it.

- **Inefficient collaboration**  
  Developers, operations, and security need a single source of truth: change definitions in code, reviewed and versioned via pull requests.

- **Increased risk of human error**  
  Pasting commands into a console or clicking UI checkboxes invites typos, misconfigurations, and stress during deployment windows.

Flamingock‚Äôs CaC approach solves these problems by treating every external-system change as first-class code‚Äîcomplete with version control, automated execution, and a centralized audit trail.

---

## Four Pillars of Change-as-Code

1. **One-Hundred-Percent Versioned**  
   All ChangeUnits live in your Git repository (or other VCS). This means you can review, diff, and roll back changes just like application code.

2. **Automated Execution**  
   Flamingock scans and applies ChangeUnits at application startup or on-demand via the CLI. No manual intervention‚Äîjust code running code.

3. **Auditable & Traceable**  
   Every ChangeUnit outcome is recorded in an audit store (your database or Flamingock Cloud). Teams can query ‚Äúwho ran what change, and when,‚Äù ensuring full compliance.

4. **Cross-Component Support**  
   Whether it‚Äôs SQL/NoSQL DDL, S3 buckets, Kafka topics, feature-flag toggles, or REST API calls‚ÄîFlamingock treats them all as code. Your entire system evolves in lockstep.

---

## ‚ÄúHello, CaC‚Äù Code Snippet

Imagine you need to toggle a feature flag in a downstream service (not a database). In Flamingock, you‚Äôd write:

```java
@Change(id = "enable-autosave", order = "0005", author = "ops-team")
public class _0005_EnableAutoSaveFeature {

  @Execution
  public void enableAutoSave(FeatureFlagClient client) {
    client.setFlag("autosave_feature", true);
  }

  @RollbackExecution
  public void disableAutoSave(FeatureFlagClient client) {
    client.setFlag("autosave_feature", false);
  }
}
```

- **Versioned**: This code-based or template-based ChangeUnit lives in your VCS.
- **Automated**: Flamingock executes it in order (0005) at startup or via CLI.
- **Auditable**: Upon success, an audit entry is written to your audit store.
- **Cross-Component**: The same pattern works for a DynamoDB schema change, a Kafka topic creation, or any REST API call.

---

## Illustration: CaC vs. IaC

![](../../static/img/Change%20as%20code-2.png)

- **Infrastructure as Code (IaC)**: Use Terraform, CloudFormation, Pulumi, etc., to provision VMs, networks, and databases (the ‚Äúfoundation‚Äù).
- **Change as Code (CaC)**: Use Flamingock to version and apply everything that lives on that foundation‚Äîdatabase schemas, feature flags, SaaS configurations, message topics, and more.

---

## Real-World Use Cases

### Multi-tenant SaaS Onboarding

**Problem**: Over the lifetime of your application, you might need to create and then later modify external resources‚Äîsuch as an S3 bucket, Kafka topics, IAM roles, and initial database state‚Äîas part of each new release. Doing this manually or with ad-hoc scripts risks drift, missing audits, and inconsistent environments..

**CaC Solution**: Define a sequence of ChangeUnits that run in order on mutiple deployments, inserting audit entries and ensuring reproducible, versioned updates::
<Tabs groupId="config">
<TabItem value="code-base" label="Code" default>
```java
@ChangeUnit(id = "provision-bucket", order = "0001", author = "team-a", transactional = false)
public class _0001_ProvisionBucketChange {

    @Execution
    public void execute(S3Client s3) {
        s3.createBucket(CreateBucketRequest.builder()
                .bucket("flamingock-app-bucket")
                .build());
    }

    @RollbackExecution
    public void rollback(S3Client s3) {
        s3.deleteBucket(DeleteBucketRequest.builder()
                .bucket("flamingock-app-bucket")
                .build());
    }
}

@ChangeUnit(id = "create-kafka-topics", order = "0002", author = "devops", transactional = false)
public class _0002_CreateKafkaTopicsChange {

    @Execution
    public void exec(KafkaAdminClient admin) {
        NewTopic topic1 = new NewTopic("app-events", 3, (short) 1);
        NewTopic topic2 = new NewTopic("user-notifications", 2, (short) 1);
        admin.createTopics(Arrays.asList(topic1, topic2));
    }

    @RollbackExecution
    public void rollback(KafkaAdminClient admin) {
        admin.deleteTopics(Arrays.asList("app-events", "user-notifications"));
    }
}

@ChangeUnit(id = "setup-iam-roles", order = "0003", author = "devops", transactional = false)
public class _0003_SetupIamRolesChange {

    @Execution
    public void exec(IamClient iam) {
        CreateRoleResponse response = iam.createRole(CreateRoleRequest.builder()
                .roleName("flamingock-app-role")
                .assumeRolePolicyDocument("{...}") // truncated for brevity
                .build());
    }

    @RollbackExecution
    public void rollback(IamClient iam) {
        iam.deleteRole(DeleteRoleRequest.builder()
                .roleName("flamingock-app-role")
                .build());
    }
}

@ChangeUnit(id = "seed-database", order = "0004", author = "devops", transactional = true)
public class _0004_SeedTenantDataChange {

    @Execution
    public void exec(DataSource ds) {
        try (Connection conn = ds.getConnection();
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate(
                    "INSERT INTO tenants (id, name, created_at) " +
                            "VALUES (1, 'TenantA', NOW()), (2, 'TenantB', NOW())"
            );
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @RollbackExecution
    public void rollback(DataSource ds) {
        try (Connection conn = ds.getConnection();
             Statement stmt = conn.createStatement()) {
            stmt.executeUpdate("DELETE FROM tenants WHERE id IN (1, 2)");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}

@ChangeUnit(id = "update-bucket-settings", order = "0005", author = "team-a", transactional = false)
public class _0005_UpdateBucketSettingsChange {

    @Execution
    public void execute(S3Client s3) {
        // Example: enable versioning on the bucket
        s3.putBucketVersioning(PutBucketVersioningRequest.builder()
                .bucket("flamingock-app-bucket")
                .versioningConfiguration(VersioningConfiguration.builder()
                        .status("Enabled")
                        .build())
                .build());
    }

    @RollbackExecution
    public void rollback(S3Client s3) {
        // Example: disable versioning on the bucket
        s3.putBucketVersioning(PutBucketVersioningRequest.builder()
                .bucket("flamingock-app-bucket")
                .versioningConfiguration(VersioningConfiguration.builder()
                        .status("Suspended")
                        .build())
                .build());
    }
}

```
</TabItem>
<TabItem value="template-base" label="Template">

```yaml

# File: _0001_provision-bucket.yaml
id: "provision-bucket"
order: 0001
author: "team-a"
transactional: false
templateName: aws-s3-template
templateConfiguration:
  bucketName: "flamingock-app-bucket"
  region: "us-east-1"
  rollbackBucketName: "flamingock-app-bucket"

---

# File: _0002_create-kafka-topics.yaml
id: "create-kafka-topics"
order: 0002
author: "devops"
transactional: false
templateName: kafka-template
templateConfiguration:
  topics:
    - "app-events"
    - "user-notifications"
  configs:
    app-events:
      partitions: 3
      replicationFactor: 1
    user-notifications:
      partitions: 2
      replicationFactor: 1
  rollbackTopics:
    - "app-events"
    - "user-notifications"

---

# File: _0003_setup-iam-roles.yaml
id: "setup-iam-roles"
order: 0003
author: "devops"
transactional: false
templateName: aws-iam-template
templateConfiguration:
  roleName: "flamingock-app-role"
  assumeRolePolicy: |
    {
      "Version": "2012-10-17",
      "Statement": [
        {
          "Effect": "Allow",
          "Principal": { "Service": "ec2.amazonaws.com" },
          "Action": "sts:AssumeRole"
        }
      ]
    }
  rollbackRoleName: "flamingock-app-role"

---

# File: _0004_seed-database.yaml
id: "seed-database"
order: 0004
author: "devops"
transactional: true
templateName: sql-template
templateConfiguration:
  executionSql: |
    INSERT INTO tenants (id, name, created_at)
    VALUES (1, 'TenantA', NOW()), (2, 'TenantB', NOW());
  rollbackSql: |
    DELETE FROM tenants WHERE id IN (1, 2);

---

# File: _0005_update-bucket-settings.yaml
id: "update-bucket-settings"
order: 0005
author: "team-a"
transactional: false
templateName: aws-s3-template
templateConfiguration:
  # Enable versioning on an existing bucket
  bucketName: "flamingock-app-bucket"
  versioningConfiguration:
    status: "Enabled"
  # Rollback: suspend versioning
  rollbackVersioningConfiguration:
    bucketName: "flamingock-app-bucket"
    versioningConfiguration:
      status: "Suspended"

---

```

</TabItem>
</Tabs>

Flamingock ensures these four steps run in sequence‚Äînever twice‚Äîand logs them in your audit store for future reference.

---

## Change-as-Code Checklist

- ‚úÖ **Change lives in VCS**: Every ChangeUnit class (or YAML template) is versioned.
- ‚úÖ **Automated pipeline**: Flamingock applies changes automatically at startup or via CLI.
- ‚úÖ **Audit trail**: Query your audit store for a complete history of applied changes.
- ‚úÖ **Rollback logic**: Each ChangeUnit provides `@RollbackExecution` to undo or compensate if needed.
- ‚úÖ **Consistent ordering**: All ChangeUnits follow a strict, declared ordering (via the `order` attribute).
- ‚úÖ **Cross-component**: You can target databases, SaaS APIs, feature flags, message systems‚Äîanything with a client API.

---

## Next Steps

- [Quickstart Guide](../getting-started/get-started.md) ‚Üí Learn how to create your first ChangeUnit and run Flamingock. 
- [Core concepts](./core-concepts.md)   ‚Üí Dive deeper into auditing, drivers, transactions, and distributed locking.
- [Real use case examples](../resources/examples.md) ‚Üí Explore real-world code samples: MongoDB, DynamoDB, Couchbase, Kafka, and more.

---

// File: overview/key-features

# Key features

With Flamingock, you can take advantage of the following features:

- üß± **Change management of any component**: Manage configuration and data changes with your Application code for any component. NoSQL Databases are a first-class citizen, and we've expanded this capability for any type of component that requires configuration.
  :::info
  Currently supported languages: Java, Kotlin.
  :::
- üîó **Extended integrations and custom use case support**: Flamingock enables one-time or repeatable operational processes ‚Äî such as fetching external data, initializing third-party services, or executing custom logic ‚Äî ensuring they run safely, just once, and in the right context. It expands on Mongock's support to manage Database changes to all systems, databases, technologies and configurations  (ie. Kafka, Twilio, Auth0, etc) or any user-defined scenario.

- üß© **Flexible migration Templates**: New mechanisms for defining changes, offering a no-code option to streamline and simplify change management.

- üöÄ **Seamless deployment**: Deploy your application and systems together, ensuring version compatibility and reducing deployment friction.

- ‚ö° **GraalVM support**: Enables the compilation of Java applications into native executables for improved performance.

- üë• **Multi-Tenant support (coming soon!)**: Designed to handle multiple tenants within the same infrastructure.

- üîí **Distributed Locking**: Ensures synchronized deployment of multiple service instances, maintaining consistency and preventing conflicts in distributed environments.

- üîÑ **Auditing & Rollback**: Comprehensive auditing capabilities with support for rollback of changes to ensure consistency and control.

- ‚òÅÔ∏è **Cloud offering (coming soon!)**: Offers a fully managed service by hosting Flamingock‚Äôs operational data on our servers, removing the need for users to set up and manage their own infrastructure whilst unlocking the full Flamingock suite of features.

- üíª **Management Operations via a Dashboard and CLI (coming soon!)**: Flamingock offers tools to simplify Operational management tasks. Some of these example are: List history of changes, execute Rollbacks, Undo deployment, Audit, etc. Additionally, offers a Dashboard with metrics and alerts.

- üõ†Ô∏è **Advanced Workflow Management**: Enables multiple streams of change units that can be organized to execute sequentially, in parallel, or as a combination, providing flexibility in managing complex processes.

- üîÄ **Parallel Synchronised Execution**: When workflows include parallel streams, they can be executed simultaneously by different service instances, maximizing efficiency in distributed deployments.

---

// File: overview/Editions

Flamingock offers a range of backend providers and deployment models, allowing users to choose from the following: 

![](../../static/img/Diagrams-Editions.drawio.png)

## **üîπ Community Edition (Open Source):**
The Community Edition is a free, open-source version of Flamingock that provides core functionality to execute changes in your self-provided database.  
The current compatible databases for this version are: MongoDB, DynamoDB, CosmosDB or Couchbase. 

Key points around this edition:
- Offers a similar functionality as our legacy Mongock version + expansion to control changes of any component.
- You provision your own database (compatible with MongoDB, DynamoDB, CosmosDB or Couchbase) - compatible to extension with additional drivers.
- Storage of local metadata for execution tracking (no centralised feature)
- Focuses on core functionality (does not include the advanced capabilities provided in the Cloud Edition).

Use this edition if you want a lightweight option you can run on your own infrastructure, and you don‚Äôt require cross-service auditability, advanced templates or features, or advanced observability (such as dashboards, metrics, environment and user management)


## **‚òÅÔ∏è Flamingock Cloud edition (Coming Soon!):**

Flamingock's managed SaaS platform with a full-feaure offering for production-grade environments. In this edition, Flamingock offers:
- All Comunity edition features, plus
- Full access to teamplates and extentions for accelerating integrations
- Centralised auditing system to showcase Changes across all services and environments
- Enables RBAC and enterprise-ready governance 
- Multienvironment management
- A centralised dashboard 


Use this edition if you want a scalable, collaborative, and secure environment to manage change across multiple environments, services and teams - with full visibility and governance. 
:::info
Coming soon! Flamingock Cloud Edition is currently under development.

If you'd like to participate in our user testing round, please contact support@flamingock.io 
:::


## **üíé Flamingock self-hosted edition (Coming Soon!):**
Provides all the offered functionality in Flamingock Cloud, deployed in your infrastructure. 

:::info
Flamingock self-hosted edition is not released yet. 

Interested? If you require this edition to be available for your enterprise, please contact support@flamingock.io 
:::

---

// File: overview/core-concepts

# Core Concepts

### üì¶ ChangeUnits
**ChangeUnits** are the fundamental structure that hold your change logic. They are executed atomically and versioned for traceability. They represent any kind of change applied to a system, such as configuration modifications, API calls, data migration, etc.

Each ChangeUnit includes:
- Unique ID and metadata
- Execution logic (e.g., Java, YAML, or no-code template)
- Rollback capability

For a deeper dive around ChangeUnits, see the [ChangeUnits deep dive](../flamingock-library-config/changeunits-deep-dive.md) section.

### üìã Auditing
Flamingock includes built-in **auditing** for full traceability of executed changes.
- Stores metadata about each executed ChangeUnit: timestamp, status, user, and system
- Useful for compliance, debugging, and visibility
- Can be extended to external observability platforms (e.g., ELK, Prometheus, Datadog)

### üóÑÔ∏è Audit store vs. Target system

- **Audit store**: The dedicated location where Flamingock records metadata about change executions. Its sole purpose is to track which ChangeUnits ran, when, and with what outcome‚Äîensuring idempotency, rollbacks, and distributed coordination. This might be a user-provided database (Community Edition) or Flamingock‚Äôs cloud backend (Cloud Edition).

- **Target system**: The external resource that ChangeUnits operate upon (e.g., a database schema, S3 bucket, Kafka topic, or configuration service). Flamingock‚Äôs ChangeUnits apply changes to these systems in an ordered, auditable fashion. When a database serves as both audit store and target system, Flamingock can wrap change and audit insert in one transaction; otherwise, auditing and execution occur separately.

:::tip
To better understand the differences between Audit Store and Target System, see the [Audit store vs target system section](../overview/audit-store-vs-target-system.md)
:::

---

### üèÉ Runner
The **Runner** is the heart of Flamingock‚Äôs execution lifecycle. It‚Äôs responsible for:
- Scanning, orchestrating, and executing ChangeUnits at application startup (or on-demand)
- Coordinating interactions with the Audit Store (via its Driver)

It can be embedded in your application or run as an independent service in distributed environments.

### üîå Driver
A **Driver** acts as an adapter between Flamingock and the Audit Store. It manages all low-level interactions required for:
- Writing audit-log entries when a ChangeUnit runs
- Acquiring and releasing distributed locks
- Querying execution history to prevent duplicate runs

Depending on the edition, the Driver may connect to a user-provided database (CE) or Flamingock‚Äôs cloud backend (Cloud Edition). It does *not* perform any Target System changes‚Äîthat responsibility lies fully with the ChangeUnit code.

---

### üîÅ Transaction handling
Flamingock supports **transactional consistency** where possible:

- **When the target System is also a database supporting ACID transactions** (like MongoDB), Flamingock ensures that a ChangeUnit‚Äôs operation on the target System and its audit-log insert into the Audit Store commit together as a single transaction.
- **When the target System does not support transactions** (e.g., HTTP APIs, file systems, or message brokers), Flamingock uses compensating actions (rollbacks) and auditing to maintain integrity.

For a deeper dive around Transactions, see the [Transactions](../flamingock-library-config/transactions.md) section.

### üîô Rollbacks
Each ChangeUnit can define rollback logic:
- For safe reversion when operating against non-transactional systems
- For reverting to a previous version of the software ("Undo"), invoked via the CLI

---

### üß© Templates
Flamingock introduces **change templates** for low-code use cases. These are YAML or JSON-based definitions that let teams describe changes declaratively‚Äîespecially useful for configuration changes and SaaS integrations.

Templates are:
- Extensible and version-controlled
- Friendly to non-developer users

For a deeper dive around Templates, see the [Templates](../templates/templates-introduction.md) section.

---

### üîÑ Workflows
Workflows group and coordinate multiple ChangeUnits into stages. In future releases, they will support:
- **Sequential** or **parallel** execution
- **Conditional branching** (e.g., only run if a previous unit succeeded)

This will enable advanced orchestration logic during deployments or upgrades.

For a deeper dive around Workflows, see the [Pipelines and stages](../flamingock-library-config/setup-and-stages.md) section.

---

### üîí Distributed Locking
To ensure safe execution in multi-instance deployments, Flamingock uses a distributed lock mechanism. This guarantees:
- Avoidance of duplicate execution or race conditions
- Synchronisation between multiple runners
- Coordination across microservices in distributed environments

It supports multiple lock implementations (e.g., MongoDB, Redis, DynamoDB).


For a deeper dive around distributed locks, see the [Distributed locking](../flamingock-library-config/lock-configuration.md) section.

---

### üì£ Events
Flamingock is able to notify your Application around the execution status of changes via Events.

For a deeper dive around Events, see the [Events](../flamingock-library-config/events.md) section.

---

// File: overview/technical-overview

# Flamingock Technical Overview

Welcome to the **Technical Overview** of Flamingock ‚Äî a flexible framework designed to help you manage and audit changes of any kind across your systems and services.

Building on the foundations of Mongock, Flamingock goes beyond traditional database migrations to support a wide range of change types, including data updates, configuration adjustments, API evolutions, and system integrations ‚Äî all with a consistent, traceable, and repeatable approach.

This document introduces Flamingock‚Äôs core concepts and outlines its architecture to help you understand how it simplifies the orchestration of system changes.

---

## Architectural Overview

In a nutshell, the Flamingock process takes all the pending changes and executes them in order during your Application startup process.

1. **Application Startup**  ‚Üí Initializes the **Runner**.
2. **Runner** scans and loads all registered **ChangeUnits**.
3. **Drivers** communicate with an underlying component that varies by edition.
   - In Flamingock CE, this component is a simple storage layer (e.g., MongoDB, DynamoDB).
   - In the Cloud and Self-Hosted editions, the driver connects to a more sophisticated Flamingock backend that includes orchestration, auditing, and support for advanced operational features.
4. **ChangeUnits** execute in a coordinated **workflow**, optionally using templates.
5. **Distributed Locking** ensures safe execution in distributed environments.
6. All executions are **audited** and can be **rolled backed**.

Flamingock is designed to either apply all defined changes successfully or fail early. On the next run, it will resume from the last failed change.

![Flamingock Architecture Diagram](../../static/img/Flamingock%20Arch%20HLD.png)

### A more detailed process steps
Flamingock process follows the next steps:

1. The runner/builder loads the pipeline of execution of changes.
2. The runner loads the files storing the changes desired (changeUnits).
3. The runner checks if there is pending change to execute.
4. The runner acquires the distributed lock through the driver.
5. The runner loops over the ChangeUnits (change files) in order.
6. Takes the next ChangeUnit and executes it.
- If the ChangeUnit is successfully executed, Flamingock persists an entry in the Flamingock change history with the state SUCCESS and start the step 5 again.
- If the ChangeUnit fails, the runner rolls back the change. If the driver supports transactions and transactions are enabled, the rollback is done natively. When the driver does not support transactions or transactions are disabled, the method @RollbackExecution is executed. In both cases the ChangeUnit failed, whereas in the latter option, and entry is added in the changelog that a change has been rolled back.
- If the runner acomplished to execute the entire migration with no failures, it's considered successful. It releases the lock and finishes the migration.
On the other hand, if any ChangeUnit fails, the runner stops the migration at that point and throws an exception. When Flamingock is executed again, it will continue from the failure ChangeUnit(included).

---

// File: overview/audit-store-vs-target-system

# Audit Store vs. Target System

In Flamingock, it is important to distinguish between two very different roles that external systems can play:

## Audit Store

The audit store is the dedicated persistence layer where Flamingock records metadata about each change unit‚Äôs execution. Its sole purpose is to capture, in an append-only log, exactly which change units ran, when they ran, who initiated them, and whether they succeeded or failed (along with any error details). This information is used to:

- **Prevent duplicate applications**  
  By checking the audit store before running a change unit, Flamingock guarantees each change is executed at most once.

- **Track change history**  
  You can query the audit store to see all previously applied changes, filter by author or date range, and generate reports.

- **Coordinate distributed execution**  
  In a clustered environment, Flamingock nodes consult the audit store to decide which change units still need to run‚Äîand to know which locks are held.

- **Drive rollbacks and ‚Äúundo‚Äù operations**  
  Since each audit entry captures rollback availability, Flamingock can navigate backward through the audit store to revert a series of changes in reverse order.

Depending on your setup, the audit store may be:

- A user-provided database (for Community Edition). For example, if you run CE with MongoDB, Flamingock writes audit records into a MongoDB collection.
- Flamingock‚Äôs own cloud backend (for Cloud Edition). In that case, the audit store is a managed that you never host yourself.

In summary, the audit store exists solely to record what happened‚Äîand to ensure consistency and idempotency across deployments.

## Target System

A target system is any external resource or service upon which a change unit‚Äôs logic operates. When you write a change unit, you define `@Execution` and `@RollbackExecution` methods that perform actions against a target system‚Äîsuch as:

- A cloud service (e.g., creating an S3 bucket or configuring a CloudFormation stack)
- A messaging backbone (e.g., creating a new Kafka topic, configuring permissions, or updating an existing schema)
- A configuration service (e.g., updating a feature-flag in Consul or Vault)
- A database schema (e.g., creating a new column in your relational database)
- A NoSQL data store (e.g., creating a new collection or index in MongoDB)
- Even another microservice‚Äôs REST API

The key point is that the target system is where changes must actually be applied‚Äîand those changes must occur exactly once (or be rolled back) to keep your application and its ecosystem in sync. Flamingock orchestrates these operations in a deterministic, ordered fashion, but the target system itself is whatever resource or service your change unit code touches.

## Why the distinction matters

Because Flamingock originated from Mongock (which treated the database both as audit store and change target), it‚Äôs common to conflate these two roles. In practice:

- **In Cloud Edition with distributed transaction protocol (for a transactionally-capable target like an RDBMS)**:
  - Flamingock writes a small ‚Äúintent‚Äù or ‚Äúflag‚Äù record in your own database before it writes the audit entry to the cloud store.
  - After successfully committing your database change, Flamingock finalizes the audit record in the cloud. If anything fails at any step, Flamingock can roll everything back or clean up partial intent entries. This protocol ensures that, even though the audit store lives in the cloud, your RDBMS change and the audit record remain effectively atomic from Flamingock‚Äôs perspective.

- **When a relational or NoSQL database serves as both audit store and change target** (for example, CE running on MongoDB):
  - Flamingock writes an audit-entry document into the same database where your data resides.
  - For DML or DDL change units that modify that same database, Flamingock can wrap both the change and the audit insert in a single transaction‚Äîensuring ‚Äúall-or-nothing‚Äù consistency.

- **When the change target is a different system** (for example, creating S3 buckets or updating Kafka topics):
  - The audit store remains your chosen audit database or Flamingock‚Äôs cloud backend.
  - Flamingock cannot wrap, say, an S3 API call and the audit insert inside a single transaction, because those systems do not share a common transaction coordinator.
  - Instead, Flamingock‚Äôs audit store logs the change unit as ‚Äúexecuted‚Äù only after your `@Execution` method completes without error; if that `@Execution` code fails, Flamingock calls your `@RollbackExecution`. The audit store entry is only written once you confirm the change succeeded.

![Audit store](../../static/img/Diagrams-TargetAndAuditStore.drawio.png)

### Illustration

#### Transactional target with Cloud as audit store (Cloud Edition)

  üìÑ **_0001_CreateUserTableChange**
    - **Targets:** Transactional database (e.g., PostgreSQL)
    - **Audit store:** Flamingock Cloud (Cloud Edition)
    - **Transactional behavior:** Uses Flamingock‚Äôs distributed transaction protocol to guarantee atomicity between the RDBMS and the cloud audit store, achieving the same effect as a traditional transaction.

#### Target and audit store are the same transactional database

  üìÑ **_0002_CreateUserTableChange**
    - **Targets:** Transactional database (e.g., MongoDB)
    - **Audit store:** Same MongoDB instance (Community Edition)
    - **Transactional behavior:** Wrapped in a single DB transaction‚Äîso both the schema change (or data change) and the audit insert happen or fail together.

#### Non-transactional target with Cloud as audit store

  üìÑ **_0003_ConfigureS3BucketChange**
    - **Targets:** Amazon S3 (creating a bucket)
    - **Audit store:** Flamingock Cloud (Cloud Edition)
    - **Transactional behavior:**
      1. Flamingock calls S3‚Äôs `createBucket`.
      2. If that succeeds, Flamingock writes an audit entry to the **cloud** audit store.
      3. If the S3 call fails, Flamingock invokes your `@RollbackExecution` (deleting or cleaning up) and then writes an audit entry marking the change as ‚Äúrolled back.‚Äù

:::note
All change units within a single application must use the same audit store. You cannot mix multiple audit backends in the same application.
:::


## Key Takeaways

- **Audit Store**
    - Record of ‚Äúwhat ran when and by whom‚Äù
    - Used to prevent duplicates, drive rollbacks, and coordinate distributed execution
    - Hosted in Flamingock‚Äôs cloud backend (Cloud Edition) or your chosen database (CE) 

- **Target System**
    - The actual resource being modified (S3 buckets, Kafka topics, database tables, config services, and so on)
    - Change units call external APIs or drivers against this system
    - May or may not support transactions; if it does, Flamingock can co-ordinate with the audit store (via Cloud‚Äôs distributed protocol or CE‚Äôs DB transaction)


:::tip
Distinguishing these two roles makes it clear that Flamingock‚Äôs core value lies in coordinating audit and execution‚Äîacross arbitrary target systems‚Äîrather than assuming both duties are performed by the same database. This clarity ensures you can design your change units and architecture with the proper expectations around consistency, rollback, and idempotency.
:::

---

// File: resources/examples

## Introduction

The **Flamingock Examples** repository showcases a growing collection of real-world use cases demonstrating how to use Flamingock in different environments, integrations, and technologies. Each top-level folder represents a target technology and contains one or more self-contained example projects. Each project is designed to be cloned, explored, and run as a reference or foundation for your own implementation.

üëâ **GitHub Repository**: [github.com/flamingock/flamingock-examples](https://github.com/flamingock/flamingock-examples)

---

## What you‚Äôll find

Within each technology folder, you‚Äôll find one or more example ‚Äãprojects that demonstrate how to configure Flamingock and apply change units in various scenarios. Each folder contains its own `README.md` with setup instructions, and each project inside has its own documentation.

| Technology Folder                                                                 | Description                                                                                                                                                               |
|-----------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [mongodb](https://github.com/flamingock/flamingock-examples/tree/master/mongodb)     | Folder containing Flamingock CE projects using MongoDB as the audit‚Äêlog backend. Each project shows different integration scenarios (standalone Java, Spring Boot, etc.). |
| [dynamodb](https://github.com/flamingock/flamingock-examples/tree/master/dynamodb)   | Folder containing Flamingock CE projects using Amazon DynamoDB for audit logging. Includes both standalone and Spring Boot examples.                                      |
| [couchbase](https://github.com/flamingock/flamingock-examples/tree/master/couchbase) | Folder containing Flamingock CE projects using Couchbase as the audit‚Äêlog backend.                                                                                        |

More examples are planned ‚Äî including PostgreSQL, Redis, LocalStack, Kafka, Spring Native, multi‚Äêmodule projects, and custom runners.

---

## How to use the examples

Each example folder and project includes its own `README.md` with detailed setup and run instructions. In general:

1. **Clone the examples repository**
   ```bash
   git clone https://github.com/flamingock/flamingock-examples.git
   ```  
   This repository contains all the example folders for various technologies.

2. **Navigate to the technology folder of interest**
   ```bash
   cd flamingock-examples/s3
   ```  
   Replace `s3` with the folder name for the technology you are interested in (e.g., `kafka`, `mongodb`, `dynamodb`, etc.).

3. **Navigate to a specific example project**
   ```bash
   cd s3
   ```  
   Each folder contains one or more projects. Move into the project folder that matches your use case or environment.

4. **Run the example**
   - For standalone Java applications:
     ```bash
     ./gradlew run
     ```  
   - For Spring Boot projects:
     ```bash
     ./gradlew bootRun
     ```  
   - Follow any additional instructions in the project‚Äôs `README.md`. Some examples may use Testcontainers or LocalStack; if so, ensure Docker is running on your machine.

---

## Who this is for

- **New users**: Learn by example. Pick an example that matches your tech stack and explore how Flamingock integrates with your environment.
- **Advanced users**: Discover integration patterns with external systems like Kafka, AWS, or NoSQL databases.
- **Contributors**: Want to improve or submit a new example? Fork the repo, add your example folder, and create a pull request!

---

## Contributing

We welcome community contributions to expand this repository! Please consider:

- Adding new example projects or folders (e.g., Wiremock, Kafka, PostgreSQL, Redis)
- Fixing or modernizing existing examples
- Improving documentation and setup instructions

See the [CONTRIBUTING.md](https://github.com/flamingock/flamingock-examples/blob/master/CONTRIBUTING.md) for detailed guidelines.

---

// File: resources/faq

## Introduction

This FAQ addresses frequent questions users may have when incorporating Flamingock into their applications.

---

### Getting started

**Should I use a template-based or code-based ChangeUnit?**  
Choose template-based ChangeUnits to eliminate boilerplate for common tools and integrations (SQL DDL, SaaS/API, etc) and for your custom ChangeUnits by defining changes declaratively in YAML or JSON.
Use code-based ChangeUnits when you need custom or conditional logic in Java.
See: [Template introduction](templates/templates-introduction.md)

**Can I integrate Flamingock into a Spring Boot application?**  
Yes, you can. You just need to import the Spring Boot integration module and annotate you main application with [`@EnableFlamingock`](../frameworks/springboot-integration/introduction#automatic-setup).
See: [Spring Boot integration](../frameworks/springboot-integration/introduction.md)

**Can I use Flamingock without Spring Boot?**  
Yes. You can use Flamingock in any Java application by configuring it manually using the [`FlamingockBuilder`](../getting-started/get-started#5-configure-flamingock). This approach is ideal for applications that do not rely on Spring Boot or that require finer control.

**What Java version is required?**  
Flamingock‚Äôs core engine runs on Java 8 and above. However, some optional integration modules (such as the Spring Boot support) target more recent ecosystems and require Java 17+. For those cases we publish two artifacts:

- A modern module (e.g., flamingock-springboot-integration) built for Java 17+ and Spring Boot 3.x
- A legacy counterpart (e.g., flamingock-springboot-integration-v2-legacy) compatible with Java 8 and Spring Boot 2.x

Most users on Java 8 can stick with the core and legacy integrations; if you‚Äôre on Java 17 or newer, simply use the up-to-date modules.

**Is it possible to use Flamingock in GraalVM native images?**  
Yes, Flamingock provides a dedicated [GraalVM integration guide](../frameworks/graalvm.md). Ensure your dependencies and reflection requirements are correctly configured.

---

### Editions and compatibility

**What edition of Flamingock should I use?**  
Flamingock is available in three flavors‚Äîpick the one that best fits your needs and operational model:

1. [**Cloud Edition (SaaS)**](../overview/Editions#%EF%B8%8F-flamingock-cloud-edition-coming-soon)

    A fully managed, enterprise-grade service hosted by Flamingock:

    - Zero ops: no infrastructure to manage, no database to configure
    - Enterprise features: cross-service dashboards, RBAC, team & environment management, fully support for templates, batching, etc.
    - 24√ó7 support & SLAs and seamless upgrades

    Perfect for teams that need scalability, governance, and out-of-the-box observability.

2. [**Self-hosted Edition**](../overview/Editions#-flamingock-self-hosted-edition-coming-soon)

    All the same features as our Cloud Edition‚Äîdashboards, governance, transaction protocols‚Äîbut deployed into your own infrastructure (on-premises or in your VPC):

    - Full feature parity with SaaS Cloud
    - Data residency & compliance: you control where audit records live

    Ideal for organizations that require enterprise capabilities but cannot‚Äîor prefer not to‚Äîconsume a hosted SaaS.

3. [**Community Edition**](../overview/Editions#-community-edition-open-source)

    Open-source, self-hosted library you run alongside your application:

    - Lightweight & free: you supply your own audit store (MongoDB, DynamoDB, Couchbase, etc.)
    - Core capabilities: ChangeUnits, audit logging, distributed locking, and transactional consistency where supported

    Perfect for smaller teams or projects that need a robust, code-centric change framework.


**Can I switch between editions?**  
Yes. Flamingock provides an importer that allows you to migrate seamlessly from a **Community Edition to the Cloud Edition**, making it easy to adopt a fully managed backend for storing internal data.

If you are working with different Community Editions that use the **same underlying store** (such as MongoDB), and they share the same structure and collection for storing metadata, it is possible to switch between them with minimal adjustments. This enables flexible integration depending on your preferred access layer, such as switching from the MongoDB Java Driver edition to the Spring Data edition.

---

### Behaviour and execution

**Does Flamingock guarantee idempotent execution?**  
Yes. Each `ChangeUnit` has a unique ID and Flamingock ensures it runs only once per system, even across multiple instances.

**What happens if a ChangeUnit execution fails midway?**  
When a `ChangeUnit` fails during execution, Flamingock handles the situation based on whether a transactional context is active:
Flamingock always try to rollback the failed changes. In a transactional environment, Flamingock relies on the database transactional mechanism to rollback the changes(`@Execution` method) as well as the Flamingock metadata associated to the change. 

In summary it would be like that change was never started. In a non-transactional environment, Flamingock manually tries to rollback the change by executing the `@RollbackExecution` method (if present) and marks the change entry as `ROLLED_BACK` in the database. Please notice that although Flamingock will try its best to achieve this, it's not guaranteed.

Once the rollback operation is performed, Flamingock will abort the execution and throw an exception. The next time Flamingock is executed will carry on from the failed ChangeUnit. It is important to note that if the ChangeUnit fails, the Application startup will exit as Flamingock will abort. This behaviour will repeat until the ChangeUnit has executed successfully.

**How can I ensure changes are transactional?**  
If your database supports transactions (e.g. MongoDB ‚â• 4.0 in replica set), you can enable them using [Flamingock‚Äôs transaction config](../flamingock-library-config/transactions.md).

**Should I implement the @RollbackExecution method in transactional environments?**

Yes, we highly recommend to implement the `@RollbackExecution` method. The main reason for this is that some other operations like undo, rely on this method to work. However it's a very good practice as it provides a robust system that is less affected when moving to non-transactional environments.

**Can I react to the execution of Flamingock from my application?**  
Yes. Flamingock provides an event system that allows your application to listen to key lifecycle moments, such as when a `ChangeUnit` starts or finishes execution. These events can be used to trigger logging, monitoring, or other side effects external to the change execution logic itself.

This enables loose coupling between Flamingock‚Äôs core execution and your application-level behaviour, without modifying the `ChangeUnit` directly.

For more details, see the [Events](../flamingock-library-config/events.md) guide.

**Is Flamingock compatible with Spring Boot profiles?**  
Yes. You can conditionally run ChangeUnits using [`@Profile`](../frameworks/springboot-integration/profiles.md), allowing changes to vary by environment.

---

### Configuration

**Where do I set MongoDB connection options like write concern or read preference?**  
You can define these directly in the config using dedicated properties (e.g. `mongodb.writeConcern.w`, `readPreference`, etc.). Refer to the [extra configuration](../flamingock-library-config/extra-configuration.md) section for detailed examples.

**Can I inject Spring beans or other services into my ChangeUnits?**  
Yes. Flamingock supports full [dependency injection](../flamingock-library-config/changeunit-dependency-injection.md) in both Spring and non-Spring environments.

**Can I define ChangeUnit dependencies and execution order?**  
Yes. ChangeUnits can declare dependencies via annotations or configuration metadata. See [ChangeUnit deep dive](../flamingock-library-config/changeunits-deep-dive.md) for more.

---

### Testing and development

**How do I test Flamingock ChangeUnits?**  
You can perform [unit](../testing/unit-testing.md), [integration](../testing/integration-testing.md), and [Spring Boot integration](../testing/springboot-integration-testing.md) tests using test runners and mocking utilities.

**Can I use templates to generate ChangeUnits?**  
Yes. Flamingock offers a templating mechanism for [creating new ChangeUnits](../templates/templates-how-to-use.md) and defining reusable components.

---

### Migrating from Mongock

**What‚Äôs the relationship between Flamingock and Mongock?**  
Flamingock is the direct evolution of Mongock. While it inherits the core idea of tracking and executing changes reliably, Flamingock is a complete architectural and conceptual redesign aimed at overcoming the limitations of Mongock.

Some of the key advancements introduced by Flamingock include:

- **Cloud-native capabilities**: Support for cloud-managed storage and execution, enabling Flamingock to run in distributed, serverless, or ephemeral environments without additional setup.
- **Execution stages and pipelines**: A structured way to group and orchestrate ChangeUnits by context, environment, or lifecycle stage.
- **Modular architecture**: Clean separation of core, editions, templates, and integrations, enabling better extensibility and maintainability.
- **Template-based ChangeUnits**: An additional declarative mechanism to define reusable changes without writing Java code, accelerating development and standardisation.

While Flamingock retains conceptual compatibility with Mongock, it represents a significant leap forward in flexibility, scalability, and developer experience.

If you are currently using Mongock, we encourage you to [review the migration guide](upgrade-from-mongock.md) and explore what Flamingock can offer in modern change management.

---

### Other

**Is Flamingock open-source?**  
Yes. The Flamingock client library ‚Äî used across all editions, including Community, Self-managed, and Cloud ‚Äî is fully open-source.

For the Cloud and Self-managed editions, additional enterprise components such as the server runtime, dashboards, and governance tools are provided under a commercial licence. These components build on top of the open-source core to deliver advanced features like observability, orchestration, and centralised management.

**Is there a CLI available?**  
A [CLI is planned](../cli/cli.md), but not yet available. Stay tuned.

---

If your question is not listed here, please check the corresponding edition‚Äôs guide or open an issue on our GitHub repository.

---

// File: resources/upgrade-from-mongock

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Upgrade from Mongock to Flamingock

Flamingock is the next evolution of Mongock. **Upgrading** from Mongock to Flamingock involves two main pillars:

1. **Audit-store import** ‚Äì Flamingock automatically copies Mongock‚Äôs _changeLog_ collection/table into its own audit store so historical executions are preserved.
2. **Library swap** ‚Äì Your application stops calling the Mongock API and starts calling Flamingock. Existing ChangeUnits stay in place; only their annotation imports change.

Because the codebase remains the same and ChangeUnits are kept intact, we call this an _upgrade_, not a migration.

---

## Upgrade steps (at a glance)

1. **Update ChangeUnit imports** ‚Äì Replace Mongock annotations with Flamingock equivalents.
2. **Upgrade application code** ‚Äì Replace Mongock API usage with the Flamingock builder(or Spring annotation).
3. **Create system stage** ‚Äì Add a template-based ChangeUnit that imports legacy audit records.
4. **Configure pipeline** ‚Äì Point Flamingock to your legacy and new ChangeUnit packages.

That‚Äôs it! Once complete, Flamingock runs with your full history intact.


## Step1: Update artefacts

Replace the Mongock artefacts with Flamingock ones.

- Mongock
```groovy
implementation(platform("io.mongock:mongock-bom:5.5.0"))
implementation("io.mongock:mongock-standalone")
implementation("io.mongock:mongodb-sync-v4-driver")
```

- Flamingock
```groovy
implementation(platform("io.flamingock:flamingock-cloud-bom:$flamingockVersion"))
implementation("io.flamingock:flamingock-ce-mongodb-sync")
annotationProcessor("io.flamingock:flamingock-processor:$flamingockVersion")
```

## Step 1: Update ChangeUnit imports

Update these imports in your existing ChangeUnits (keep them in their current packages):

| Mongock import                                 | Flamingock import                                 |
|------------------------------------------------|---------------------------------------------------|
| `io.mongock.api.annotations.ChangeUnit`        | `io.flamingock.api.annotations.ChangeUnit`        |
| `io.mongock.api.annotations.Execution`         | `io.flamingock.api.annotations.Execution`         |
| `io.mongock.api.annotations.RollbackExecution` | `io.flamingock.api.annotations.RollbackExecution` |

:::info Legacy Support
- **For existing change units**: Keep them **exactly as they are** in their current packages - only update imports to maintain immutability.
- **For new change units**: Avoid using `@BeforeExecution` and `@RollbackBeforeExecution`. Instead, use dedicated `@Execution` and `@RollbackExecution` methods for better separation of concerns
- `@BeforeExecution` and `@RollbackBeforeExecution` from `io.mongock.api` are supported for backward compatibility
:::
## Step 2: Upgrade application code

<Tabs groupId="upgrade">
  <TabItem value="flamingock" label="Flamingock(new)" default>
```java
Flamingock.builder()
    .addDependency(mongoClient)
    .addDependency(mongoDatabase)
    .build()
    .run();
```
  </TabItem>
  <TabItem value="mongock" label="Mongock(legacy)">
```java
MongockStandalone.builder()
    .setDriver(MongoSync4Driver.withDefaultLock(mongoClient, "test"))
    .addMigrationScanPackage("legacy.mongock.changes")
    .buildRunner()
    .execute();
```
  </TabItem>
</Tabs>


### Key changes:
- Replace `MongockStandalone` with `Flamingock.builder()`
- Remove explicit driver setup (Flamingock auto-configures it)
- Remove package scanning in favor of pipeline config
- Inject dependencies via `.addDependency()`

For Spring Boot integration, see the [Spring Boot guide](../frameworks/springboot-integration/introduction.md).

## Step 3: Create system stage

The system stage is a special stage handled by Flamingock for system-level operations. In this upgrade context, you'll create a template-based change unit in the system stage package to handle audit records migration. 

Create a YAML file (e.g., `_0001_upgrade_from_mongock.yaml`) with the following structure:

```yaml
id: upgrade-from-mongock
order: 0001
template: MongoDbImporterChangeTemplate
configuration:
  origin: mongockChangeLog
  failOnEmptyOrigin: true
```

**Configuration parameters:**
- **id**: Choose how you want to identify this change unit
- **order**: Should be the first one (0001) as this is typically the first system stage change unit
- **template**: Available templates: `MongoDbImporterChangeTemplate`, `DynamoDbImporterChangeTemplate`, `CouchbaseImporterChangeTemplate`
- **origin**: The collection/table where Mongock's audit log is stored (typically `mongockChangeLog`)
- **failOnEmptyOrigin**: (Optional) Set to `false` to disable the security check that ensures the origin contains data. By default, Flamingock verifies the origin collection/table has content to prevent importing from the wrong source

## Step 4: Configure setup

Configure Flamingock using the `@EnableFlamingock` annotation. Add this annotation to any class in your application:

```java
@EnableFlamingock(
    stages = {
        @Stage(type = SYSTEM, location = "com.yourapp.flamingock.system"),
        @Stage(type = LEGACY, location = "com.yourapp.mongock"),
        @Stage(location = "com.yourapp.flamingock.changes")
    }
)
public class FlamingockConfig {
    // Configuration class
}
```

### Configuration explained:

**Stage types and usage:**

1. **System stage** - A special stage for framework-level changeUnits handled by Flamingock itself. In this context, it contains the changeUnit(provided by flamingock team) that copies Mongock‚Äôs audit data into Flamingock‚Äôs store
2. **Legacy stage** - Designed specifically for the changeUnits that originally came from the legacy tool (here, Mongock). Flamingock treats it as read-only: it runs only the units that never executed under Mongock and skips those already recorded in the imported audit history. Do **not** add new ChangeUnits to this stage.
3. **Standard stage** (default): For new Flamingock-native change units. This is where all your new application changes should be added going forward

- For advanced stage configurations and multi-stage scenarios, see the [setup & stages guide](../flamingock-library-config/setup-and-stages)

## Run and validate

### Running the upgrade

```shell
./gradlew run
```

### Expected output

After running Flamingock, you should see output similar to:
```
Stage: flamingock-system-stage
	0001) id: upgrade-from-mongock 
		Started				‚úÖ - OK
		Executed			‚úÖ - OK
		Audited[execution]	        ‚úÖ - OK
	
Stage: Application Changes
	0001) id: create-users-collection-with-index 
		Started				‚úÖ - OK
		Executed			‚úÖ - OK
		Audited[execution]	        ‚úÖ - OK
	0002) id: seed-users 
		Started				‚úÖ - OK
		Executed			‚úÖ - OK
		Audited[execution]	        ‚úÖ - OK
```

### Validation checklist

- ‚úÖ System stage executes the upgrade changeUnit successfully
- ‚úÖ Already-applied existing changeUnits from Mongock are not reapplied
- ‚úÖ Previously unapplied existing changeUnits from Mongock execute without errors
- ‚úÖ New Flamingock changeUnits execute as expected
- ‚úÖ All audit logs are properly created in Flamingock format
- ‚úÖ Database changes match the expected results

---

## Why upgrade instead of removing or starting fresh?

- **Preserve your audit trail** ‚Äì Every historical ChangeUnit and its execution log remains intact for compliance and debugging.
- **Avoid unintended re-runs** ‚Äì Flamingock imports Mongock‚Äôs history, so previously-executed ChangeUnits are never applied twice.
- **Keep change-as-code semantics** ‚Äì The act of migrating the audit store itself is handled as a versioned change, reinforcing the idea that history is part of your application.
- **Future continuity** ‚Äì Teams and tools that rely on Mongock‚Äôs records can transition seamlessly; dashboards and reports will show an unbroken timeline.



---

Ready to upgrade? See the [pipeline & stages guide](../flamingock-library-config/setup-and-stages.md) and [ChangeUnit reference](../flamingock-library-config/changeunits-deep-dive.md).  

**Complete example project**: https://github.com/flamingock/flamingock-examples/tree/master/import-from-mongock

---

// File: templates/templates-introduction

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# Templates

## Introduction

Flamingock Templates are pre-built modules designed to streamline the integration of common third-party services, databases, and configurations into the **Flamingock change management system**. These templates provide a structured way to define configuration changes in declarative format (such as **YAML** files), reducing the need for custom code-based ChangeUnits while ensuring seamless execution and versioning of changes.

## How It Works

Flamingock Templates are designed to simplify change definitions by extracting reusable logic into modular building blocks. While **Flamingock‚Äôs core approach** relies on code-based ChangeUnits to manage database and system changes, Flamingock Templates provide a **low-code alternative** that simplifies the process for common integration scenarios. Instead of writing Java classes for each migration, users can leverage existing templates by defining changes in a declarative format(**YAML**, etc.).

### Who Provides Templates?

Templates can be:
- **Provided by the Flamingock core team** (e.g., SQL, Kafka, Redis)
- **Offered by the community**
- **Created internally by teams** to address common patterns in their own systems

This makes them highly adaptable: whether you're integrating a database, messaging system, or internal service, templates give you a low-code mechanism to structure your changes cleanly and consistently.

### Why Do Templates Exist?

Templates exist to solve a common problem in traditional, code-based migrations: **duplicated logic across ChangeUnits**.

Instead of repeating the same boilerplate code over and over, templates let you **externalize the logic** into a reusable definition and **parameterize** what‚Äôs different.



## Key Features

- **Pre-built, reusable modules**: Each template provides a well-defined structure for managing migrations and configurations.
- **Declarative ChangeUnits**: Users define changes in YAML, avoiding Java boilerplate.
- **Support for third-party integrations**: Includes databases, messaging systems, and cloud configurations.
- **Automatic execution and versioning**: Templates are applied and tracked as part of Flamingock‚Äôs change management process.
- **Built-in best practices**: Ensures correctness and reliability for each integration.
- **Extensible by the community**: Developers can contribute new templates to expand Flamingock‚Äôs ecosystem.

## When to use Template-based ChangeUnits vs. code-based ChangeUnits

| **Use Case** | **Template-Based ChangeUnit** | **Code-Based ChangeUnit** |
|-------------|-----------------------------|-------------------------|
| Integration with third-party services (e.g., Kafka, Twilio) | ‚úÖ | ‚úÖ |
| Simple database migrations (e.g., SQL schema updates) | ‚úÖ | ‚úÖ |
| Custom logic and advanced migrations | ‚òëÔ∏è* | ‚úÖ |
| Complex, dynamic change sequences | ‚òëÔ∏è** | ‚úÖ |
| Low-code, configuration-driven changes | ‚úÖ | ‚ùå |

‚òëÔ∏è* Templates can handle custom logic if it can be abstracted and reused. Users can create custom templates to manage these scenarios.

‚òëÔ∏è** While templates may support complex change sequences, full control and dynamic logic might be easier to implement in code when the scenario is highly specific or non-repetitive.


## List of current Flamingock templates

| Template Name | Description |
|--------------|-------------|
| **SQL Template** | Enables SQL-based migrations using YAML-defined ChangeUnits. |
| **Kafka Template** (Upcoming) | Manages Kafka topics and configurations using YAML definitions. |
| **Twilio Template** (Upcoming) | Simplifies Twilio messaging configurations via YAML. |
| **Redis Template** (Upcoming) | Allows structured updates to Redis configurations. |

---

Flamingock Templates unlock new possibilities for seamless application evolution. Whether you‚Äôre managing **databases, configurations, or third-party services**, templates simplify the process, ensuring **faster, safer, and more standardised migrations**. 

:::tip 
Join the [**Flamingock community**](https://github.com/flamingock/flamingock-project/discussions) and start building your own templates today! üöÄ
:::

---

// File: templates/templates-how-to-use

import Tabs from '@theme/Tabs';
import TabItem from '@theme/TabItem';

# How to use Flamingock Templates

Using a Flamingock Template is straightforward. Here‚Äôs an example of how you can apply an SQL-based migration using the **SQL Template**.

### Step 1: Add the Template dependency

Ensure your **Flamingock Template** dependency is included in your project. Example of using `sql-template`:

<Tabs groupId="gradle_maven">
  <TabItem value="gradle" label="Gradle">
```kotlin
implementation(platform("io.flamingock:flamingock-ce-bom:$flamingockVersion"))
implementation("io.flamingock:flamingock-ce-sql-template")
```
  </TabItem>
  <TabItem value="maven" label="Maven">
```xml
<dependency>
    <groupId>io.flamingock.template</groupId>
    <artifactId>sql-template</artifactId>
    <version>1.0.0</version>
</dependency>
```
  </TabItem>
</Tabs>

### Step 2: define a Template-based change

In Flamingock, a **ChangeUnit** represents a single unit of work that needs to be applied to your system ‚Äî for example, creating a table, updating a configuration, or setting up a cloud resource.

When using template-based changes, instead of implementing a code-based file to define the logic of the change, you describe the change in a declarative format (e.g., **YAML** file). The structure you use will depend on the template you‚Äôre leveraging.

Create a **YAML file** (e.g., `_0001_create_persons_table.yaml`) inside your application‚Äôs resources directory:

```yaml
id: create-persons-table-from-template
order: 1
templateName: sql-template
templateConfiguration:
  executionSql: |
    CREATE TABLE Persons (
      PersonID int,
      LastName varchar(255),
      FirstName varchar(255),
      Address varchar(255),
      City varchar(255)
    )
```

:::info
Note that your application must provide a `java.sql.Connection` instance as a dependency to Flamingock.
:::

#### üîç Understanding the configuration attributes

- **`id`**: Unique identifier for the change, used for tracking (same as in code-based changes).
- **`order`**: Execution order relative to other changes (also shared with code-based).
- **`templateName`**: Indicates which template should be used to handle the change logic. This is **required** for all template-based changes.
- **`templateConfiguration`**: Section where you define the input parameters for the selected template. These parameters vary depending on the template.
  - In this example, the template expects an `executionSql` field.
- **Other fields**: Some templates may define additional, custom configuration fields (e.g., `rollbackSql` for SQL template).

Template-based changes provide both **structure and flexibility**. They share the core concepts of change tracking with code-based ChangeUnits, but introduce a flexible configuration model where each template defines its own behavior through external parameters.

### Step 3: Configure Flamingock to use the template file

To configure Flamingock to use the YAML template file, you need to define a stage that includes the path to the template file using the `@EnableFlamingock` annotation:

```java
@EnableFlamingock(
    stages = {
        @Stage(location = "src/main/resources/templates")
    }
)
public class MainApplication {
    // Configuration class
}
```

If you prefer to use a pipeline YAML file for configuration, refer to the [Setup & Stages guide](../flamingock-library-config/setup-and-stages.md) for more details.

### Step 4: Run Flamingock

At application startup, Flamingock will automatically detect the YAML file and process it as a standard change, following the same execution flow as code-based changes.

---

## Use case: SQL database migration

Let‚Äôs compare how an SQL migration is handled using a **template-based ChangeUnit** vs. a **traditional code-based ChangeUnit**.

### Approach 1: Using a Traditional Code-Based ChangeUnit

```java
import io.flamingock.api.annotations.ChangeUnit;
import io.flamingock.api.annotations.Execution;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import javax.sql.DataSource;

@ChangeUnit(id = "create-persons-table", order = 1, author = "developer")
public class CreatePersonsTableChangeUnit {

    private final DataSource dataSource;

    public CreatePersonsTableChangeUnit(DataSource dataSource) {
        this.dataSource = dataSource;
    }

    @Execution
    public void execute() throws SQLException {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {

            statement.executeUpdate("""
                CREATE TABLE Persons (
                    PersonID int PRIMARY KEY,
                    LastName varchar(255),
                    FirstName varchar(255),
                    Address varchar(255),
                    City varchar(255)
                )
            """);
        }
    }
}

```

### Approach 2: Using a Flamingock SQL Template

With the **SQL Template**, users define the same migration in **YAML** instead of Java:

```yaml
id: create-persons-table-from-template
order: 1
templateName: sql-template
templateConfiguration:
    executionSql: |
        CREATE TABLE Persons (
            PersonID int,
            LastName varchar(255),
            FirstName varchar(255),
            Address varchar(255),
            City varchar(255)
        )
```

### Key Benefits of Using a Template Instead of Code-Based ChangeUnits:
- **Less code maintenance**: No need to write Java classes, inject DataSource, manage connections, or handle SQL execution manually.
- **Faster onboarding**: YAML is easier for non-Java developers.
- **Standardised migrations**: Ensures best practices and avoids custom implementation errors.
- **Improved readability**: Easier to review and version control.

---

// File: templates/create-your-own-template

# Create your own Flamingock template

## Introduction

[Flamingock Templates](./templates-introduction.md) allow you to encapsulate common logic and reduce boilerplate when defining change units. This document explains how to create your own templates for reuse across projects or for contribution to the Flamingock community.

---

## Overview of the required components

To create a template, you need:

- A Java class extending `AbstractChangeTemplate<SHARED_CONFIG, EXECUTION, ROLLBACK>`
- An `@Execution` method to perform the main change
- (Optionally) A `@RollbackExecution` method for undo support
- A service loader registration file (`META-INF/services`)
- (Optional) Package and distribute your template

---

## 1. Implement the Template class

Extend `AbstractChangeTemplate<SHARED_CONFIG, EXECUTION, ROLLBACK>` with three generics:

- **SHARED_CONFIG**: Shared configuration that applies to both execution and rollback (e.g., database connection, common settings). Use `Void` if no shared config is needed.
- **EXECUTION**: The type representing the execution logic/data
- **ROLLBACK**: The type representing the rollback logic/data  

**Example:**

```java
public class MongoChangeTemplate extends AbstractChangeTemplate<Void, MongoOperation, MongoOperation> {

    public MongoChangeTemplate() {
        super(MongoOperation.class);
    }

    @Execution
    public void execute(MongoDatabase db, @Nullable ClientSession clientSession) {
        if (this.isTransactional && clientSession == null) {
            throw new IllegalArgumentException(String.format("Transactional changeUnit[%s] requires transactional ecosystem with ClientSession", changeId));
        }
        executeOp(db, execution, clientSession);
    }

    @RollbackExecution
    public void rollback(MongoDatabase db, @Nullable ClientSession clientSession) {
        if (this.isTransactional && clientSession == null) {
            throw new IllegalArgumentException(String.format("Transactional changeUnit[%s] requires transactional ecosystem with ClientSession", changeId));
        }
        executeOp(db, rollback, clientSession);
    }

    private void executeOp(MongoDatabase db, MongoOperation op, ClientSession clientSession) {
        op.getOperator(db).apply(clientSession);
    }
}
```

#### Important notes
- Access your execution and rollback data directly via `this.execution` and `this.rollback` fields.
- Access shared configuration via `this.configuration` field (if using a non-Void shared config type).
- If your template references custom types, make sure to register them for reflection‚Äîespecially for **GraalVM** native builds. When extending `AbstractChangeTemplate`, you can pass your custom types to the superclass constructor to ensure proper reflection support.

:::note 
See [**2. Define Execution and Rollback methods** ](./create-your-own-template#2-define-execution-and-rollback-methods) section for how to implement the core logic inside your template class using the execution/rollback data and dependency injection
:::

---

## 2. Define Execution and Rollback methods
Each template must include an `@Execution` method, and may optionally include a `@RollbackExecution` method.
These methods define the core logic that will be executed when Flamingock runs the corresponding change.

Inside these methods, it‚Äôs expected that you use the data provided by the user in the template-based change unit through the following fields:

- `this.execution` ‚Äî the execution logic/data to apply during execution
- `this.rollback` ‚Äî the rollback logic/data to apply during rollback or undo  
- `this.configuration` ‚Äî shared configuration data (if using a non-Void shared config type)

An example of a template for Kafka topic management:

:::info
This is an illustrative example to demonstrate the template structure. Real Kafka templates would use different parameters and configuration structures based on actual requirements.
:::

```java
public class KafkaTopicTemplate extends AbstractChangeTemplate<Void, TopicConfig, String> {

    public KafkaTopicTemplate() {
        super(TopicConfig.class);
    }

    @Execution
    public void execute(AdminClient adminClient) throws Exception {
        // Create topic using the execution configuration
        NewTopic newTopic = new NewTopic(
            this.execution.getName(),
            this.execution.getPartitions(),
            this.execution.getReplicationFactor()
        );
        newTopic.configs(this.execution.getConfigs());
        
        adminClient.createTopics(List.of(newTopic)).all().get();
    }

    @RollbackExecution
    public void rollback(AdminClient adminClient) throws Exception {
        // Delete topic using the rollback topic name
        adminClient.deleteTopics(List.of(this.rollback)).all().get();
    }
}
```

### Example with Shared Configuration

When you need to share configuration between execution and rollback (such as connection details, common settings, etc.), you can use a non-Void shared configuration type:

:::info
This is an illustrative example to demonstrate the shared configuration pattern. Real S3 templates would use different parameters and configuration structures based on actual AWS SDK requirements.
:::

```java
public class S3BucketTemplate extends AbstractChangeTemplate<S3ConnectionConfig, BucketCreationRequest, String> {

    public S3BucketTemplate() {
        super(S3ConnectionConfig.class, BucketCreationRequest.class);
    }

    @Execution
    public void execute() {
        // Access shared configuration for AWS connection
        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
            .withRegion(this.configuration.getRegion())
            .withCredentials(this.configuration.getCredentialsProvider())
            .build();
        
        // Create bucket using execution configuration
        CreateBucketRequest request = new CreateBucketRequest(this.execution.getBucketName())
            .withCannedAcl(this.execution.getAcl());
        
        if (this.execution.getEncryption() != null) {
            // Apply encryption settings
            request.withObjectLockEnabledForBucket(this.execution.getEncryption().isEnabled());
        }
        
        s3Client.createBucket(request);
    }

    @RollbackExecution
    public void rollback() {
        // Use the same shared configuration for rollback
        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
            .withRegion(this.configuration.getRegion())
            .withCredentials(this.configuration.getCredentialsProvider())
            .build();
        
        // Delete bucket using rollback bucket name
        s3Client.deleteBucket(this.rollback);
    }
}
```

This pattern is useful when:
- Both execution and rollback need the same configuration data (AWS credentials, region, etc.)
- You want to avoid duplicating connection details or common settings
- The template needs different data for execution vs rollback operations

### Injecting dependencies into Template methods
Template methods (such as those annotated with `@Execution` and `@RollbackExecution`) support method-level dependency injection using the same mechanism as change units.

Template classes do not support constructor injection.
All dependencies must be injected as parameters in the `@Execution` and `@RollbackExecution` methods.

You can inject any registered dependency as a method parameter:

```java
@Execution
public void execute(MongoDatabase db, ClientService clientService) {
  clientService.doSomething();
}
```
:::info
Flamingock will apply lock-safety guards unless you annotate the parameter with `@NonLockGuarded`.
:::

### Mapping between template-base changeUnit file and template methods

For details on how Flamingock maps the `execution` and `rollback` sections in your declarative change unit to the methods in your template class, refer to the [Template mapping](template-mapping-section.md) documentation.


---

## 3. Register the Template with ServiceLoader

Templates are discovered automatically at runtime using Java‚Äôs `ServiceLoader` system.

Steps:
1. Create a file at:

```
src/main/resources/META-INF/services/io.flamingock.core.api.template.ChangeTemplate
```

2. List the fully qualified class names of all templates in the file:

```plaintext
io.flamingock.template.kafka.CreateTopicTemplate
io.flamingock.template.kafka.UpdateTopicConfigTemplate
io.flamingock.template.kafka.DeleteTopicTemplate
```

:::tip 
Group templates by domain or technology for better maintainability.
:::

---

## 4. Package and distribute the Template

Depending on your target:

### Internal Templates (Private)
- No special packaging needed.
- Keep your template class inside your application.

### Public Templates (Contributing to the Community)
- Package your template as a JAR.
- Notify the Flamingock team via [development@flamingock.io](mailto:development@flamingock.io) or GitHub.
- Submit your template for validation.

#### Validation Requirements:
- Clear and justified use case
- Name must align and not conflict with existing templates
- Technically correct and production-grade implementation
- Public classes must be Javadoc-documented
- Submit a Pull Request adding the template's documentation to [flamingock.github.io](https://github.com/flamingock/flamingock.github.io)

---

## ‚úÖ Best Practices

- Use `AbstractChangeTemplate<SHARED_CONFIG, EXECUTION, ROLLBACK>` with the appropriate generic types for your use case.
- Always provide an `@RollbackExecution` method if rollback or undo is expected.
- Use `Void` for generics when that type is not needed (e.g., `<Void, String, String>` for simple SQL templates).
- Use shared configuration (`<ConfigType, Void, Void>`) when both execution and rollback need the same configuration data.
- Document your template's purpose and generic types clearly for users.
- Ensure all custom types are registered for reflection by passing them to the superclass constructor, especially when targeting native builds.
- Group multiple templates by domain when packaging a library.

---

---

// File: templates/template-mapping-section

### How Execution and Rollback Mapping Works

In a template-based change unit (declarative format), Flamingock uses the `execution` and `rollback` sections to determine which methods to invoke in your template class.

#### Execution

- The method annotated with `@Execution` is **mandatory** for the template developer.
- The `execution` section in the declarative change unit is **mandatory** for the user.
- If the `execution` section is missing, Flamingock throws an exception at startup.

#### Rollback

- The method annotated with `@RollbackExecution` is **mandatory** for the template developer.
- The `rollback` section in the declarative change unit is **optional** for the user.

The behavior of rollback varies depending on context:

**Rollback during execution failure**

- If the system is **transactional** (e.g., MySQL), Flamingock relies on the system‚Äôs native transaction handling. It will not call the rollback method.
- If the system is **non-transactional**, Flamingock will:
  - Attempt to call the `@RollbackExecution` method only if the user provides a `rollback` section in the declarative file.
  - If no rollback config is provided, Flamingock skips the method call and logs the change as **FAILED**.

**Rollback during Undo operations (manual reversion)**

- If a `rollback` section is present in the declarative file, Flamingock will call the `@RollbackExecution` method ‚Äî even if the change was previously applied successfully.
- If no `rollback` is provided, Flamingock skips the rollback logic, but still marks the change as **ROLLED_BACK** in the audit.

:::note 
In undo operations, if rollback is not defined in the declarative file, the change is marked as reverted even though no actual rollback was executed. It‚Äôs up to the user to ensure reversibility when needed.
:::

---

// File: testing/introduction

## Introduction

This section provides guidance on how to test applications that use **Flamingock**, including strategies for validating your change logic, ensuring proper execution coordination, and maintaining audit and rollback guarantees.

Whether you are running Flamingock in a local development environment, as part of CI pipelines, or through framework integrations like Spring Boot, testing is a key part of ensuring consistency and reliability across deployments.

Flamingock is not limited to database systems ‚Äî it supports a wide range of targets (e.g., message brokers, file systems, APIs). Your testing strategy should reflect the behavior of the underlying systems you integrate with.

---

## What to test

There are **three primary levels** at which Flamingock-related functionality can be tested:

### 1. Unit test: Change logic
Isolate and test the logic inside your `@Execution` and `@RollbackExecution` methods without involving Flamingock‚Äôs runtime or audit mechanism.

- Use mocks for dependencies (e.g., `MongoTemplate`, `DynamoDbClient`, `S3Client`)
- Focus on business correctness and expected side effects
- No audit logs or locking are involved

üëâ See [Unit testing your change units](./unit-testing.md)

---

### 2. Integration test: Flamingock execution
Run Flamingock end-to-end in a controlled environment to verify:

- Execution of the `@Execution` method
- Audit log persistence
- Rollback behavior on failure

This usually requires a real or containerized backend system (e.g., using **Testcontainers**).

üëâ See [Integration testing Flamingock](./integration-testing.md)

---

### 3. Spring Boot integration
For applications using **Spring Boot**, test how Flamingock integrates with your app lifecycle:

- Use `@SpringBootTest` to validate full configuration
- Confirm that changes run on startup
- Optionally inject mocks to verify execution paths

üëâ See [Testing with Spring Boot](./springboot-integration-testing.md)

---

// File: testing/unit-testing

## Introduction

Unit tests focus on verifying the internal logic of a **single change unit**, without relying on any external system.  
They are fast, isolated, and ideal for validating:

- That the `@Execution` method performs the correct logic
- That the `@RollbackExecution` method compensates properly on failure
- That injected dependencies are used as expected (using mocks or fakes)

Unit tests are most useful when your change unit contains business logic, computation, validation, or decisions.

---

## Example: Creating an S3 bucket

Suppose you have a change unit that creates an Amazon S3 bucket:

```java
@Change(id = "create-bucket", order = "0001", author = "dev-team")
public class _0001_CreateS3BucketChange {

  @Execution
  public void execute(S3Client s3Client) {
    s3Client.createBucket(CreateBucketRequest.builder()
        .bucket("flamingock-test-bucket")
        .build());
  }

  @RollbackExecution
  public void rollback(S3Client s3Client) {
    s3Client.deleteBucket(DeleteBucketRequest.builder()
        .bucket("flamingock-test-bucket")
        .build());
  }
}
```

---

## Writing a unit test

To unit test this class, we use JUnit and a mocking library (e.g., Mockito).  
We'll mock the `S3Client` and verify the correct calls were made.

```java
class _0001_CreateS3BucketChangeTest {

  private final S3Client s3Client = mock(S3Client.class);
  private final CreateS3BucketChange change = new CreateS3BucketChange();

  @Test
  void shouldCallCreateBucketOnExecution() {
    S3Client s3Client = mock(S3Client.class);
    new _0001_CreateS3BucketChange().execute(s3Client);

    verify(s3Client).createBucket(argThat(req ->
        req.bucket().equals("flamingock-test-bucket")));
  }

  @Test
  void shouldCallDeleteBucketOnRollback() {
    S3Client s3Client = mock(S3Client.class);
    new _0001_CreateS3BucketChange().rollback(s3Client);
    
    verify(s3Client).deleteBucket(argThat(req ->
        req.bucket().equals("flamingock-test-bucket")));
  }
}
```

---

## ‚úÖ Best practices

- Use mocks or fakes to isolate the dependencies used in your change unit
- Focus only on the logic inside the `@Execution` and `@RollbackExecution` methods
- Keep assertions specific and minimal ‚Äî check that the right dependencies are called
- Avoid testing Flamingock itself (e.g., locking or audit behavior ‚Äî that‚Äôs handled in integration tests)
- Use descriptive test names like `shouldCallCreateBucketOnExecution()` for readability

---

// File: testing/integration-testing

## Introduction

Integration tests ensure that Flamingock operates correctly in a real environment by executing changes against live systems ‚Äî such as databases, cloud APIs, or internal services. 

These tests involve spinning up the actual backend system and running Flamingock end-to-end:

- Change unit execution
- Audit log persistence
- Distributed lock acquisition

Integration tests should be used to validate that the full pipeline behaves as expected ‚Äî from execution to rollback.

---

## Example: Creating an S3 bucket

Suppose you have a change unit that creates an Amazon S3 bucket:

```java
@Change(id = "create-bucket", order = "0001", author = "dev-team")
public class _0001_CreateS3BucketChange {

  @Execution
  public void execute(S3Client s3Client) {
    s3Client.createBucket(CreateBucketRequest.builder()
        .bucket("flamingock-test-bucket")
        .build());
  }

  @RollbackExecution
  public void rollback(S3Client s3Client) {
    s3Client.deleteBucket(DeleteBucketRequest.builder()
        .bucket("flamingock-test-bucket")
        .build());
  }
}
```

---

## Integration test with Testcontainers

To test this change end-to-end, we will:

1. Spin up a **MongoDB container** to be used as Flamingock‚Äôs audit backend
2. Inject a real **S3 client** (mocked, localstack, or real AWS)
3. Configure Flamingock and execute it

```java
class IntegrationTest {

    static final MongoDBContainer mongoContainer = new MongoDBContainer("mongo:6.0");

    @BeforeAll
    static void initMongo() {
        mongoContainer.start();
    }

    @AfterAll
    static void tearDown() {
        mongoContainer.stop();
    }

    @Test
    void shouldExecuteChangeAgainstS3AndAuditToMongo() {
        S3Client s3Client = S3Client.builder()
                .region(Region.EU_WEST_1)
                .build();

        MongoClient mongoClient = MongoClients.create(mongoContainer.getReplicaSetUrl());

        Runner runner = Flamingock.builder()
                .addDependency(s3Client)
                .addDependency(mongoClient)
                .setProperty("mongodb.databaseName", "test-db")
                .build();

        runner.execute();

        // ‚úÖ Verify the S3 bucket was created
        ListBucketsResponse buckets = s3Client.listBuckets();
        boolean bucketExists = buckets.buckets().stream()
                .anyMatch(b -> b.name().equals("flamingock-test-bucket"));
        assertTrue(bucketExists, "Expected S3 bucket was not found");

        // ‚úÖ Verify the change was audited in MongoDB
        MongoDatabase db = mongoClient.getDatabase("test-db");
        MongoCollection<Document> auditCollection = db.getCollection("flamingockAuditLogs");

        Document document = new Document("changeId", "create-bucket")
                .append("state","EXECUTED");
        Document auditEntry = auditCollection.find(document).first();
        assertNotNull(auditEntry, "Flamingock audit log entry was not found in MongoDB");
    }

}
```

---

## ‚úÖ Best practices

- Use Testcontainers to spin up a real audit backend (e.g., MongoDB) ‚Äî this avoids the need for manual test setup
- Run Flamingock fully using `.build().execute()` ‚Äî don‚Äôt call internal methods manually
- Clean up the backend between tests or isolate data with unique test identifiers
- Validate changes by checking the actual target system or using custom assertions
- Use integration tests sparingly ‚Äî unit tests are faster and should cover most logic

---

// File: testing/springboot-integration-testing

## Introduction

This guide explains how to write integration tests for Flamingock when using **Spring Boot** with the `@EnableFlamingock` annotation.

With this setup:

- Flamingock is auto-configured using Spring Boot properties
- Dependencies like `Kafka AdminClient` or `DynamoDbClient`  must be declared as Spring beans
- The change units are executed end-to-end using real systems (e.g., DynamoDB Local, Kafka, S3)

> This test style is ideal for verifying that Flamingock interacts correctly with both its audit backend and any external systems.

---

## Example: Modifying a Kafka topic and auditing to DynamoDB

Suppose you have a change unit that modifies a Kafka topic configuration:

```java
@Change(id = "modify-topic-config", order = "0002", author = "dev-team")
public class _0002_ModifyKafkaTopicConfig {

  @Execution
  public void execute(AdminClient adminClient) {
    Map<ConfigResource, Config> configs = Map.of(
      new ConfigResource(ConfigResource.Type.TOPIC, "orders"),
      new Config(List.of(new ConfigEntry("retention.ms", "86400000")))
    );

    adminClient.alterConfigs(configs).all().join();
  }

  @RollbackExecution
  public void rollback(AdminClient adminClient) {
    Map<ConfigResource, Config> configs = Map.of(
      new ConfigResource(ConfigResource.Type.TOPIC, "orders"),
      new Config(List.of(new ConfigEntry("retention.ms", "604800000")))
    );

    adminClient.alterConfigs(configs).all().join();
  }
}
```

---

## Writing the test

In this test, we‚Äôll:

- Spin up **Kafka** and **DynamoDB Local** using Testcontainers
- Provide the required beans (`AdminClient`, `DynamoDbClient`) to Spring Boot
- Assert that the Flamingock change unit executed and was **audited to DynamoDB**

:::info 
Flamingock requires `DynamoDbClient` and other injected services (like `AdminClient`) to be present in the Spring ApplicationContext. Spring Boot will auto-detect them if they are declared as `@Bean`s.
:::
```java
@SpringBootTest
@Testcontainers
@EnableFlamingock(
    stages = {
        @Stage(location = "com.yourapp.changes")
    }
)
public class FlamingockSpringbootTest {

  static final KafkaContainer kafka = new KafkaContainer(DockerImageName.parse("confluentinc/cp-kafka:7.2.1"));
  
  static final GenericContainer<?> dynamoDb = new GenericContainer<>("amazon/dynamodb-local")
      .withExposedPorts(8000);

  @BeforeAll
  static void startContainers() {
    kafka.start();
    dynamoDb.start();
  }

  @AfterAll
  static void stopContainers() {
    kafka.stop();
    dynamoDb.stop();
  }

  @Bean
  public DynamoDbClient dynamoDbClient() {
    return DynamoDbClient.builder()
        .region(Region.US_EAST_1)
        .endpointOverride(URI.create("http://" + dynamoDb.getHost() + ":" + dynamoDb.getFirstMappedPort()))
        .build();
  }

  @Bean
  public AdminClient kafkaAdminClient() {
    Properties config = new Properties();
    config.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, kafka.getBootstrapServers());
    return AdminClient.create(config);
  }

  @Test
  void shouldExecuteChangeAndWriteAuditToDynamoDB() {
    DynamoDbClient client = dynamoDbClient();
    ScanResponse scan = client.scan(ScanRequest.builder()
        .tableName("flamingockAuditLogs")
        .build());

    boolean changeExecuted = scan.items().stream()
        .anyMatch(item -> "modify-topic-config".equals(item.get("changeId").s())
                       && "EXECUTED".equals(item.get("state").s()));

    assertTrue(changeExecuted, "Audit log entry for executed change not found in DynamoDB");
  }
}
```

---

## Advanced configuration

Flamingock can be configured using Spring Boot properties, either in your `application.yml` or dynamically via `@DynamicPropertySource`.

This is especially useful for setting values like:

```java
@DynamicPropertySource
static void overrideProperties(DynamicPropertyRegistry registry) {
  String endpoint = "http://" + dynamoDb.getHost() + ":" + dynamoDb.getFirstMappedPort();
  registry.add("flamingock.dynamodb.readCapacityUnits", () -> 5L);
  registry.add("flamingock.dynamodb.writeCapacityUnits", () -> 5L);
  registry.add("flamingock.dynamodb.autoCreate", () -> true);
  registry.add("flamingock.dynamodb.auditRepositoryName", () -> "flamingockAuditLogs");
  registry.add("flamingock.dynamodb.lockRepositoryName", () -> "flamingockLock");
}
```

These properties allow Flamingock to connect to the appropriate DynamoDB instance and create its internal metadata tables automatically.

---

## Best practices

- Declare all required dependencies (like `DynamoDbClient`, `AdminClient`, etc.) as Spring beans
- Use `@DynamicPropertySource` to inject dynamic config for local/test environments
- Validate both the **external effect** (Kafka, S3, etc.) and the **audit record** in the backend
- Use `Testcontainers` for isolation and reproducibility across environments
- Keep tests focused: use Spring Boot only when testing real integration scenarios (not just logic)