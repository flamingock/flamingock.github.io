Ok, as extension of the configuration, we have an entire section(folder with pages) for springboot integration.


The springboot integration in flamingock has this main benefits
- allows property injection via native springboot configuration files
- allows dependency injection via springboot ApplicationContext
- Allows events handling based on ApplicationEvenPublisher
- ChangeUnit executions can benefit from springboot profiles
- Run flamingock as springboot ApplicationRunner or InitializingBean

As explained in the client-configuration briefly, when using springboot, Flamingock provides two approaches
- manually with the builder, which requires the user to setup manually with the builder(injecting all the flamingock properties,
   the ApplicationContext and ApplicationEventPublisher and the profiles with the builder.

- Automatically, triggered via annotating the main class with @EnableFlamingock. With this approach Flamingock automatically takes the ApplicationContext
  , ApplicationEventPublisher and profiles.


I want to split the section in the following pages
- introduction(this page should serves an overview, explaining the motivation, briefly the two approaches and as precursor of the following pages, that are a bit more detailed)
- manual approach with builder(I want you to suggest a name for this approach)
- automatic approach with @EnableFlamingock
- profiles
- events


Before starting with the introduction page, how would you call the two approaches


-----------------------

Ok, lets go for

- Builder-based setup (manual)
- @EnableFlamingock setup (automatic)
- Runner strategy

Now let's jump to the first page: introduction.
Remember
- Act as a great communicator, highly skilled and experienced writing technical documentation that is useful, professional and asy to follow and understand
- Avoid using unnecessary emojis, specially in titles
- for note messages use
:::note
message
:::
- for tip messages use
:::tip
message
:::
- for info messages use
:::info
message
:::
- for warning messages use
:::warning
message
:::
- for danger messages use
:::danger
message
:::

- show me first how the content will look like, We'll iterate until I approve. Once approved you will generate the markdown file for me to download



-------------

Lets jump now to the builder based setup

- I guess is good to start with an introduction, briefly giving the context

- also reminding the dependencies to import with gradle and maven

- with the builder base setup the user is responsible for injecting the ApplicationContext and ApplicationEventPublisher, as platform component(with addDependency),
teh flamingock configuration needs to be injected with the flamingock builder, as with the standalone, and profiles needs to be set with .setProfiles(String[] activeProfiles) method in the builder

- then the user can manually run flamingock or can inject it as bean to the Springboot context(creating a normal bean) as ApplicationRunner or InitializingBean with the help or our utility class SpringbootUtil, that has two method
SpringbootUtil.toInitializingBean(builder) and SpringbootUtil.toApplicationRunner()


As always Remember
- Act as a great communicator, highly skilled and experienced writing technical documentation that is useful, professional and asy to follow and understand
- Avoid using unnecessary emojis, specially in titles
- In titles use capital only in the starting character and in names(like Flamingock)
- for note messages use
:::note
message
:::
- for tip messages use
:::tip
message
:::
- for info messages use
:::info
message
:::
- for warning messages use
:::warning
message
:::
- for danger messages use
:::danger
message
:::

- show me first how the content will look like, We'll iterate until I approve. Once approved you will generate the markdown file for me to download



---------------------

let's jump now to the "@EnableFlamingock setup (automatic)" page

- I guess is good to start with an introduction, briefly giving the context

- also reminding the dependencies to import with gradle and maven

- with this setup
> the user needs to annotate the main class with @EnableFlamingock
> with this, flamingock does the magic, to find the ApplicationContext(in which the bean and profiles resolution is based on) and ApplicationEventPublisher
> also picks the flamingock configuration(as you already know: lock, etc.) , that instead of being injected manually via builder, it's provided via native springboot file configuration under the section "flamingock"
> also in the same file config the user can specify the runner strategy(runner-type property): ApplicationRunner(default if nothing is declared) or InitializingBean

Example of file configuration
in yaml,would be something like
//some previous spring config
flamingock:
    lockAcquiredForMillis: 1200
    runnerType: InitializingBean
    //more
//more spring config





As always Remember

- Act as a great communicator, highly skilled and experienced writing technical documentation that is useful, professional and asy to follow and understand

- Avoid using unnecessary emojis, specially in titles

- In titles use capital only in the starting character and in names(like Flamingock)

- for note messages use
:::note
message
:::
- for tip messages use
:::tip
message
:::
- for info messages use
:::info
message
:::
- for warning messages use
:::warning
message
:::
- for danger messages use
:::danger
message
:::

- important, if you have any doubt, about anything, ask anything you need,as  many times you need.

- show me first how the content will look like, We'll iterate until I approve. Once approved you will generate the markdown file for me to download


-----
